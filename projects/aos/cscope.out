cscope 15 $HOME/aos-test/projects/aos               0000841654
	@apps/sosh/src/benchmark.c

12 
	~<autoc⁄f.h
>

13 
	~<as£π.h
>

14 
	~<°d¨g.h
>

15 
	~<°rög.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<öây≥s.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<time.h
>

22 
	~<sys/time.h
>

23 
	~<utûs/utû.h
>

25 
	~<sos.h
>

29 
	#WARMUPS
 1

	)

34 
	#ITERATIONS
 10

	)

37 
	#N_RESULTS
 (
WARMUPS
 + 
ITERATIONS
)

	)

40 
	#KB
 1024

	)

41 
	#MB
 (
KB
*KB)

	)

44 
	#MIN_BUF_SIZE
 9u

	)

45 
	#MAX_BUF_SIZE
 18u

	)

50 
	#TOTAL_FILE_SIZE
 (4 * 
MB
)

	)

52 
_Sètic_as£π
 (
BIT
(
MAX_BUF_SIZE
Ë<
TOTAL_FILE_SIZE
, "total file size must beá multiple of MAX_BUF_SIZE");

53 
_Sètic_as£π
 (
MIN_BUF_SIZE
 > 0, "min buf size biggerÅhan 0");

54 
_Sètic_as£π
(
MAX_BUF_SIZE
 >
MIN_BUF_SIZE
, "min buf size smallerÅhan orÉqÅo max buf size");

57 
	#BENCHMARK_FILE
 "bíchm¨k.d©"

	)

59 
	#BENCHMARK_RESULTS_FILE
 "ªsu…s.tsv"

	)

62 
	#CCNT_64
 
	`BIT
(3u)

	)

63 
	#CCNT_RESET
 
	`BIT
(2u)

	)

64 
	#CCNT_ENABLE
 
	`BIT
(0u)

	)

65 
	#CCNT_START
 
	`BIT
(31u)

	)

68 
	#LINE_SIZE
 200

	)

70 
	#PMU_WRITE
(
ªg
, 
v
) \

72 
£L4_W‹d
 
_v
 = 
v
; \

73 
asm
 vﬁ©ûe("m§ " 
ªg
 ", %0" :: "r" (
_v
)); \

74 }0)

	)

76 
	#PMU_READ
(
ªg
, 
v
Ë
asm
 vﬁ©ûe("mr†%0, "Ñeg : "Ù"(v))

	)

78 
	#PMCCNTR
 "PMCCNTR_EL0"

	)

79 
	#PMCNTENSET
 "PMCNTENSET_EL0"

	)

80 
	#PMCR
 "PMCR_EL0"

	)

82 
	#READ_CCNT
(
v¨
Ë
	`PMU_READ
(
PMCCNTR
, v¨)

	)

83 
	#READ_PMCR
(
v¨
Ë
	`PMU_READ
(
PMCR
, v¨)

	)

85 
	#WRITE_PMCR
(
v¨
Ë
	`PMU_WRITE
(
PMCR
, v¨)

	)

88 
	#LOOPS
 (
TOTAL_FILE_SIZE
/
	`BIT
(
MAX_BUF_SIZE
))

	)

90 
	gbuf
[
TOTAL_FILE_SIZE
];

92 (*
	tbíchm¨k_‚_t
)(
	tfd
, *
	tbuf
, 
	tsize_t
 
	tnbyã
);

94 
	$öô_c˙t
()

97 
uöt32_t
 
pm¸
;

98 
	`READ_PMCR
(
pm¸
);

99 
pm¸
 |(
CCNT_RESET
 | 
CCNT_ENABLE
 | 
CCNT_64
);

100 
	`WRITE_PMCR
(
pm¸
);

103 
uöt32_t
 
pm˙t£t
 = 
CCNT_START
;

104 
	`PMU_WRITE
(
PMCNTENSET
, 
pm˙t£t
);

105 
	}
}

107 
	$ª£t_c˙t
(
uöt32_t
 
pm¸
)

109 
pm¸
 |
CCNT_RESET
;

110 
	`WRITE_PMCR
(
pm¸
);

111 
	}
}

113 
	$sos_Ârötf
(
fd
, c⁄° *
f‹m©
, ...)

117 
va_li°
 
¨gs
;

118 
	`va_°¨t
(
¨gs
, 
f‹m©
);

119 
buf
[
LINE_SIZE
];

120 
	`v¢¥ötf
(
buf
, 
LINE_SIZE
, 
f‹m©
, 
¨gs
);

121 
	`va_íd
(
¨gs
);

122 
	`sos_sys_wrôe
(
fd
, 
buf
, 
	`°∫Àn
(buf, 
LINE_SIZE
));

123 
	}
}

125 
	$›í_hñ≥r
(*
«me
, 
fmode_t
 
mode
)

127 
fd
 = 
	`sos_sys_›í
(
«me
, 
mode
);

128 i‡(
fd
 == -1) {

129 
	`¥ötf
("FaûedÅÿ›í fûê%s\n", 
«me
);

131  
fd
;

132 
	}
}

134 
	$run_bíchm¨k
(*
«me
, 
bíchm¨k_‚_t
 
‚
, 
uöt32_t
 
ovîhód
,

135 
ªsu…s_fd
, 
debug_mode
)

137 
uöt32_t
 
ªsu…s
[
N_RESULTS
];

138 
uöt32_t
 
pm¸
;

139 
	`READ_PMCR
(
pm¸
);

142 
fd
 = 
	`›í_hñ≥r
(
BENCHMARK_FILE
, 
O_RDWR
);

143 i‡(
fd
 == -1) {

150 
size_t
 
sz
 = 
	`BIT
(
MIN_BUF_SIZE
); sz <BIT(
MAX_BUF_SIZE
); sz = sz << 3u) {

151 
uöt32_t
 
°¨t
, 
íd
;

153 
i
 = 0; i < 
N_RESULTS
; i++) {

154 
	`ª£t_c˙t
(
pm¸
);

155 
	`READ_CCNT
(
°¨t
);

157 
j
 = 0; j < 
LOOPS
; j++) {

158 i‡(
debug_mode
) {

159 i‡(
‚
 =(
bíchm¨k_‚_t
Ë
sos_sys_wrôe
) {

161 
	`as£π
(
	`CLZ
(
sz
) < sz);

162 
buf
[
j
 * 
sz
 + 
	`CLZ
(sz)] = () CLZ(sz);

166 
	`as£π
(
j
 * 
sz
 < sz * 
LOOPS
);

167 
ªs
 = 
	`‚
(
fd
, &
buf
[
j
 * 
sz
], sz);

169 i‡(
debug_mode
) {

171 i‡(
ªs
 !
sz
) {

172 
	`¥ötf
("benchmark_fn didÇot %s full buf size, only %d/%zu\n",

173 
«me
, 
ªs
, 
sz
);

174 
	`sos_sys_˛o£
(
fd
);

178 i‡(
‚
 =
sos_sys_ªad
) {

179 
	`as£π
(
buf
[
j
 * 
sz
 + 
	`CLZ
(sz)] == () CLZ(sz));

184 
	`READ_CCNT
(
íd
);

185 
ªsu…s
[
i
] = 
íd
 - 
°¨t
;

189 
	`sos_Ârötf
(
ªsu…s_fd
, "{\"«me\": \"%s\",", 
«me
);

190 
	`sos_Ârötf
(
ªsu…s_fd
, "\"buf_size\": %u,", 
sz
);

191 
	`sos_Ârötf
(
ªsu…s_fd
, "\"fûe_size\": %u,", 
LOOPS
 * 
sz
);

192 
	`sos_Ârötf
(
ªsu…s_fd
, "\"samples\": [");

194 
uöt64_t
 
check_sum
 = 0;

195 
i
 = 
WARMUPS
; i < 
N_RESULTS
; i++) {

197 
uöt32_t
 
ªsu…
 = 
ªsu…s
[
i
] - 
ovîhód
;

198 
	`sos_Ârötf
(
ªsu…s_fd
, "%u", 
ªsu…
);

199 i‡(
i
 < 
N_RESULTS
 - 1) {

200 
	`sos_Ârötf
(
ªsu…s_fd
, ",");

202 
	`sos_Ârötf
(
ªsu…s_fd
, "]");

205 
check_sum
 +
ªsu…
;

207 
	`sos_Ârötf
(
ªsu…s_fd
, ",\"check_sum\":%Œu}\n", 
check_sum
);

209 i‡(
sz
 !
	`BIT
(
MAX_BUF_SIZE
)) {

210 
	`sos_Ârötf
(
ªsu…s_fd
, ",");

215 
	`sos_sys_˛o£
(
fd
);

217 
	}
}

219 
uöt32_t
 
	$föd_ovîhód
()

222 
uöt32_t
 
ªsu…s
[
N_RESULTS
] = {0};

223 
uöt32_t
 
°¨t
, 
íd
;

224 
i
 = 0; i < 
N_RESULTS
; i++) {

225 
	`READ_CCNT
(
°¨t
);

226 
	`READ_CCNT
(
íd
);

227 
ªsu…s
[
i
] = 
íd
 - 
°¨t
;

231 
uöt32_t
 
ovîhód
 = 
UINT32_MAX
;

232 
i
 = 
WARMUPS
; i < 
N_RESULTS
; i++) {

233 
ovîhód
 = 
	`MIN
(
ªsu…s
[
i
], overhead);

235  
ovîhód
;

236 
	}
}

238 
	$sos_bíchm¨k
(
debug_mode
)

240 
	`öô_c˙t
();

243 
uöt32_t
 
ovîhód
 = 
	`föd_ovîhód
();

247 
ªsu…s_fd
 = 
	`›í_hñ≥r
(
BENCHMARK_RESULTS_FILE
, 
O_WRONLY
);

248 i‡(
ªsu…s_fd
 == -1) {

252 
	`sos_Ârötf
(
ªsu…s_fd
, "[");

254 
ªs
 = 
	`run_bíchm¨k
("sos_sys_wrôe", (
bíchm¨k_‚_t
Ë
sos_sys_wrôe
,

255 
ovîhód
, 
ªsu…s_fd
, 
debug_mode
);

257 i‡(
ªs
 == -1) {

258 
	`sos_sys_˛o£
(
ªsu…s_fd
);

261 
	`sos_Ârötf
(
ªsu…s_fd
, ",");

264 
ªs
 = 
	`run_bíchm¨k
("sos_sys_ªad", 
sos_sys_ªad
, 
ovîhód
, 
ªsu…s_fd
,

265 
debug_mode
);

266 
	`sos_Ârötf
(
ªsu…s_fd
, "]");

267 
	`sos_sys_˛o£
(
ªsu…s_fd
);

268  
ªs
;

269 
	}
}

	@apps/sosh/src/benchmark.h

13 #¥agm®
⁄˚


16 
sos_bíchm¨k
(
debug_mode
);

	@apps/sosh/src/sosh.c

14 
	~<as£π.h
>

15 
	~<°rög.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<öây≥s.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<time.h
>

22 
	~<sys/time.h
>

23 
	~<utûs/time.h
>

24 
	~<sysˇŒs.h
>

26 
	~<sos.h
>

28 
	~"bíchm¨k.h
"

30 
	#BUF_SIZ
 6144

	)

31 
	#MAX_ARGS
 32

	)

33 
	gö
;

34 
sos_°©_t
 
	gsbuf
;

36 
size_t
 
	$sos_debug_¥öt
(c⁄° *
vD©a
, 
size_t
 
cou¡
)

38 
size_t
 
i
;

39 c⁄° *
ªÆd©a
 = 
vD©a
;

40 
i
 = 0; i < 
cou¡
; i++) {

41 
	`£L4_DebugPutCh¨
(
ªÆd©a
[
i
]);

43  
cou¡
;

44 
	}
}

47 
size_t
 
	$sos_wrôe
(*
vD©a
, 
size_t
 
cou¡
)

50  
	`sos_debug_¥öt
(
vD©a
, 
cou¡
);

51 
	}
}

53 
size_t
 
	$sos_ªad
(*
vD©a
, 
size_t
 
cou¡
)

57 
	}
}

59 
	$¥°©
(c⁄° *
«me
)

62 
	`¥ötf
("%c%c%c%c 0x%06x 0x%lx 0x%06lx %s\n",

63 
sbuf
.
°_ty≥
 =
ST_SPECIAL
 ? 's' : '-',

64 
sbuf
.
°_fmode
 & 
FM_READ
 ? 'r' : '-',

65 
sbuf
.
°_fmode
 & 
FM_WRITE
 ? 'w' : '-',

66 
sbuf
.
°_fmode
 & 
FM_EXEC
 ? 'x' : '-', sbuf.
°_size
, sbuf.
°_˘ime
,

67 
sbuf
.
°_©ime
, 
«me
);

68 
	}
}

70 
	$ˇt
(
¨gc
, **
¨gv
)

72 
fd
;

73 
buf
[
BUF_SIZ
];

74 
num_ªad
, 
°dout_fd
, 
num_wrôãn
 = 0;

77 i‡(
¨gc
 != 2) {

78 
	`¥ötf
("Usage: cat filename\n");

82 
	`¥ötf
("<%s>\n", 
¨gv
[1]);

84 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

85 
°dout_fd
 = 
	`›í
("c⁄sﬁe", 
O_WRONLY
);

87 
	`as£π
(
fd
 >= 0);

89 (
num_ªad
 = 
	`ªad
(
fd
, 
buf
, 
BUF_SIZ
)) > 0) {

90 
num_wrôãn
 = 
	`wrôe
(
°dout_fd
, 
buf
, 
num_ªad
);

93 
	`˛o£
(
°dout_fd
);

95 i‡(
num_ªad
 =-1 || 
num_wrôãn
 == -1) {

96 
	`¥ötf
("error on write\n");

101 
	}
}

103 
	$˝
(
¨gc
, **
¨gv
)

105 
fd
, 
fd_out
;

106 *
fûe1
, *
fûe2
;

107 
buf
[
BUF_SIZ
];

108 
num_ªad
, 
num_wrôãn
 = 0;

110 i‡(
¨gc
 != 3) {

111 
	`¥ötf
("Usage: cp fromÅo\n");

115 
fûe1
 = 
¨gv
[1];

116 
fûe2
 = 
¨gv
[2];

118 
fd
 = 
	`›í
(
fûe1
, 
O_RDONLY
);

119 
fd_out
 = 
	`›í
(
fûe2
, 
O_WRONLY
);

121 
	`as£π
(
fd
 >= 0);

123 (
num_ªad
 = 
	`ªad
(
fd
, 
buf
, 
BUF_SIZ
)) > 0) {

124 
num_wrôãn
 = 
	`wrôe
(
fd_out
, 
buf
, 
num_ªad
);

127 i‡(
num_ªad
 =-1 || 
num_wrôãn
 == -1) {

128 
	`¥ötf
("error on cp\n");

133 
	}
}

135 
	#MAX_PROCESSES
 10

	)

137 
	$ps
(
¨gc
, **
¨gv
)

139 
sos_¥o˚ss_t
 *
¥o˚ss
;

140 
i
, 
¥o˚s£s
;

142 
¥o˚ss
 = 
	`mÆloc
(
MAX_PROCESSES
 * (*process));

144 i‡(
¥o˚ss
 =
NULL
) {

145 
	`¥ötf
("%s: ouào‡mem‹y\n", 
¨gv
[0]);

149 
¥o˚s£s
 = 
	`sos_¥o˚ss_°©us
(
¥o˚ss
, 
MAX_PROCESSES
);

151 
	`¥ötf
("TID SIZE STIME CTIME COMMAND\n");

153 
i
 = 0; i < 
¥o˚s£s
; i++) {

154 
	`¥ötf
("%3d %4d %7d %s\n", 
¥o˚ss
[
i
].
pid
,Öro˚ss[i].
size
,

155 
¥o˚ss
[
i
].
°ime
,Öro˚ss[i].
comm™d
);

158 
	`‰ì
(
¥o˚ss
);

161 
	}
}

163 
	$exec
(
¨gc
, **
¨gv
)

165 
pid_t
 
pid
;

166 
r
;

167 
bg
 = 0;

169 i‡(
¨gc
 < 2 || (¨g¯> 2 && 
¨gv
[2][0] != '&')) {

170 
	`¥ötf
("Usage:Éxec filename [&]\n");

174 i‡((
¨gc
 > 2Ë&& (
¨gv
[2][0] == '&')) {

175 
bg
 = 1;

178 i‡(
bg
 == 0) {

179 
r
 = 
	`˛o£
(
ö
);

180 
	`as£π
(
r
 == 0);

183 
pid
 = 
	`sos_¥o˚ss_¸óã
(
¨gv
[1]);

184 i‡(
pid
 >= 0) {

185 
	`¥ötf
("ChûdÖid=%d\n", 
pid
);

186 i‡(
bg
 == 0) {

187 
	`sos_¥o˚ss_waô
(
pid
);

190 
	`¥ötf
("Failed!\n");

192 i‡(
bg
 == 0) {

193 
ö
 = 
	`›í
("c⁄sﬁe", 
O_RDONLY
);

194 
	`as£π
(
ö
 >= 0);

197 
	}
}

199 
	$dú
(
¨gc
, **
¨gv
)

201 
i
 = 0, 
r
;

202 
buf
[
BUF_SIZ
];

204 i‡(
¨gc
 > 2) {

205 
	`¥ötf
("ußge: %†[fûe]\n", 
¨gv
[0]);

209 i‡(
¨gc
 == 2) {

210 
r
 = 
	`sos_°©
(
¨gv
[1], &
sbuf
);

211 i‡(
r
 < 0) {

212 
	`¥ötf
("°©(%sËÁûed: %d\n", 
¨gv
[1], 
r
);

215 
	`¥°©
(
¨gv
[1]);

220 
r
 = 
	`sos_gëdúít
(
i
, 
buf
, 
BUF_SIZ
);

221 i‡(
r
 < 0) {

222 
	`¥ötf
("dúít(%dËÁûed: %d\n", 
i
, 
r
);

224 } i‡(!
r
) {

227 
r
 = 
	`sos_°©
(
buf
, &
sbuf
);

228 i‡(
r
 < 0) {

229 
	`¥ötf
("°©(%sËÁûed: %d\n", 
buf
, 
r
);

232 
	`¥°©
(
buf
);

233 
i
++;

236 
	}
}

238 
	$£c⁄d_¶ìp
(
¨gc
, *
¨gv
[])

240 i‡(
¨gc
 != 2) {

241 
	`¥ötf
("Ußgê%†£c⁄ds\n", 
¨gv
[0]);

244 
	`¶ìp
(
	`©oi
(
¨gv
[1]));

246 
	}
}

248 
	$mûli_¶ìp
(
¨gc
, *
¨gv
[])

250 
time•ec
 
tv
;

251 
uöt64_t
 
«nos
;

252 i‡(
¨gc
 != 2) {

253 
	`¥ötf
("Ußgê%†mûli£c⁄ds\n", 
¨gv
[0]);

256 
«nos
 = (
uöt64_t
)
	`©oi
(
¨gv
[1]Ë* 
NS_IN_MS
;

258 
tv
.
tv_£c
 = 
«nos
 / 
NS_IN_S
;

260 
tv
.
tv_n£c
 = 
«nos
 % 
NS_IN_S
;

261 
	`«no¶ìp
(&
tv
, 
NULL
);

263 
	}
}

265 
	$£c⁄d_time
(
¨gc
, *
¨gv
[])

267 
	`¥ötf
("%d sec⁄d†sö˚ boŸ\n", ()
	`time
(
NULL
));

269 
	}
}

271 
	$mi¸o_time
(
¨gc
, *
¨gv
[])

273 
timevÆ
 
time
;

274 
	`gëtimeofday
(&
time
, 
NULL
);

275 
uöt64_t
 
mi¸os
 = (uöt64_t)
time
.
tv_£c
 * 
US_IN_S
 + (uöt64_tÈime.
tv_u£c
;

276 
	`¥ötf
("%lu mi¸o£c⁄d†sö˚ boŸ\n", 
mi¸os
);

278 
	}
}

280 
	$kûl
(
¨gc
, *
¨gv
[])

282 
pid_t
 
pid
;

283 i‡(
¨gc
 != 2) {

284 
	`¥ötf
("Usage: killÖid\n");

288 
pid
 = 
	`©oi
(
¨gv
[1]);

289  
	`sos_¥o˚ss_dñëe
(
pid
);

290 
	}
}

292 
	$bíchm¨k
(
¨gc
, *
¨gv
[])

294 i‡(
¨gc
 =2 && 
	`°rcmp
(
¨gv
[1], "-d") == 0) {

295 
	`¥ötf
("Running benchmark in DEBUG mode\n");

296  
	`sos_bíchm¨k
(1);

297 } i‡(
¨gc
 == 1) {

298 
	`¥ötf
("Running benchmark\n");

299  
	`sos_bíchm¨k
(0);

301 
	`¥ötf
("Unknow¿›ti⁄Åÿ%s\n", 
¨gv
[0]);

304 
	}
}

306 
	scomm™d
 {

307 *
	m«me
;

308 (*
	mcomm™d
)(
	m¨gc
, **
	m¨gv
);

311 
comm™d
 
	gcomm™ds
[] = { { "dú", 
dú
 }, { "ls", dú }, { "ˇt", 
ˇt
 }, {

312 "˝", 
˝


313 }, { "ps", 
ps
 }, { "exec", 
exec
 }, {"¶ìp", 
£c⁄d_¶ìp
}, {"m¶ìp", 
mûli_¶ìp
},

314 {"time", 
£c⁄d_time
}, {"mtime", 
mi¸o_time
}, {"kûl", 
kûl
},

315 {"bíchm¨k", 
bíchm¨k
}

318 
	$maö
()

321 
	`soßpi_öô_sysˇŒ_èbÀ
();

323 
buf
[
BUF_SIZ
];

324 *
¨gv
[
MAX_ARGS
];

325 
i
, 
r
, 
d⁄e
, 
found
, 
√w
, 
¨gc
;

326 *
bp
, *
p
;

328 
ö
 = 
	`›í
("c⁄sﬁe", 
O_RDONLY
);

329 
	`as£π
(
ö
 >= 0);

331 
bp
 = 
buf
;

332 
d⁄e
 = 0;

333 
√w
 = 1;

335 
	`¥ötf
("\n[SOS Starting]\n");

337 !
d⁄e
) {

338 i‡(
√w
) {

339 
	`¥ötf
("$ ");

341 
√w
 = 0;

342 
found
 = 0;

344 !
found
 && !
d⁄e
) {

346 
	`fÊush
(
°dout
);

347 
r
 = 
	`ªad
(
ö
, 
bp
, 
BUF_SIZ
 - 1 + 
buf
 - bp);

348 i‡(
r
 < 0) {

349 
	`¥ötf
("ConsoleÑead failed!\n");

350 
d⁄e
 = 1;

353 
bp
[
r
] = 0;

354 
p
 = 
bp
;Ö < b∞+ 
r
;Ö++) {

355 i‡(*
p
 == '\03') {

356 
	`¥ötf
("^C\n");

357 
p
 = 
buf
;

358 
√w
 = 1;

360 } i‡(*
p
 == '\04') {

361 
p
++;

362 
found
 = 1;

363 } i‡(*
p
 == '\010' || *p == 127) {

365 i‡(
p
 > 
buf
) {

366 
	`¥ötf
("\010 \010");

367 
p
--;

368 
r
--;

370 
p
--;

371 
r
--;

372 } i‡(*
p
 == '\n') {

373 
	`¥ötf
("%c", *
p
);

374 *
p
 = 0;

375 
found
 = 
p
 > 
buf
;

376 
p
 = 
buf
;

377 
√w
 = 1;

380 
	`¥ötf
("%c", *
p
);

383 
bp
 = 
p
;

384 i‡(
bp
 =
buf
) {

389 i‡(!
found
) {

393 
¨gc
 = 0;

394 
p
 = 
buf
;

396 *
p
 != '\0') {

398 *
p
 == ' ') {

399 
p
++;

401 i‡(*
p
 == '\0') {

404 
¨gv
[
¨gc
++] = 
p
;

405 *
p
 != ' ' && *p != '\0') {

406 
p
++;

409 i‡(*
p
 == '\0') {

414 *
p
 = '\0';

415 
p
++;

418 i‡(
¨gc
 == 0) {

422 
found
 = 0;

424 
i
 = 0; i < (
comm™ds
Ë/ (
comm™d
); i++) {

425 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0) {

426 
comm™ds
[
i
].
	`comm™d
(
¨gc
, 
¨gv
);

427 
found
 = 1;

433 i‡(
found
 == 0) {

435 i‡(
	`sos_°©
(
¨gv
[0], &
sbuf
) != 0) {

436 
	`¥ötf
("Comm™d \"%s\"ÇŸ found\n", 
¨gv
[0]);

437 } i‡(!(
sbuf
.
°_fmode
 & 
FM_EXEC
)) {

438 
	`¥ötf
("Fûê\"%s\"ÇŸÉxecuèbÀ\n", 
¨gv
[0]);

441 
¨gc
 = 2;

442 
¨gv
[1] =árgv[0];

443 
¨gv
[0] = "exec";

444 
	`exec
(
¨gc
, 
¨gv
);

448 
	`¥ötf
("[SOS Exiting]\n");

449 
	}
}

	@apps/tty_test/src/tty_test.c

23 
	~<as£π.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°döt.h
>

27 
	~<£l4/£l4.h
>

28 
	~<sysˇŒs.h
>

30 
	~"âyout.h
"

35 
	$thªad_block
()

39 
£L4_MesßgeInfo_t
 
èg
 = 
	`£L4_MesßgeInfo_√w
(0, 0, 0, 1);

41 
	`£L4_SëMR
(0, 1);

44 
	`£L4_CÆl
(
SYSCALL_ENDPOINT_SLOT
, 
èg
);

46 
	}
}

48 
	$maö
()

50 
	`soßpi_öô_sysˇŒ_èbÀ
();

53 
	`âyout_öô
();

56 
	`¥ötf
("task:\tHello world, I'm\ttty_test!\n");

57 
	`thªad_block
();

62 
	}
}

	@apps/tty_test/src/ttyout.c

23 
	~<°d¨g.h
>

24 
	~<as£π.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

28 
	~"âyout.h
"

30 
	~<£l4/£l4.h
>

32 
	$âyout_öô
()

35 
	}
}

37 
size_t
 
	$sos_debug_¥öt
(c⁄° *
vD©a
, 
size_t
 
cou¡
)

39 
size_t
 
i
;

40 c⁄° *
ªÆd©a
 = 
vD©a
;

41 
i
 = 0; i < 
cou¡
; i++) {

42 
	`£L4_DebugPutCh¨
(
ªÆd©a
[
i
]);

44  
cou¡
;

45 
	}
}

47 
size_t
 
	$sos_wrôe
(*
vD©a
, 
size_t
 
cou¡
)

50  
	`sos_debug_¥öt
(
vD©a
, 
cou¡
);

51 
	}
}

53 
size_t
 
	$sos_ªad
(*
vD©a
, 
size_t
 
cou¡
)

57 
	}
}

	@libaos/include/aos/debug.h

12 #¥agm®
⁄˚


14 
	~<autoc⁄f.h
>

16 
	~<öây≥s.h
>

17 
	~<£l4/£l4.h
>

18 
	~<£l4/ty≥s.h
>

19 
	~<aos/ªgi°îs.h
>

21 #ifde‡
CONFIG_DEBUG_BUILD


22 
	#NAME_THREAD
(
_tcbˇp
, 
_«me
Ë
	`£L4_DebugNameThªad
(_tcbˇp, _«me);

	)

24 
	#NAME_THREAD
(
_tcbˇp
, 
_«me
)

	)

27 
debug_ˇp_idítify
(
£L4_CPå
 
ˇp
);

28 
debug_¥öt_boŸöfo
(
£L4_BoŸInfo
 *
öfo
);

29 
debug_¥öt_Áu…
(
£L4_MesßgeInfo_t
 
Áu…
, c⁄° *
thªad_«me
);

30 
debug_dump_ªgi°îs
(
£L4_CPå
 
tcb
);

	@libaos/include/aos/registers.h

12 #¥agm®
⁄˚


14 
	~<£l4/£l4.h
>

15 
	~<°ddef.h
>

16 
	~<utûs/utû.h
>

18 
ölöe
 
boﬁ
 
	$debug_is_ªad_Áu…
()

20 
£L4_W‹d
 
f§
 = 
	`£L4_GëMR
(
£L4_VMFau…_FSR
);

21  (
f§
 & (
	`BIT
(6))) == 0;

22 
	}
}

24 
UNUSED
 c⁄° *
	gªgi°î_«mes
[] = {

62 
compûe_time_as£π
(
pc_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
pc
) == 0);

63 
compûe_time_as£π
(
•_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
•
Ë=1 * (
£L4_W‹d
));

64 
compûe_time_as£π
(
•§_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
•§
Ë=2 * (
£L4_W‹d
));

65 
compûe_time_as£π
(
x0_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x0
Ë=3 * (
£L4_W‹d
));

66 
compûe_time_as£π
(
x1_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x1
Ë=4 * (
£L4_W‹d
));

67 
compûe_time_as£π
(
x2_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x2
Ë=5 * (
£L4_W‹d
));

68 
compûe_time_as£π
(
x3_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x3
Ë=6 * (
£L4_W‹d
));

69 
compûe_time_as£π
(
x4_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x4
Ë=7 * (
£L4_W‹d
));

70 
compûe_time_as£π
(
x5_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x5
Ë=8 * (
£L4_W‹d
));

71 
compûe_time_as£π
(
x6_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x6
Ë=9 * (
£L4_W‹d
));

72 
compûe_time_as£π
(
x7_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x7
Ë=10 * (
£L4_W‹d
));

73 
compûe_time_as£π
(
x8_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x8
Ë=11 * (
£L4_W‹d
));

74 
compûe_time_as£π
(
x16_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x16
Ë=12 * (
£L4_W‹d
));

75 
compûe_time_as£π
(
x17_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x17
Ë=13 * (
£L4_W‹d
));

76 
compûe_time_as£π
(
x18_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x18
Ë=14 * (
£L4_W‹d
));

77 
compûe_time_as£π
(
x29_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x29
Ë=15 * (
£L4_W‹d
));

78 
compûe_time_as£π
(
x30_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x30
Ë=16 * (
£L4_W‹d
));

79 
compûe_time_as£π
(
x9_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x9
Ë=17 * (
£L4_W‹d
));

80 
compûe_time_as£π
(
x10_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x10
Ë=18 * (
£L4_W‹d
));

81 
compûe_time_as£π
(
x11_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x11
Ë=19 * (
£L4_W‹d
));

82 
compûe_time_as£π
(
x12_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x12
Ë=20 * (
£L4_W‹d
));

83 
compûe_time_as£π
(
x13_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x13
Ë=21 * (
£L4_W‹d
));

84 
compûe_time_as£π
(
x14_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x14
Ë=22 * (
£L4_W‹d
));

85 
compûe_time_as£π
(
x15_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x15
Ë=23 * (
£L4_W‹d
));

86 
compûe_time_as£π
(
x19_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x19
Ë=24 * (
£L4_W‹d
));

87 
compûe_time_as£π
(
x20_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x20
Ë=25 * (
£L4_W‹d
));

88 
compûe_time_as£π
(
x21_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x21
Ë=26 * (
£L4_W‹d
));

89 
compûe_time_as£π
(
x22_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x22
Ë=27 * (
£L4_W‹d
));

90 
compûe_time_as£π
(
x23_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x23
Ë=28 * (
£L4_W‹d
));

91 
compûe_time_as£π
(
x24_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x24
Ë=29 * (
£L4_W‹d
));

92 
compûe_time_as£π
(
x25_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x25
Ë=30 * (
£L4_W‹d
));

93 
compûe_time_as£π
(
x26_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x26
Ë=31 * (
£L4_W‹d
));

94 
compûe_time_as£π
(
x27_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x27
Ë=32 * (
£L4_W‹d
));

95 
compûe_time_as£π
(
x28_c‹ª˘_posôi⁄
, 
off£tof
(
£L4_U£rC⁄ãxt
, 
x28
Ë=33 * (
£L4_W‹d
));

	@libaos/include/aos/sel4_zf_logif.h

12 #¥agm®
⁄˚


14 
	~<utûs/zf_log.h
>

15 
	~<utûs/zf_log_if.h
>

16 
	~<aos/°ªº‹.h
>

28 
	#ZF_LOGD_IFERR
(
îr
, 
fmt
, ...) \

29 i‡((
îr
Ë!
£L4_NoEº‹
) \

30 { 
	`ZF_LOGD
("[Eº %s]:\n\t" 
fmt
, 
	`£l4_°ªº‹
(
îr
), ## 
__VA_ARGS__
); }

	)

32 
	#ZF_LOGI_IFERR
(
îr
, 
fmt
, ...) \

33 i‡((
îr
Ë!
£L4_NoEº‹
) \

34 { 
	`ZF_LOGI
("[Eº %s]:\n\t" 
fmt
, 
	`£l4_°ªº‹
(
îr
), ## 
__VA_ARGS__
); }

	)

36 
	#ZF_LOGW_IFERR
(
îr
, 
fmt
, ...) \

37 i‡((
îr
Ë!
£L4_NoEº‹
) \

38 { 
	`ZF_LOGW
("[Eº %s]:\n\t" 
fmt
, 
	`£l4_°ªº‹
(
îr
), ## 
__VA_ARGS__
); }

	)

40 
	#ZF_LOGE_IFERR
(
îr
, 
fmt
, ...) \

41 i‡((
îr
Ë!
£L4_NoEº‹
) \

42 { 
	`ZF_LOGE
("[Eº %s]:\n\t" 
fmt
, 
	`£l4_°ªº‹
(
îr
), ## 
__VA_ARGS__
); }

	)

44 
	#ZF_LOGF_IFERR
(
îr
, 
fmt
, ...) \

45 i‡((
îr
Ë!
£L4_NoEº‹
) \

46 { 
	`ZF_LOGF
("[Eº %s]:\n\t" 
fmt
, 
	`£l4_°ªº‹
(
îr
), ## 
__VA_ARGS__
); }

	)

	@libaos/include/aos/strerror.h

12 #¥agm®
⁄˚


14 
	#£l4_îr‹
(
e
, 
°r
Ë(” =
£L4_NoEº‹
Ë? ()0 : 
	`__£l4_îr‹
”, 
__FILE__
, 
__func__
, 
__LINE__
, så))

	)

16 
__£l4_îr‹
(, const *, const *, , *);

18 c⁄° *
£l4_°ªº‹
(
îrcode
);

19 *
£l4_îæi°
[];

	@libaos/include/aos/vsyscall.h

12 #¥agm®
⁄˚


14 
	~<autoc⁄f.h
>

15 
	~<°d¨g.h
>

16 
	~<°dboﬁ.h
>

17 
	~<bôs/sysˇŒ.h
>

18 
	~<utûs/©åibuã.h
>

20 
	#MUSLC_HIGHEST_SYSCALL
 
SYS_pkey_‰ì


	)

21 
	#MUSLC_NUM_SYSCALLS
 (
MUSLC_HIGHEST_SYSCALL
 + 1)

	)

23 (*
	tmu¶csys_sysˇŒ_t
)(
	tva_li°
);

27 
mu¶csys_sysˇŒ_t
 
	`mu¶csys_ö°Æl_sysˇŒ
(
sysˇŒ
, mu¶csys_sysˇŒ_à
√w_sysˇŒ
);

36 
boﬁ
 
	$mu¶csys_gë_boŸ_£t_tid_addªss
(**
¨g
Ë
	`NONNULL
(1);

	@libaos/src/debug.c

12 
	~<autoc⁄f.h
>

13 
	~<aos/debug.h
>

14 
	~<£l4/£l4.h
>

15 
	~<°dio.h
>

17 
	$debug_ˇp_idítify
(
£L4_CPå
 
ˇp
)

19 #ifde‡
CONFIG_DEBUG_BUILD


20 
ty≥
 = 
	`£L4_DebugC≠Idítify
(
ˇp
);

21 
	`¥ötf
("C≠Åy≥Çumbî i†%d\n", 
ty≥
);

23 
	}
}

25 
	$debug_¥öt_boŸöfo
(
£L4_BoŸInfo
 *
öfo
)

27 
	`ZF_LOGD
("Nodê%lu o‡%lu", ()
öfo
->
nodeID
, ()öfo->
numNodes
);

28 
	`ZF_LOGD
("IOPTÜevñs: %u", ()
öfo
->
numIOPTLevñs
);

29 
	`ZF_LOGD
("IPC buf„r: %p", 
öfo
->
ùcBuf„r
);

30 
	`ZF_LOGD
("Em±y slŸs: [%lu --> %lu)", ()
öfo
->
em±y
.
°¨t
, ()öfo->em±y.
íd
);

31 
	`ZF_LOGD
("sh¨edFømes: [%lu --> %lu)", ()
öfo
->
sh¨edFømes
.
°¨t
, ()öfo->sh¨edFømes.
íd
);

32 
	`ZF_LOGD
("u£rImageFømes: [%lu --> %lu)", ()
öfo
->
u£rImageFømes
.
°¨t
, ()öfo->u£rImageFømes.
íd
);

33 
	`ZF_LOGD
("u£rImagePagög: [%lu --> %lu)", ()
öfo
->
u£rImagePagög
.
°¨t
, ()öfo->u£rImagePagög.
íd
);

34 
	`ZF_LOGD
("u¡y≥ds: [%lu --> %lu)", ()
öfo
->
u¡y≥d
.
°¨t
, ()öfo->u¡y≥d.
íd
);

35 
	`ZF_LOGD
("Inôü»thªad domaö: %u\n", ()
öfo
->
öôThªadDomaö
);

36 
	`ZF_LOGD
("Inôü»thªad cnodêsize: %u", 
öfo
->
öôThªadCNodeSizeBôs
);

37 
	`ZF_LOGD
("List of untypeds");

38 
	`ZF_LOGD
("------------------");

39 
	`ZF_LOGD
("Paddr | Size | Device");

41 
sizes
[
CONFIG_WORD_SIZE
] = {0};

42 
i
 = 0; i < 
CONFIG_MAX_NUM_BOOTINFO_UNTYPED_CAPS
 && i < (
öfo
->
u¡y≥d
.
íd
 - info->u¡y≥d.
°¨t
); i++) {

43 
ödex
 = 
öfo
->
u¡y≥dLi°
[
i
].
sizeBôs
;

44 
	`as£π
(
ödex
 < 
	`ARRAY_SIZE
(
sizes
));

45 
sizes
[
ödex
]++;

46 
	`ZF_LOGD
("%∞| %zu | %d", (*)
öfo
->
u¡y≥dLi°
[
i
].
∑ddr
, (
size_t
)öfo->u¡y≥dLi°[i].
sizeBôs
, ()öfo->u¡y≥dLi°[i].
isDevi˚
);

49 
	`ZF_LOGD
("Untyped summary\n");

50 
i
 = 0; i < 
	`ARRAY_SIZE
(
sizes
); i++) {

51 i‡(
sizes
[
i
] != 0) {

52 
	`ZF_LOGD
("%d u¡y≥d†o‡sizê%d\n", 
sizes
[
i
], i);

55 
	}
}

57 
	$debug_¥öt_Áu…
(
£L4_MesßgeInfo_t
 
èg
, c⁄° *
thªad_«me
)

59 
£L4_Fau…_t
 
Áu…
 = 
	`£L4_gëFau…
(
èg
);

60 
	`£L4_Fau…_gë_£L4_Fau…Ty≥
(
Áu…
)) {

61 
£L4_Fau…_VMFau…
:

62 
	`as£π
(
	`£L4_MesßgeInfo_gë_Àngth
(
èg
Ë=
£L4_VMFau…_Lígth
);

63 
	`¥ötf
("%sPagefault from [%s]: %s %sát PC: %p vaddr: %p, FSR %p%s\n",

64 
COLOR_ERROR
,

65 
thªad_«me
,

66 
	`debug_is_ªad_Áu…
() ? "read" : "write",

67 
	`£L4_Fau…_VMFau…_gë_Pª„tchFau…
(
Áu…
) ? "prefetch fault" : "fault",

68 (*)
	`£L4_Fau…_VMFau…_gë_IP
(
Áu…
),

69 (*)
	`£L4_Fau…_VMFau…_gë_Addr
(
Áu…
),

70 (*)
	`£L4_Fau…_VMFau…_gë_FSR
(
Áu…
),

71 
COLOR_NORMAL
);

74 
£L4_Fau…_UnknownSysˇŒ
:

75 
	`as£π
(
	`£L4_MesßgeInfo_gë_Àngth
(
èg
Ë=
£L4_UnknownSysˇŒ_Lígth
);

76 
	`¥ötf
("%sBad sysˇŒ from [%s]: s˙ÿ%"
PRIuPTR
"át PC: %p%s\n",

77 
COLOR_ERROR
,

78 
thªad_«me
,

79 
	`£L4_Fau…_UnknownSysˇŒ_gë_SysˇŒ
(
Áu…
),

80 (*Ë
	`£L4_Fau…_UnknownSysˇŒ_gë_Fau…IP
(
Áu…
),

81 
COLOR_NORMAL


86 
£L4_Fau…_U£rEx˚±i⁄
:

87 
	`as£π
(
	`£L4_MesßgeInfo_gë_Àngth
(
èg
Ë=
£L4_U£rEx˚±i⁄_Lígth
);

88 
	`¥ötf
("%sInvalid instruction from [%s]át PC: %p%s\n",

89 
COLOR_ERROR
,

90 
thªad_«me
,

91 (*)
	`£L4_Fau…_U£rEx˚±i⁄_gë_Fau…IP
(
Áu…
),

92 
COLOR_NORMAL
);

95 
£L4_Fau…_C≠Fau…
:

96 
	`¥ötf
("%sCap fault from [%s] inÖhase %s\nPC = %p\nCPtr = %p%s\n",

97 
COLOR_ERROR
, 
thªad_«me
,

98 
	`£L4_Fau…_C≠Fau…_gë_InRecvPha£
(
Áu…
) ? "receive" : "send",

99 (*Ë
	`£L4_Fau…_C≠Fau…_gë_IP
(
Áu…
),

100 (*Ë
	`£L4_Fau…_C≠Fau…_gë_Addr
(
Áu…
),

101 
COLOR_NORMAL
);

105 
	`¥ötf
("Unknow¿Áu… from [%s]: %"
PRIuPTR
" (Àngth = %"PRIuPTR")\n", 
thªad_«me
,

106 
	`£L4_MesßgeInfo_gë_œbñ
(
èg
), 
	`£L4_MesßgeInfo_gë_Àngth
(tag));

109 
	}
}

111 
	$debug_dump_ªgi°îs
(
£L4_CPå
 
tcb
)

113 
£L4_U£rC⁄ãxt
 
c⁄ãxt
;

114 
îr‹
;

115 c⁄° 
num_ªgs
 = (
c⁄ãxt
Ë/ (
£L4_W‹d
);

117 
îr‹
 = 
	`£L4_TCB_RódRegi°îs
(
tcb
, 
Ál£
, 0, 
num_ªgs
, &
c⁄ãxt
);

118 i‡(
îr‹
) {

119 
	`ZF_LOGE
("FaûedÅÿªadÑegi°î†f‹Åcb 0x%lx,Éº‹ %d", (Ë
tcb
, 
îr‹
);

123 
	`¥ötf
("Register dump:\n");

124 
i
 = 0; i < 
num_ªgs
; i++) {

125 
	`¥ötf
("%s\t:0x%lx\n", 
ªgi°î_«mes
[
i
], (Ë((
£L4_W‹d
 * )&
c⁄ãxt
)[i]);

127 
	}
}

	@libaos/src/strerror.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<as£π.h
>

15 
	~<£l4/£l4.h
>

16 
	~<aos/°ªº‹.h
>

18 *
	g£l4_îæi°
[] = {

19 [
£L4_NoEº‹
] = "seL4_NoError",

20 [
£L4_InvÆidArgumít
] = "seL4_InvalidArgument",

21 [
£L4_InvÆidC≠abûôy
] = "seL4_InvalidCapability",

22 [
£L4_IŒegÆO≥øti⁄
] = "seL4_IllegalOperation",

23 [
£L4_R™geEº‹
] = "seL4_RangeError",

24 [
£L4_AlignmítEº‹
] = "seL4_AlignmentError",

25 [
£L4_FaûedLookup
] = "seL4_FailedLookup",

26 [
£L4_TrunˇãdMesßge
] = "seL4_TruncatedMessage",

27 [
£L4_DñëeFú°
] = "seL4_DeleteFirst",

28 [
£L4_RevokeFú°
] = "seL4_RevokeFirst",

29 [
£L4_NŸEnoughMem‹y
] = "seL4_NotEnoughMemory",

30 
	gNULL


33 c⁄° *
	$£l4_°ªº‹
(
îrcode
)

35 
	`as£π
(
îrcode
 < (
£l4_îæi°
) / (*sel4_errlist) - 1);

36  
£l4_îæi°
[
îrcode
];

37 
	}
}

39 
	$__£l4_îr‹
(
£l4_îr‹
, c⁄° *
fûe
,

40 c⁄° *
fun˘i⁄
, 
löe
, * 
°r
)

42 
	`¥ötf
("seL4 Error: %s, function %s, file %s,Üine %d: %s\n",

43 
£l4_îæi°
[
£l4_îr‹
],

44 
fun˘i⁄
, 
fûe
, 
löe
, 
°r
);

45 
	`ab‹t
();

46 
	}
}

	@libaos/src/vsyscall.c

12 
	~<°dio.h
>

13 
	~<utûs/utû.h
>

14 
	~<aos/vsysˇŒ.h
>

15 
	~<sys/uio.h
>

16 
	~<£l4/£l4.h
>

17 
	~<î∫o.h
>

22 
boﬁ
 
	gboŸ_£t_tid_addªss_h≠≥√d
;

23 *
	gboŸ_£t_tid_addªss_¨g
;

25 
	$boŸ_£t_tid_addªss
(
va_li°
 
≠
)

27 *
tid
 = 
	`va_¨g
(
≠
, *);

28 i‡(
boŸ_£t_tid_addªss_h≠≥√d
) {

29 
	`ZF_LOGE
("Boot version of set_tid_address somehow got calledÅwice");

32 
boŸ_£t_tid_addªss_h≠≥√d
 = 
åue
;

33 
boŸ_£t_tid_addªss_¨g
 = 
tid
;

35 
	}
}

37 
boﬁ
 
	$mu¶csys_gë_boŸ_£t_tid_addªss
(**
¨g
)

39 *
¨g
 = 
boŸ_£t_tid_addªss_¨g
;

40  
boŸ_£t_tid_addªss_h≠≥√d
;

41 
	}
}

45 
	$boŸ_sys_wrôev
(
va_li°
 
≠
)

47 
UNUSED
 
fûdes
 = 
	`va_¨g
(
≠
, );

48 
iovec
 *
iov
 = 
	`va_¨g
(
≠
, iovec *);

49 
iov˙t
 = 
	`va_¨g
(
≠
, );

51 
ssize_t
 
ªt
 = 0;

53 
i
 = 0; i < 
iov˙t
; i++) {

54 * 
UNUSED
 
ba£
 = (*)
iov
[
i
].
iov_ba£
;

55 
j
 = 0; j < 
iov
[
i
].
iov_Àn
; j++) {

56 #ifde‡
CONFIG_PRINTING


57 
	`£L4_DebugPutCh¨
(
ba£
[
j
]);

59 
ªt
++;

63  
ªt
;

64 
	}
}

66 
mu¶csys_sysˇŒ_t
 
	gsysˇŒ_èbÀ
[
MUSLC_NUM_SYSCALLS
] = {

67 [
__NR_£t_tid_addªss
] = 
boŸ_£t_tid_addªss
,

68 [
__NR_wrôev
] = 
boŸ_sys_wrôev
,

71 
mu¶csys_sysˇŒ_t
 
	$mu¶csys_ö°Æl_sysˇŒ
(
sysˇŒ
, 
mu¶csys_sysˇŒ_t
 
√w_sysˇŒ
)

73 
mu¶csys_sysˇŒ_t
 
ªt
;

74 i‡(
sysˇŒ
 >
	`ARRAY_SIZE
(
sysˇŒ_èbÀ
)) {

75 
	`ZF_LOGF
("SysˇŒ %dÉx˚ed†sysˇŒÅabÀ sizêo‡%zu", 
sysˇŒ
, 
	`ARRAY_SIZE
(
sysˇŒ_èbÀ
));

77 
ªt
 = 
sysˇŒ_èbÀ
[
sysˇŒ
];

78 
sysˇŒ_èbÀ
[
sysˇŒ
] = 
√w_sysˇŒ
;

80  
ªt
;

81 
	}
}

83 
	$debug_îr‹
(
sy¢um
)

85 
buf
[100];

86 
i
;

87 
	`•rötf
(
buf
, "aos: Eº‹áâem±ög sysˇŒ %d\n", 
sy¢um
);

88 
i
 = 0; 
buf
[i]; i++) {

89 #ifde‡
CONFIG_PRINTING


90 
	`£L4_DebugPutCh¨
(
buf
[
i
]);

93 
	}
}

95 
	$£l4_vsysˇŒ
(
sy¢um
, ...)

97 
va_li°
 
Æ
;

98 
	`va_°¨t
(
Æ
, 
sy¢um
);

99 
mu¶csys_sysˇŒ_t
 
sysˇŒ
;

100 i‡(
sy¢um
 < 0 || sy¢um >
	`ARRAY_SIZE
(
sysˇŒ_èbÀ
)) {

101 
	`debug_îr‹
(
sy¢um
);

102  -
ENOSYS
;

104 
sysˇŒ
 = 
sysˇŒ_èbÀ
[
sy¢um
];

107 i‡(!
sysˇŒ
) {

108 
	`debug_îr‹
(
sy¢um
);

109  -
ENOSYS
;

112 
ªt
 = 
	`sysˇŒ
(
Æ
);

113 
	`va_íd
(
Æ
);

114  
ªt
;

115 
	}
}

119 
uöçå_t
 
VISIBLE
 
SECTION
("__vsysˇŒ"Ë
	g__vsysˇŒ_±r
 = (uöçå_tË
£l4_vsysˇŒ
;

	@libclock/include/clock/clock.h

12 #¥agm®
⁄˚


14 
	~<°döt.h
>

15 
	~<£l4/£l4.h
>

16 
	~<˛ock/devi˚.h
>

17 
	~<˛ock/time°amp.h
>

22 
	#CLOCK_R_OK
 0

	)

23 
	#CLOCK_R_UINT
 (-1Ë

	)

24 
	#CLOCK_R_CNCL
 (-2Ë

	)

25 
	#CLOCK_R_FAIL
 (-3Ë

	)

27 
uöt64_t
 
	ttime°amp_t
;

28 (*
	ttimî_ˇŒback_t
)(
	tuöt32_t
 
	tid
, *
	td©a
);

38 
	`°¨t_timî
(
£L4_CPå
 
¡‚
, seL4_CPå 
úqh™dÀr
, *
devi˚_vaddr
);

48 
uöt32_t
 
	`ªgi°î_timî
(
uöt64_t
 
dñay
, 
timî_ˇŒback_t
 
ˇŒback
, *
d©a
);

55 
	`ªmove_timî
(
uöt32_t
 
id
);

62 
	`timî_öãºu±
();

69 
	`°›_timî
();

	@libclock/include/clock/device.h

12 #¥agm®
⁄˚


14 
	~<utûs/utû.h
>

19 
	#TIMER_MUX
 0xc1109990

	)

21 
	#TIMER_PADDR
 
	`PAGE_ALIGN_4K
(
TIMER_MUX
)

	)

24 
	#TIMER_F_PADDR
 0xc1109994

	)

25 
	#TIMER_G_PADDR
 0xc1109998

	)

26 
	#TIMER_H_PADDR
 0xc110999c

	)

27 
	#TIMER_I_PADDR
 0xc11099a0

	)

32 
	#TIMER_I_EN
 
	`BIT
(19)

	)

33 
	#TIMER_H_EN
 
	`BIT
(18)

	)

34 
	#TIMER_G_EN
 
	`BIT
(17)

	)

35 
	#TIMER_F_EN
 
	`BIT
(16)

	)

38 
	#TIMER_I_MODE
 
	`BIT
(15)

	)

39 
	#TIMER_H_MODE
 
	`BIT
(14)

	)

40 
	#TIMER_G_MODE
 
	`BIT
(13)

	)

41 
	#TIMER_F_MODE
 
	`BIT
(12)

	)

44 
	#TIMER_I_INPUT_CLK
 6

	)

45 
	#TIMER_H_INPUT_CLK
 4

	)

46 
	#TIMER_G_INPUT_CLK
 2

	)

47 
	#TIMER_F_INPUT_CLK
 0

	)

50 
	#TIMEBASE_1_US
 0b00

51 
	#TIMEBASE_10_US
 0b01

52 
	#TIMEBASE_100_US
 0b10

53 
	#TIMEBASE_1000_US
 0b11

54 

	)

56 
	#TIMER_MAX
 0xFFFF

	)

63 
	#TIMER_VAL
(
x
Ë((xË>> 16u)

	)

67 
	#TIMER_I_IRQ
 95

	)

68 
	#TIMER_H_IRQ
 94

	)

69 
	#TIMER_G_IRQ
 93

	)

70 
	#TIMER_F_IRQ
 92

	)

	@libclock/include/clock/timestamp.h

12 #¥agm®
⁄˚


14 
	~<as£π.h
>

15 
	~<°döt.h
>

16 
	~<utûs/time.h
>

17 
	~<utûs/buûtö.h
>

23 
ölöe
 
uöt64_t
 
	$time°amp_gë_‰eq
()

26 
uöt64_t
 
‰eq
;

27 
asm
 vﬁ©ûe("mr†%0, c¡‰q_ñ0" : "Ù" (
‰eq
));

28  
‰eq
;

29 
	}
}

32 
ölöe
 
uöt64_t
 
	$time°amp_ticks
()

34 
uöt64_t
 
time
 = 0;

36 
asm
 vﬁ©ûe("mr†%0, c¡v˘_ñ0" : "Ù" (
time
));

37  
time
;

38 
	}
}

40 
ölöe
 
uöt64_t
 
	$time°amp_ms
(
uöt64_t
 
‰eq
)

42 
	`as£π
(
‰eq
 != 0);

43  
	`time°amp_ticks
(Ë/ (
‰eq
 / 
MS_IN_S
);

44 
	}
}

46 
ölöe
 
uöt64_t
 
	$time°amp_us
(
uöt64_t
 
‰eq
)

48 
	`as£π
(
‰eq
 != 0);

49  (
US_IN_S
 * 
	`time°amp_ticks
()Ë/ 
‰eq
;

50 
	}
}

52 
ölöe
 
	$udñay
(
uöt64_t
 
us
, uöt64_à
‰eq
)

54 
uöt64_t
 
°¨t
 = 
	`time°amp_us
(
‰eq
);

55 
	`time°amp_us
(
‰eq
Ë- 
°¨t
 < 
us
);

56 
	}
}

	@libclock/src/clock.c

12 
	~<˛ock/˛ock.h
>

15 
	$°¨t_timî
(
£L4_CPå
 
¡‚
, seL4_CPå 
úqh™dÀr
, *
devi˚_vaddr
)

17  
CLOCK_R_FAIL
;

18 
	}
}

20 
uöt32_t
 
	$ªgi°î_timî
(
uöt64_t
 
dñay
, 
timî_ˇŒback_t
 
ˇŒback
, *
d©a
)

23 
	}
}

25 
	$ªmove_timî
(
uöt32_t
 
id
)

27  
CLOCK_R_FAIL
;

28 
	}
}

30 
	$timî_öãºu±
()

32  
CLOCK_R_FAIL
;

33 
	}
}

35 
	$°›_timî
()

37  
CLOCK_R_FAIL
;

38 
	}
}

	@libethernet/include/ethernet/ethernet.h

12 #¥agm®
⁄˚


14 
	~<°döt.h
>

26 
	#ODROIDC2_ETH_PHYS_ADDR
 0xc9410000

	)

27 
	#ODROIDC2_ETH_PHYS_SIZE
 0x10000

	)

29 
	#MAXIMUM_TRANSFER_UNIT
 1500

	)

32 
	mETHIF_NOERROR
 = 0,

33 
	mETHIF_ERROR
 = -1

34 } 
	tëhif_îr_t
;

37 
uöçå_t
 
	mvaddr
;

38 
uöçå_t
 
	m∑ddr
;

39 
size_t
 
	msize
;

40 } 
	tëhif_dma_addr_t
;

46 
ëhif_dma_addr_t
 (*
dma_mÆloc
Ë(
uöt32_t
 
	msize
, uöt32_à
	mÆign
);

47 
uöçå_t
 (*
dma_phys_to_vút
Ë(uöçå_à
	mphys
);

48 
uöt32_t
 (*
Êush_dˇche_ønge
Ë(
uöçå_t
 
	maddr
, 
size_t
 
	msize
);

49 
uöt32_t
 (*
övÆid©e_dˇche_ønge
Ë(
uöçå_t
 
	maddr
, 
size_t
 
	msize
);

50 } 
	tëhif_dma_›s_t
;

61 (*
	tëhif_ªcv_ˇŒback_t
)(
	tuöt8_t
 *
	tö_∑ckë
, 
	tÀn
);

72 
ëhif_îr_t
 
	`ëhif_öô
(
uöt64_t
 
ba£_addr
, c⁄° 
uöt8_t
 
mac
[6], 
ëhif_dma_›s_t
 *
›s
,

73 
ëhif_ªcv_ˇŒback_t
 
ªcv_ˇŒback
);

85 
ëhif_îr_t
 
	`ëhif_£nd
(
uöt8_t
 *
buf
, 
uöt32_t
 
Àn
);

98 
ëhif_îr_t
 
	`ëhif_ªcv
(*
Àn
);

100 
	`ëhif_úq
();

	@libethernet/src/ethernet.c

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

15 
	~"uboŸ/comm⁄.h
"

16 
	~"uboŸ/√t.h
"

17 
	~"uboŸ/miùhy.h
"

18 
	~"io.h
"

19 
	~"uboŸ/√tdev.h
"

20 
	~"unim∂emíãd.h
"

22 
	~<ëhî√t/ëhî√t.h
>

23 
	~<utûs/zf_log.h
>

25 
ëh_devi˚
 
	guboŸ_ëh_dev
;

27 
ëhif_dma_›s_t
 
	gdma_›s
 = {
NULL
};

28 
ëhif_ªcv_ˇŒback_t
 
	gëhif_ªcv_ˇŒback
 = 
NULL
;

30 
ëhif_îr_t
 
	$ëhif_£nd
(
uöt8_t
 *
buf
, 
uöt32_t
 
Àn
)

32 
	`as£π
(
buf
);

33  (
uboŸ_ëh_dev
.
	`£nd
(&uboŸ_ëh_dev, 
buf
, 
Àn
Ë=0Ë? 
ETHIF_NOERROR
 : 
ETHIF_ERROR
;

34 
	}
}

36 
ëhif_îr_t
 
	$ëhif_ªcv
(*
Àn
)

38 
	`as£π
(
Àn
);

39 
ªsu…
 = 
uboŸ_ëh_dev
.
	`ªcv
(&uboot_eth_dev);

40 if(
ªsu…
 >= 0) {

41 *
Àn
 = 
ªsu…
;

42  
ETHIF_NOERROR
;

44  
ETHIF_ERROR
;

45 
	}
}

47 
	$uboŸ_¥o˚ss_ª˚ived_∑ckë
(
uöt8_t
 *
ö_∑ckë
, 
Àn
)

49 
	`ëhif_ªcv_ˇŒback
(
ö_∑ckë
, 
Àn
);

50 
	}
}

52 
ëhif_dma_›s_t
 *
	$uboŸ_gë_dma_›s
()

54  &
dma_›s
;

55 
	}
}

57 
designw¨e_ack
(
ëh_devi˚
 *
dev
);

58 
	$ëhif_úq
()

60 
	`designw¨e_ack
(&
uboŸ_ëh_dev
);

61 
	}
}

63 
ëhif_îr_t
 
	$ëhif_öô
(
uöt64_t
 
ba£_addr
, c⁄° 
uöt8_t
 
mac
[6], 
ëhif_dma_›s_t
 *
›s
,

64 
ëhif_ªcv_ˇŒback_t
 
ªcv_ˇŒback
)

66 
	`as£π
(
›s
);

67 
	`as£π
(
ªcv_ˇŒback
);

69 
	`ZF_LOGI
("InitialisingÉthernet interface...");

72 
	`mem˝y
(&
dma_›s
, 
›s
, (
ëhif_dma_›s_t
));

74 
ëhif_ªcv_ˇŒback
 = 
ªcv_ˇŒback
;

76 
	`uboŸ_timî_öô
();

79 
	`miùhy_öô
();

82 
	`phy_öô
();

85 
ªt
 = 
	`designw¨e_öôülize
(
ba£_addr
, 0, &
uboŸ_ëh_dev
);

87 i‡(
ªt
 != 0) {

88 
	`ZF_LOGE
("Failed: designware_initialize.");

89  
ETHIF_ERROR
;

94 
	`mem˝y
(
uboŸ_ëh_dev
.
íëaddr
, 
mac
, 6);

97 
ªt
 = 
uboŸ_ëh_dev
.
	`öô
(&uboot_eth_dev);

99 i‡(
ªt
 != 0) {

100 
	`ZF_LOGE
("Failed: uboot_eth_dev.init().");

101  
ETHIF_ERROR
;

104 
	`ZF_LOGI
("interface UP");

106  
ETHIF_NOERROR
;

107 
	}
}

	@libethernet/src/io.h

12 #¥agm®
⁄˚


14 
	#__¨ch_gël
(
addr
Ë*((vﬁ©ûê
uöt32_t
*)◊ddr))

	)

15 
	#__¨ch_gëw
(
addr
Ë*((vﬁ©ûê
uöt16_t
*)◊ddr))

	)

16 
	#__¨ch_gëb
(
addr
Ë*((vﬁ©ûê
uöt8_t
*)◊ddr))

	)

18 
	#__¨ch_pué
(
vÆ
, 
addr
Ë*((vﬁ©ûê
uöt32_t
*)◊ddr)Ë
	)
val

19 
	#__¨ch_putw
(
vÆ
, 
addr
Ë*((vﬁ©ûê
uöt16_t
*)◊ddr)Ë
	)
val

20 
	#__¨ch_putb
(
vÆ
, 
addr
Ë*((vﬁ©ûê
uöt8_t
*)◊ddr)Ë
	)
val

29 
	#__øw_wrôeb
(
v
,
a
Ë
	`__¨ch_putb
(v,a)

	)

30 
	#__øw_wrôew
(
v
,
a
Ë
	`__¨ch_putw
(v,a)

	)

31 
	#__øw_wrôñ
(
v
,
a
Ë
	`__¨ch_pué
(v,a)

	)

33 
	#__øw_ªadb
(
a
Ë
	`__¨ch_gëb
◊)

	)

34 
	#__øw_ªadw
(
a
Ë
	`__¨ch_gëw
◊)

	)

35 
	#__øw_ªadl
(
a
Ë
	`__¨ch_gël
◊)

	)

41 
	#dmb
(Ë
asm
 vﬁ©ûe("dmb sy" ::: "mem‹y")

	)

42 
	#dsb
(Ë
asm
 vﬁ©ûe("dsb sy" ::: "mem‹y")

	)

43 
	#isb
(Ë
asm
 vﬁ©ûe("isb sy" ::: "mem‹y")

	)

44 
	#__i‹mb
(Ë
	`dmb
()

	)

45 
	#__iowmb
(Ë
	`dmb
()

	)

47 
	#wrôeb
(
v
,
c
Ë({ 
uöt8_t
 
__v
 = v; 
	`__iowmb
(); 
	`__¨ch_putb
(__v,c); __v; })

	)

48 
	#wrôew
(
v
,
c
Ë({ 
uöt16_t
 
__v
 = v; 
	`__iowmb
(); 
	`__¨ch_putw
(__v,c); __v; })

	)

49 
	#wrôñ
(
v
,
c
Ë({ 
uöt32_t
 
__v
 = v; 
	`__iowmb
(); 
	`__¨ch_pué
(__v,c); __v; })

	)

51 
	#ªadb
(
c
Ë({ 
uöt8_t
 
__v
 = 
	`__¨ch_gëb
(c); 
	`__i‹mb
(); __v; })

	)

52 
	#ªadw
(
c
Ë({ 
uöt16_t
 
__v
 = 
	`__¨ch_gëw
(c); 
	`__i‹mb
(); __v; })

	)

53 
	#ªadl
(
c
Ë({ 
uöt32_t
 
__v
 = 
	`__¨ch_gël
(c); 
	`__i‹mb
(); __v; })

	)

57 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

58 
	#__À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

59 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

60 
	#__À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

61 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

62 
	#__À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

63 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`__swab64
((x)))

	)

64 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

65 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`__swab32
((x)))

	)

66 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

67 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`__swab16
((x)))

	)

68 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

70 
	#˝u_to_À64
 
__˝u_to_À64


	)

71 
	#À64_to_˝u
 
__À64_to_˝u


	)

72 
	#˝u_to_À32
 
__˝u_to_À32


	)

73 
	#À32_to_˝u
 
__À32_to_˝u


	)

74 
	#˝u_to_À16
 
__˝u_to_À16


	)

75 
	#À16_to_˝u
 
__À16_to_˝u


	)

76 
	#˝u_to_be64
 
__˝u_to_be64


	)

77 
	#be64_to_˝u
 
__be64_to_˝u


	)

78 
	#˝u_to_be32
 
__˝u_to_be32


	)

79 
	#be32_to_˝u
 
__be32_to_˝u


	)

80 
	#˝u_to_be16
 
__˝u_to_be16


	)

81 
	#be16_to_˝u
 
__be16_to_˝u


	)

82 
	#˝u_to_À64p
 
__˝u_to_À64p


	)

83 
	#À64_to_˝up
 
__À64_to_˝up


	)

84 
	#˝u_to_À32p
 
__˝u_to_À32p


	)

85 
	#À32_to_˝up
 
__À32_to_˝up


	)

86 
	#˝u_to_À16p
 
__˝u_to_À16p


	)

87 
	#À16_to_˝up
 
__À16_to_˝up


	)

88 
	#˝u_to_be64p
 
__˝u_to_be64p


	)

89 
	#be64_to_˝up
 
__be64_to_˝up


	)

90 
	#˝u_to_be32p
 
__˝u_to_be32p


	)

91 
	#be32_to_˝up
 
__be32_to_˝up


	)

92 
	#˝u_to_be16p
 
__˝u_to_be16p


	)

93 
	#be16_to_˝up
 
__be16_to_˝up


	)

94 
	#˝u_to_À64s
 
__˝u_to_À64s


	)

95 
	#À64_to_˝us
 
__À64_to_˝us


	)

96 
	#˝u_to_À32s
 
__˝u_to_À32s


	)

97 
	#À32_to_˝us
 
__À32_to_˝us


	)

98 
	#˝u_to_À16s
 
__˝u_to_À16s


	)

99 
	#À16_to_˝us
 
__À16_to_˝us


	)

100 
	#˝u_to_be64s
 
__˝u_to_be64s


	)

101 
	#be64_to_˝us
 
__be64_to_˝us


	)

102 
	#˝u_to_be32s
 
__˝u_to_be32s


	)

103 
	#be32_to_˝us
 
__be32_to_˝us


	)

104 
	#˝u_to_be16s
 
__˝u_to_be16s


	)

105 
	#be16_to_˝us
 
__be16_to_˝us


	)

107 
	#out_¨ch
(
ty≥
, 
ídün
, 
a
, 
v
Ë
__øw_wrôe
##
	`ty≥
(
˝u_to_
##
	`ídün
(v),á)

	)

108 
	#ö_¨ch
(
ty≥
, 
ídün
, 
a
Ëídün##
	`_to_˝u
(
__øw_ªad
##
	`ty≥
◊))

	)

110 
	#out_À32
(
a
, 
v
Ë
	`out_¨ch
(
l
, 
À32
,á, v)

	)

111 
	#out_À16
(
a
, 
v
Ë
	`out_¨ch
(
w
, 
À16
,á, v)

	)

113 
	#ö_À32
(
a
Ë
	`ö_¨ch
(
l
, 
À32
,á)

	)

114 
	#ö_À16
(
a
Ë
	`ö_¨ch
(
w
, 
À16
,á)

	)

116 
	#out_be32
(
a
, 
v
Ë
	`out_¨ch
(
l
, 
be32
,á, v)

	)

117 
	#out_be16
(
a
, 
v
Ë
	`out_¨ch
(
w
, 
be16
,á, v)

	)

119 
	#ö_be32
(
a
Ë
	`ö_¨ch
(
l
, 
be32
,á)

	)

120 
	#ö_be16
(
a
Ë
	`ö_¨ch
(
w
, 
be16
,á)

	)

122 
	#out_8
(
a
, 
v
Ë
	`__øw_wrôeb
(v,á)

	)

123 
	#ö_8
(
a
Ë
	`__øw_ªadb
◊)

	)

133 
	#˛rbôs
(
ty≥
, 
addr
, 
˛ór
) \

134 
out_
##
	`ty≥
((
addr
), 
ö_
##ty≥◊ddrË& ~(
˛ór
))

	)

136 
	#£tbôs
(
ty≥
, 
addr
, 
£t
) \

137 
out_
##
	`ty≥
((
addr
), 
ö_
##ty≥◊ddrË| (
£t
))

	)

139 
	#˛r£tbôs
(
ty≥
, 
addr
, 
˛ór
, 
£t
) \

140 
out_
##
	`ty≥
((
addr
), (
ö_
##ty≥◊ddrË& ~(
˛ór
)Ë| (
£t
))

	)

142 
	#˛rbôs_be32
(
addr
, 
˛ór
Ë
	`˛rbôs
(
be32
,áddr, cÀ¨)

	)

143 
	#£tbôs_be32
(
addr
, 
£t
Ë
	`£tbôs
(
be32
,áddr, së)

	)

144 
	#˛r£tbôs_be32
(
addr
, 
˛ór
, 
£t
Ë
	`˛r£tbôs
(
be32
,áddr, cÀ¨, së)

	)

146 
	#˛rbôs_À32
(
addr
, 
˛ór
Ë
	`˛rbôs
(
À32
,áddr, cÀ¨)

	)

147 
	#£tbôs_À32
(
addr
, 
£t
Ë
	`£tbôs
(
À32
,áddr, së)

	)

148 
	#˛r£tbôs_À32
(
addr
, 
˛ór
, 
£t
Ë
	`˛r£tbôs
(
À32
,áddr, cÀ¨, së)

	)

150 
	#˛rbôs_be16
(
addr
, 
˛ór
Ë
	`˛rbôs
(
be16
,áddr, cÀ¨)

	)

151 
	#£tbôs_be16
(
addr
, 
£t
Ë
	`£tbôs
(
be16
,áddr, së)

	)

152 
	#˛r£tbôs_be16
(
addr
, 
˛ór
, 
£t
Ë
	`˛r£tbôs
(
be16
,áddr, cÀ¨, së)

	)

154 
	#˛rbôs_À16
(
addr
, 
˛ór
Ë
	`˛rbôs
(
À16
,áddr, cÀ¨)

	)

155 
	#£tbôs_À16
(
addr
, 
£t
Ë
	`£tbôs
(
À16
,áddr, së)

	)

156 
	#˛r£tbôs_À16
(
addr
, 
˛ór
, 
£t
Ë
	`˛r£tbôs
(
À16
,áddr, cÀ¨, së)

	)

158 
	#˛rbôs_8
(
addr
, 
˛ór
Ë
	`˛rbôs
(8,áddr, cÀ¨)

	)

159 
	#£tbôs_8
(
addr
, 
£t
Ë
	`£tbôs
(8,áddr, së)

	)

160 
	#˛r£tbôs_8
(
addr
, 
˛ór
, 
£t
Ë
	`˛r£tbôs
(8,áddr, cÀ¨, së)

	)

	@libethernet/src/uboot/bitops.h

5 #i‚de‡
_LINUX_BITOPS_H


6 
	#_LINUX_BITOPS_H


	)

8 
	~"../unim∂emíãd.h
"

16 
ölöe
 
	$gíîic_ffs
(
x
)

18 
r
 = 1;

20 i‡(!
x
)

22 i‡(!(
x
 & 0xffff)) {

23 
x
 >>= 16;

24 
r
 += 16;

26 i‡(!(
x
 & 0xff)) {

27 
x
 >>= 8;

28 
r
 += 8;

30 i‡(!(
x
 & 0xf)) {

31 
x
 >>= 4;

32 
r
 += 4;

34 i‡(!(
x
 & 3)) {

35 
x
 >>= 2;

36 
r
 += 2;

38 i‡(!(
x
 & 1)) {

39 
x
 >>= 1;

40 
r
 += 1;

42  
r
;

43 
	}
}

45 #i‚de‡
PLATFORM_FFS


46 
	#ffs
 
gíîic_ffs


	)

	@libethernet/src/uboot/common.h

27 #i‚de‡
__COMMON_H_


28 
	#__COMMON_H_
 1

	)

30 #unde‡
_LINUX_CONFIG_H


31 
	#_LINUX_CONFIG_H
 1

	)

33 
	~"c⁄fig.h
"

34 
	~"../unim∂emíãd.h
"

37 #ifde‡
CONFIG_POST


38 
	#CONFIG_HAS_POST


	)

39 #i‚de‡
CONFIG_POST_ALT_LIST


40 
	#CONFIG_POST_STD_LIST


	)

44 #ifde‡
CONFIG_INIT_CRITICAL


45 #îr‹ 
CONFIG_INIT_CRITICAL
 
is
 
dïªˇãd
!

46 #îr‹ 
Ród
 
£˘i⁄
 
CONFIG_SKIP_LOWLEVEL_INIT
 
ö
 
README
.

50 
	#ROUND
(
a
,
b
Ë((◊Ë+ (bË- 1Ë& ~((bË- 1))

	)

51 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

53 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

57 #ifde‡
ETH_DEBUG


58 
	#_DEBUG
 1

	)

60 
	#_DEBUG
 0

	)

68 
	#debug_c⁄d
(
c⁄d
, 
fmt
, 
¨gs
...) \

70 i‡(
c⁄d
) \

71 
	`¥ötf
(
fmt
, ##
¨gs
); \

72 } 0)

	)

74 
	#debug
(
fmt
, 
¨gs
...) \

75 
	`debug_c⁄d
(
_DEBUG
, 
fmt
, ##
¨gs
)

	)

84 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

85 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

86 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

	@libethernet/src/uboot/config.h

5 #¥agm®
⁄˚


7 
	#CONFIG_PHY_REALTEK
 1

	)

8 
	#CONFIG_SYS_HZ
 1000

	)

9 
	#CONFIG_ARM
 1

	)

10 
	#CONFIG_ARCH_MESON
 1

	)

11 
	#CONFIG_MESON_GXBB
 1

	)

12 
	#CONFIG_TARGET_ODROID_C2
 1

	)

13 
	#CONFIG_NET_RANDOM_ETHADDR
 1

	)

14 
	#CONFIG_ETH_DESIGNWARE
 1

	)

15 
	#CONFIG_PHYLIB
 1

	)

	@libethernet/src/uboot/designware.c

15 
	~"comm⁄.h
"

16 
	~"√t.h
"

17 
	~<î∫o.h
>

18 
	~"miùhy.h
"

19 
	~<mÆloc.h
>

20 
	~"../io.h
"

21 
	~"designw¨e.h
"

23 
	#DMA_INTR_ENA_TIE
 0x00000001

	)

24 
	#DMA_INTR_ENA_NIE
 0x00010000

	)

25 
	#DMA_INTR_ENA_RIE
 0x00000040

	)

27 
	#DMA_INTR_NORMAL
 (
DMA_INTR_ENA_NIE
 | 
DMA_INTR_ENA_RIE
 | \

28 
DMA_INTR_ENA_TIE
)

	)

30 
	#DMA_INTR_ENA_AIE
 0x00008000

	)

31 
	#DMA_INTR_ENA_FBE
 0x00002000

	)

32 
	#DMA_INTR_ENA_UNE
 0x00000020

	)

34 
	#DMA_INTR_ABNORMAL
 (
DMA_INTR_ENA_AIE
 | 
DMA_INTR_ENA_FBE
 | \

35 
DMA_INTR_ENA_UNE
)

	)

36 
	#DMA_INTR_DEFAULT_MASK
 (
DMA_INTR_NORMAL
 | 
DMA_INTR_ABNORMAL
)

	)

39 
	#GMAC_INT_MASK
 0x0000003c

	)

40 
	#GMAC_INT_DISABLE_RGMII
 
	`BIT
(0)

	)

41 
	#GMAC_INT_DISABLE_PCSLINK
 
	`BIT
(1)

	)

42 
	#GMAC_INT_DISABLE_PCSAN
 
	`BIT
(2)

	)

43 
	#GMAC_INT_DISABLE_PMT
 
	`BIT
(3)

	)

44 
	#GMAC_INT_DISABLE_TIMESTAMP
 
	`BIT
(9)

	)

45 
	#GMAC_INT_DISABLE_PCS
 (
GMAC_INT_DISABLE_RGMII
 | \

46 
GMAC_INT_DISABLE_PCSLINK
 | \

47 
GMAC_INT_DISABLE_PCSAN
)

	)

48 
	#GMAC_INT_DEFAULT_MASK
 (
GMAC_INT_DISABLE_TIMESTAMP
 | \

49 
GMAC_INT_DISABLE_PCS
)

	)

52 
	$dw_mdio_ªad
(
mii_dev
 *
bus
, 
addr
, 
devad
, 
ªg
)

54 #ifde‡
CONFIG_DM_ETH


55 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
((
udevi˚
 *)
bus
->priv);

56 
ëh_mac_ªgs
 *
mac_p
 = 
¥iv
->
mac_ªgs_p
;

58 
ëh_mac_ªgs
 *
mac_p
 = 
bus
->
¥iv
;

60 
ul⁄g
 
°¨t
;

61 
u16
 
miüddr
;

62 
timeout
 = 
CONFIG_MDIO_TIMEOUT
;

64 
miüddr
 = ((
addr
 << 
MIIADDRSHIFT
Ë& 
MII_ADDRMSK
) |

65 ((
ªg
 << 
MIIREGSHIFT
Ë& 
MII_REGMSK
);

67 
	`wrôñ
(
miüddr
 | 
MII_CLKRANGE_150_250M
 | 
MII_BUSY
, &
mac_p
->miiaddr);

69 
°¨t
 = 
	`uboŸ_gë_timî
(0);

70 
	`uboŸ_gë_timî
(
°¨t
Ë< 
timeout
) {

71 i‡(!(
	`ªadl
(&
mac_p
->
miüddr
Ë& 
MII_BUSY
))

72  
	`ªadl
(&
mac_p
->
miid©a
);

73 
	`uboŸ_udñay
(10);

76  -
ETIMEDOUT
;

77 
	}
}

79 
	$dw_mdio_wrôe
(
mii_dev
 *
bus
, 
addr
, 
devad
, 
ªg
,

80 
u16
 
vÆ
)

82 #ifde‡
CONFIG_DM_ETH


83 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
((
udevi˚
 *)
bus
->priv);

84 
ëh_mac_ªgs
 *
mac_p
 = 
¥iv
->
mac_ªgs_p
;

86 
ëh_mac_ªgs
 *
mac_p
 = 
bus
->
¥iv
;

88 
ul⁄g
 
°¨t
;

89 
u16
 
miüddr
;

90 
ªt
 = -
ETIMEDOUT
, 
timeout
 = 
CONFIG_MDIO_TIMEOUT
;

92 
	`wrôñ
(
vÆ
, &
mac_p
->
miid©a
);

93 
miüddr
 = ((
addr
 << 
MIIADDRSHIFT
Ë& 
MII_ADDRMSK
) |

94 ((
ªg
 << 
MIIREGSHIFT
Ë& 
MII_REGMSK
Ë| 
MII_WRITE
;

96 
	`wrôñ
(
miüddr
 | 
MII_CLKRANGE_150_250M
 | 
MII_BUSY
, &
mac_p
->miiaddr);

98 
°¨t
 = 
	`uboŸ_gë_timî
(0);

99 
	`uboŸ_gë_timî
(
°¨t
Ë< 
timeout
) {

100 i‡(!(
	`ªadl
(&
mac_p
->
miüddr
Ë& 
MII_BUSY
)) {

101 
ªt
 = 0;

104 
	`uboŸ_udñay
(10);

107  
ªt
;

108 
	}
}

110 #i‡
deföed
(
CONFIG_DM_ETH
Ë&& deföed(
CONFIG_DM_GPIO
)

111 
	$dw_mdio_ª£t
(
mii_dev
 *
bus
)

113 
udevi˚
 *
dev
 = 
bus
->
¥iv
;

114 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

115 
dw_ëh_pd©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

116 
ªt
;

118 i‡(!
	`dm_gpio_is_vÆid
(&
¥iv
->
ª£t_gpio
))

122 
ªt
 = 
	`dm_gpio_£t_vÆue
(&
¥iv
->
ª£t_gpio
, 0);

123 i‡(
ªt
)

124  
ªt
;

126 
	`uboŸ_udñay
(
pd©a
->
ª£t_dñays
[0]);

128 
ªt
 = 
	`dm_gpio_£t_vÆue
(&
¥iv
->
ª£t_gpio
, 1);

129 i‡(
ªt
)

130  
ªt
;

132 
	`uboŸ_udñay
(
pd©a
->
ª£t_dñays
[1]);

134 
ªt
 = 
	`dm_gpio_£t_vÆue
(&
¥iv
->
ª£t_gpio
, 0);

135 i‡(
ªt
)

136  
ªt
;

138 
	`uboŸ_udñay
(
pd©a
->
ª£t_dñays
[2]);

141 
	}
}

144 
	$dw_mdio_öô
(c⁄° *
«me
, *
¥iv
)

146 
mii_dev
 *
bus
 = 
	`mdio_Æloc
();

148 i‡(!
bus
) {

149 
	`¥ötf
("FailedÅoállocate MDIO bus\n");

150  -
ENOMEM
;

153 
bus
->
ªad
 = 
dw_mdio_ªad
;

154 
bus
->
wrôe
 = 
dw_mdio_wrôe
;

155 
	`¢¥ötf
(
bus
->
«me
, (bus->name), "%s",Çame);

156 #i‡
	`deföed
(
CONFIG_DM_ETH
Ë&& deföed(
CONFIG_DM_GPIO
)

157 
bus
->
ª£t
 = 
dw_mdio_ª£t
;

160 
bus
->
¥iv
 =Öriv;

162  
	`mdio_ªgi°î
(
bus
);

163 
	}
}

165 
	$tx_descs_öô
(
dw_ëh_dev
 *
¥iv
)

167 
ëh_dma_ªgs
 *
dma_p
 = 
¥iv
->
dma_ªgs_p
;

168 
dmamacdes¸
 *
desc_èbÀ_v±r
 = (dmamacdes¸*)
¥iv
->
tx_mac_des¸èbÀ
.
vaddr
;

169 
dmamacdes¸
 *
desc_èbÀ_µå
 = (dmamacdes¸*)
¥iv
->
tx_mac_des¸èbÀ
.
∑ddr
;

170 *
txbuffs_v±r
 = (*)
¥iv
->
txbuffs
.
vaddr
;

171 *
txbuffs_µå
 = (*)
¥iv
->
txbuffs
.
∑ddr
;

172 
dmamacdes¸
 *
desc_p
;

173 
u32
 
idx
;

175 
idx
 = 0; idx < 
CONFIG_TX_DESCR_NUM
; idx++) {

176 
desc_p
 = &
desc_èbÀ_v±r
[
idx
];

177 
desc_p
->
dmamac_addr
 = (
ul⁄g
)&
txbuffs_µå
[
idx
 * 
CONFIG_ETH_BUFSIZE
];

178 
desc_p
->
dmamac_√xt
 = (
ul⁄g
)&
desc_èbÀ_µå
[
idx
 + 1];

180 #i‡
	`deföed
(
CONFIG_DW_ALTDESCRIPTOR
)

181 
desc_p
->
txrx_°©us
 &~(
DESC_TXSTS_TXINT
 | 
DESC_TXSTS_TXLAST
 |

182 
DESC_TXSTS_TXFIRST
 | 
DESC_TXSTS_TXCRCDIS
 |

183 
DESC_TXSTS_TXCHECKINSCTRL
 |

184 
DESC_TXSTS_TXRINGEND
 | 
DESC_TXSTS_TXPADDIS
);

186 
desc_p
->
txrx_°©us
 |
DESC_TXSTS_TXCHAIN
;

187 
desc_p
->
dmamac_˙é
 = 0;

188 
desc_p
->
txrx_°©us
 &~(
DESC_TXSTS_MSK
 | 
DESC_TXSTS_OWNBYDMA
);

190 
desc_p
->
dmamac_˙é
 = 
DESC_TXCTRL_TXCHAIN
;

191 
desc_p
->
txrx_°©us
 = 0;

196 
desc_p
->
dmamac_√xt
 = (
ul⁄g
)&
desc_èbÀ_µå
[0];

199 
	`uboŸ_Êush_dˇche_ønge
((
ul⁄g
)
¥iv
->
tx_mac_des¸èbÀ
.
vaddr
,

200 (
ul⁄g
)
¥iv
->
tx_mac_des¸èbÀ
.
vaddr
 +

201 (
ul⁄g
)
¥iv
->
tx_mac_des¸èbÀ
.
size
);

203 
	`wrôñ
((
ul⁄g
)&
desc_èbÀ_µå
[0], &
dma_p
->
txdes˛i°addr
);

204 
¥iv
->
tx_cuºdes˙um
 = 0;

205 
	}
}

207 
	$rx_descs_öô
(
dw_ëh_dev
 *
¥iv
)

209 
ëh_dma_ªgs
 *
dma_p
 = 
¥iv
->
dma_ªgs_p
;

210 
dmamacdes¸
 *
desc_èbÀ_v±r
 = (dmamacdes¸*)
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
;

211 
dmamacdes¸
 *
desc_èbÀ_µå
 = (dmamacdes¸*)
¥iv
->
rx_mac_des¸èbÀ
.
∑ddr
;

212 *
rxbuffs_v±r
 = (*)
¥iv
->
rxbuffs
.
vaddr
;

213 *
rxbuffs_µå
 = (*)
¥iv
->
rxbuffs
.
∑ddr
;

214 
dmamacdes¸
 *
desc_p
;

215 
u32
 
idx
;

223 
	`uboŸ_Êush_dˇche_ønge
((
ul⁄g
)
¥iv
->
rxbuffs
.
vaddr
, (ul⁄gÌriv->rxbuffs.vadd∏+ (ul⁄gÌriv->rxbuffs.
size
);

225 
idx
 = 0; idx < 
CONFIG_RX_DESCR_NUM
; idx++) {

226 
desc_p
 = &
desc_èbÀ_v±r
[
idx
];

227 
desc_p
->
dmamac_addr
 = (
ul⁄g
)&
rxbuffs_µå
[
idx
 * 
CONFIG_ETH_BUFSIZE
];

228 
desc_p
->
dmamac_√xt
 = (
ul⁄g
)&
desc_èbÀ_µå
[
idx
 + 1];

230 
desc_p
->
dmamac_˙é
 =

231 (
MAC_MAX_FRAME_SZ
 & 
DESC_RXCTRL_SIZE1MASK
) |

232 
DESC_RXCTRL_RXCHAIN
;

234 
desc_p
->
txrx_°©us
 = 
DESC_RXSTS_OWNBYDMA
;

238 
desc_p
->
dmamac_√xt
 = (
ul⁄g
)&
desc_èbÀ_µå
[0];

241 
	`uboŸ_Êush_dˇche_ønge
((
ul⁄g
)
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
,

242 (
ul⁄g
)
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
 +

243 (
ul⁄g
)
¥iv
->
rx_mac_des¸èbÀ
.
size
);

245 
	`wrôñ
((
ul⁄g
)&
desc_èbÀ_µå
[0], &
dma_p
->
rxdes˛i°addr
);

246 
¥iv
->
rx_cuºdes˙um
 = 0;

247 
	}
}

249 
	$_dw_wrôe_hwaddr
(
dw_ëh_dev
 *
¥iv
, 
u8
 *
mac_id
)

251 
ëh_mac_ªgs
 *
mac_p
 = 
¥iv
->
mac_ªgs_p
;

252 
u32
 
macid_lo
, 
macid_hi
;

254 
macid_lo
 = 
mac_id
[0] + (mac_id[1] << 8) + (mac_id[2] << 16) +

255 (
mac_id
[3] << 24);

256 
macid_hi
 = 
mac_id
[4] + (mac_id[5] << 8);

258 
	`wrôñ
(
macid_hi
, &
mac_p
->
maˇddr0hi
);

259 
	`wrôñ
(
macid_lo
, &
mac_p
->
maˇddr0lo
);

262 
	}
}

264 
	$dw_adju°_lök
(
dw_ëh_dev
 *
¥iv
, 
ëh_mac_ªgs
 *
mac_p
,

265 
phy_devi˚
 *
phydev
)

267 
u32
 
c⁄f
 = 
	`ªadl
(&
mac_p
->c⁄fË| 
FRAMEBURSTENABLE
 | 
DISABLERXOWN
;

269 i‡(!
phydev
->
lök
) {

270 
	`¥ötf
("%s: Nÿlök.\n", 
phydev
->
dev
->
«me
);

274 i‡(
phydev
->
•ìd
 != 1000)

275 
c⁄f
 |
MII_PORTSELECT
;

277 
c⁄f
 &~
MII_PORTSELECT
;

279 i‡(
phydev
->
•ìd
 == 100)

280 
c⁄f
 |
FES_100
;

282 i‡(
phydev
->
du∂ex
)

283 
c⁄f
 |
FULLDPLXMODE
;

285 
	`wrôñ
(
c⁄f
, &
mac_p
->conf);

287 
	`¥ötf
("S≥ed: %d, %†du∂ex%s\n", 
phydev
->
•ìd
,

288 (
phydev
->
du∂ex
) ? "full" : "half",

289 (
phydev
->
p‹t
 =
PORT_FIBRE
) ? ", fiber mode" : "");

292 
	}
}

294 
	$_dw_ëh_hÆt
(
dw_ëh_dev
 *
¥iv
)

296 
ëh_mac_ªgs
 *
mac_p
 = 
¥iv
->
mac_ªgs_p
;

297 
ëh_dma_ªgs
 *
dma_p
 = 
¥iv
->
dma_ªgs_p
;

299 
	`wrôñ
(
	`ªadl
(&
mac_p
->
c⁄f
Ë& ~(
RXENABLE
 | 
TXENABLE
), &mac_p->conf);

300 
	`wrôñ
(
	`ªadl
(&
dma_p
->
›mode
Ë& ~(
RXSTART
 | 
TXSTART
), &dma_p->opmode);

302 
	`phy_shutdown
(
¥iv
->
phydev
);

303 
	}
}

305 
	$designw¨e_ëh_öô
(
dw_ëh_dev
 *
¥iv
, 
u8
 *
íëaddr
)

307 
ëh_mac_ªgs
 *
mac_p
 = 
¥iv
->
mac_ªgs_p
;

308 
ëh_dma_ªgs
 *
dma_p
 = 
¥iv
->
dma_ªgs_p
;

309 
ul⁄g
 
°¨t
;

310 
ªt
;

312 
	`wrôñ
(
	`ªadl
(&
dma_p
->
busmode
Ë| 
DMAMAC_SRST
, &dma_p->busmode);

314 
°¨t
 = 
	`uboŸ_gë_timî
(0);

315 
	`ªadl
(&
dma_p
->
busmode
Ë& 
DMAMAC_SRST
) {

316 i‡(
	`uboŸ_gë_timî
(
°¨t
Ë>
CONFIG_MACRESET_TIMEOUT
) {

317 
	`¥ötf
("DMAÑesetÅimeout\n");

318  -
ETIMEDOUT
;

321 
	`uboŸ_udñay
(100000);

328 
	`_dw_wrôe_hwaddr
(
¥iv
, 
íëaddr
);

330 
	`rx_descs_öô
(
¥iv
);

331 
	`tx_descs_öô
(
¥iv
);

333 
	`wrôñ
(
FIXEDBURST
 | 
PRIORXTX_41
 | 
DMA_PBL
, &
dma_p
->
busmode
);

335 #i‚de‡
CONFIG_DW_MAC_FORCE_THRESHOLD_MODE


336 
	`wrôñ
(
	`ªadl
(&
dma_p
->
›mode
Ë| 
FLUSHTXFIFO
 | 
STOREFORWARD
,

337 &
dma_p
->
›mode
);

339 
	`wrôñ
(
	`ªadl
(&
dma_p
->
›mode
Ë| 
FLUSHTXFIFO
,

340 &
dma_p
->
›mode
);

343 
	`wrôñ
(
	`ªadl
(&
dma_p
->
›mode
Ë| 
RXSTART
 | 
TXSTART
, &dma_p->opmode);

345 #ifde‡
CONFIG_DW_AXI_BURST_LEN


346 
	`wrôñ
((
CONFIG_DW_AXI_BURST_LEN
 & 0x1FF >> 1), &
dma_p
->
axibus
);

351 
	`wrôñ
(
	`ªadl
(&
dma_p
->
öã«bÀ
Ë| 
DMA_INTR_DEFAULT_MASK
, &dma_p->intenable);

354 
	`wrôñ
(
GMAC_INT_DEFAULT_MASK
, &
mac_p
->
ötmask
);

357 
ªt
 = 
	`phy_°¨tup
(
¥iv
->
phydev
);

358 i‡(
ªt
) {

359 
	`¥ötf
("CouldÇot initialize PHY %s\n",

360 
¥iv
->
phydev
->
dev
->
«me
);

361  
ªt
;

364 
ªt
 = 
	`dw_adju°_lök
(
¥iv
, 
mac_p
,Öriv->
phydev
);

365 i‡(
ªt
)

366  
ªt
;

369 
	}
}

371 
	$designw¨e_ëh_íabÀ
(
dw_ëh_dev
 *
¥iv
)

373 
ëh_mac_ªgs
 *
mac_p
 = 
¥iv
->
mac_ªgs_p
;

375 i‡(!
¥iv
->
phydev
->
lök
)

376  -
EIO
;

378 
	`wrôñ
(
	`ªadl
(&
mac_p
->
c⁄f
Ë| 
RXENABLE
 | 
TXENABLE
, &mac_p->conf);

381 
	}
}

383 
	#ETH_ZLEN
 60

	)

385 
	$_dw_ëh_£nd
(
dw_ëh_dev
 *
¥iv
, *
∑ckë
, 
Àngth
)

387 
ëh_dma_ªgs
 *
dma_p
 = 
¥iv
->
dma_ªgs_p
;

388 
u32
 
desc_num
 = 
¥iv
->
tx_cuºdes˙um
;

389 
dmamacdes¸
 *
desc_v±r
 = &((dmamacdes¸*)
¥iv
->
tx_mac_des¸èbÀ
.
vaddr
)[
desc_num
];

390 
ul⁄g
 
desc_v°¨t
 = (ul⁄g)
desc_v±r
;

391 
ul⁄g
 
desc_víd
 = 
desc_v°¨t
 +

392 
	`roundup
((*
desc_v±r
), 
ARCH_DMA_MINALIGN
);

393 
ul⁄g
 
d©a_v°¨t
 = 
	`uboŸ_dma_phys_to_vút
(
desc_v±r
->
dmamac_addr
);

394 
ul⁄g
 
d©a_víd
 = 
d©a_v°¨t
 + 
	`roundup
(
Àngth
, 
ARCH_DMA_MINALIGN
);

403 
	`uboŸ_övÆid©e_dˇche_ønge
(
desc_v°¨t
, 
desc_víd
);

406 i‡(
desc_v±r
->
txrx_°©us
 & 
DESC_TXSTS_OWNBYDMA
) {

407 
	`¥ötf
("CPUÇot owner ofÅx frame\n");

408  -
EPERM
;

411 
Àngth
 = 
	`max
÷ígth, 
ETH_ZLEN
);

413 
	`mem˝y
((*)
d©a_v°¨t
, 
∑ckë
, 
Àngth
);

416 
	`uboŸ_Êush_dˇche_ønge
(
d©a_v°¨t
, 
d©a_víd
);

418 #i‡
	`deföed
(
CONFIG_DW_ALTDESCRIPTOR
)

419 
desc_v±r
->
txrx_°©us
 |
DESC_TXSTS_TXFIRST
 | 
DESC_TXSTS_TXLAST
;

420 
desc_v±r
->
dmamac_˙é
 |(
Àngth
 << 
DESC_TXCTRL_SIZE1SHFT
) &

421 
DESC_TXCTRL_SIZE1MASK
;

423 
desc_v±r
->
txrx_°©us
 &~(
DESC_TXSTS_MSK
);

424 
desc_v±r
->
txrx_°©us
 |
DESC_TXSTS_OWNBYDMA
;

427 
desc_v±r
->
dmamac_˙é
 &~
DESC_TXCTRL_SIZE1MASK
;

429 
desc_v±r
->
dmamac_˙é
 |((
Àngth
 << 
DESC_TXCTRL_SIZE1SHFT
Ë& 
DESC_TXCTRL_SIZE1MASK


430 Ë| 
DESC_TXCTRL_TXLAST
 |

431 
DESC_TXCTRL_TXFIRST
;

433 
desc_v±r
->
txrx_°©us
 = 
DESC_TXSTS_OWNBYDMA
;

437 
	`uboŸ_Êush_dˇche_ønge
(
desc_v°¨t
, 
desc_víd
);

440 i‡(++
desc_num
 >
CONFIG_TX_DESCR_NUM
)

441 
desc_num
 = 0;

443 
¥iv
->
tx_cuºdes˙um
 = 
desc_num
;

446 
	`wrôñ
(
POLL_DATA
, &
dma_p
->
txpﬁldem™d
);

449 
	}
}

451 
	$_dw_ëh_ªcv
(
dw_ëh_dev
 *
¥iv
, 
uch¨
 **
∑ckëp
)

453 
u32
 
°©us
, 
desc_num
 = 
¥iv
->
rx_cuºdes˙um
;

454 
dmamacdes¸
 *
desc_v±r
 = &((dmamacdes¸*)
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
)[
desc_num
];

455 
Àngth
 = -
EAGAIN
;

456 
ul⁄g
 
desc_v°¨t
 = (ul⁄g)
desc_v±r
;

457 
ul⁄g
 
desc_víd
 = 
desc_v°¨t
 +

458 
	`roundup
((*
desc_v±r
), 
ARCH_DMA_MINALIGN
);

459 
ul⁄g
 
d©a_v°¨t
 = 
	`uboŸ_dma_phys_to_vút
(
desc_v±r
->
dmamac_addr
);

460 
ul⁄g
 
d©a_víd
;

463 
	`uboŸ_övÆid©e_dˇche_ønge
(
desc_v°¨t
, 
desc_víd
);

465 
°©us
 = 
desc_v±r
->
txrx_°©us
;

468 i‡(!(
°©us
 & 
DESC_RXSTS_OWNBYDMA
)) {

470 
Àngth
 = (
°©us
 & 
DESC_RXSTS_FRMLENMSK
) >>

471 
DESC_RXSTS_FRMLENSHFT
;

474 
d©a_víd
 = 
d©a_v°¨t
 + 
	`roundup
(
Àngth
, 
ARCH_DMA_MINALIGN
);

475 
	`uboŸ_övÆid©e_dˇche_ønge
(
d©a_v°¨t
, 
d©a_víd
);

476 *
∑ckëp
 = (
uch¨
 *)(
ul⁄g
)
	`uboŸ_dma_phys_to_vút
(
desc_v±r
->
dmamac_addr
);

479  
Àngth
;

480 
	}
}

482 
	$_dw_‰ì_pkt
(
dw_ëh_dev
 *
¥iv
)

484 
u32
 
desc_num
 = 
¥iv
->
rx_cuºdes˙um
;

485 
dmamacdes¸
 *
desc_v±r
 = &((dmamacdes¸*)
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
)[
desc_num
];

486 
ul⁄g
 
desc_v°¨t
 = (ul⁄g)
desc_v±r
;

487 
ul⁄g
 
desc_víd
 = 
desc_v°¨t
 +

488 
	`roundup
((*
desc_v±r
), 
ARCH_DMA_MINALIGN
);

494 
desc_v±r
->
txrx_°©us
 |
DESC_RXSTS_OWNBYDMA
;

497 
	`uboŸ_Êush_dˇche_ønge
(
desc_v°¨t
, 
desc_víd
);

500 i‡(++
desc_num
 >
CONFIG_RX_DESCR_NUM
)

501 
desc_num
 = 0;

502 
¥iv
->
rx_cuºdes˙um
 = 
desc_num
;

505 
	}
}

507 
	$dw_phy_öô
(
dw_ëh_dev
 *
¥iv
, *
dev
)

509 
phy_devi˚
 *
phydev
;

510 
mask
 = 0xffffffff, 
ªt
;

512 #ifde‡
CONFIG_PHY_ADDR


513 
mask
 = 1 << 
CONFIG_PHY_ADDR
;

516 
phydev
 = 
	`phy_föd_by_mask
(
¥iv
->
bus
, 
mask
,Öriv->
öãrÁ˚
);

517 i‡(!
phydev
)

518  -
ENODEV
;

520 
	`phy_c⁄√˘_dev
(
phydev
, 
dev
);

522 
phydev
->
suµ‹ãd
 &
PHY_GBIT_FEATURES
;

523 i‡(
¥iv
->
max_•ìd
) {

524 
ªt
 = 
	`phy_£t_suµ‹ãd
(
phydev
, 
¥iv
->
max_•ìd
);

525 i‡(
ªt
)

526  
ªt
;

528 
phydev
->
advîtisög
 =Öhydev->
suµ‹ãd
;

530 
¥iv
->
phydev
 =Öhydev;

531 
	`phy_c⁄fig
(
phydev
);

534 
	}
}

536 #i‚de‡
CONFIG_DM_ETH


537 
	$dw_ëh_öô
(
ëh_devi˚
 *
dev
)

539 
ªt
;

541 
ªt
 = 
	`designw¨e_ëh_öô
(
dev
->
¥iv
, dev->
íëaddr
);

542 i‡(!
ªt
)

543 
ªt
 = 
	`designw¨e_ëh_íabÀ
(
dev
->
¥iv
);

545  
ªt
;

546 
	}
}

548 
	$dw_ëh_£nd
(
ëh_devi˚
 *
dev
, *
∑ckë
, 
Àngth
)

550  
	`_dw_ëh_£nd
(
dev
->
¥iv
, 
∑ckë
, 
Àngth
);

551 
	}
}

553 
	$dw_ëh_ªcv
(
ëh_devi˚
 *
dev
)

555 
uch¨
 *
∑ckë
;

556 
Àngth
;

558 
Àngth
 = 
	`_dw_ëh_ªcv
(
dev
->
¥iv
, &
∑ckë
);

559 i‡(
Àngth
 =-
EAGAIN
)

561 
	`uboŸ_¥o˚ss_ª˚ived_∑ckë
(
∑ckë
, 
Àngth
);

563 
	`_dw_‰ì_pkt
(
dev
->
¥iv
);

565  
Àngth
;

566 
	}
}

568 
	$dw_ëh_hÆt
(
ëh_devi˚
 *
dev
)

570  
	`_dw_ëh_hÆt
(
dev
->
¥iv
);

571 
	}
}

573 
	$dw_wrôe_hwaddr
(
ëh_devi˚
 *
dev
)

575  
	`_dw_wrôe_hwaddr
(
dev
->
¥iv
, dev->
íëaddr
);

576 
	}
}

578 
	$designw¨e_ack
(
ëh_devi˚
 *
dev
)

580 
dw_ëh_dev
 *
¥iv
 = 
dev
->priv;

581 
	`wrôñ
(
DMA_INTR_DEFAULT_MASK
, &
¥iv
->
dma_ªgs_p
->
°©us
);

582 
	}
}

584 
	$designw¨e_öôülize
(
ul⁄g
 
ba£_addr
, 
u32
 
öãrÁ˚
, 
ëh_devi˚
 *
dev
)

586 
dw_ëh_dev
 *
¥iv
;

590 
¥iv
 = (
dw_ëh_dev
 *Ë
	`mÆloc
((dw_eth_dev));

592 i‡(!
¥iv
) {

593 
	`‰ì
(
dev
);

594  -
ENOMEM
;

597 i‡((
phys_addr_t
)
¥iv
 + (*priv) > (1ULL << 32)) {

598 
	`¥ötf
("designware: buffersáre outside DMA memory\n");

599  -
EINVAL
;

602 
	`mem£t
(
dev
, 0, (
ëh_devi˚
));

603 
	`mem£t
(
¥iv
, 0, (
dw_ëh_dev
));

607 
¥iv
->
tx_mac_des¸èbÀ
 =

608 
	`uboŸ_dma_mÆloc
((
dmamacdes¸
Ë* 
CONFIG_TX_DESCR_NUM
, 
ARCH_DMA_MINALIGN
);

609 
¥iv
->
rx_mac_des¸èbÀ
 =

610 
	`uboŸ_dma_mÆloc
((
dmamacdes¸
Ë* 
CONFIG_RX_DESCR_NUM
, 
ARCH_DMA_MINALIGN
);

612 i‡(
¥iv
->
tx_mac_des¸èbÀ
.
vaddr
 =0 ||Öriv->tx_mac_des¸èbÀ.
∑ddr
 == 0 ||

613 
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
 =0 ||Öriv->rx_mac_des¸èbÀ.
∑ddr
 == 0) {

614 
	`¥ötf
("designware: out of DMA memoryállocating descriptorÅable\n");

615  -
ENOMEM
;

618 
¥iv
->
txbuffs
 = 
	`uboŸ_dma_mÆloc
(
TX_TOTAL_BUFSIZE
, 
ARCH_DMA_MINALIGN
);

619 
¥iv
->
rxbuffs
 = 
	`uboŸ_dma_mÆloc
(
RX_TOTAL_BUFSIZE
, 
ARCH_DMA_MINALIGN
);

621 i‡(
¥iv
->
txbuffs
.
vaddr
 =0 ||Öriv->txbuffs.
∑ddr
 == 0 ||

622 
¥iv
->
rxbuffs
.
vaddr
 =0 ||Öriv->rxbuffs.
∑ddr
 == 0) {

623 
	`¥ötf
("designware: out of DMA memoryállocating RX/TX buffers\n");

624  -
ENOMEM
;

627 
	`mem£t
((*)
¥iv
->
tx_mac_des¸èbÀ
.
vaddr
, 0,Öriv->tx_mac_des¸èbÀ.
size
);

628 
	`mem£t
((*)
¥iv
->
rx_mac_des¸èbÀ
.
vaddr
, 0,Öriv->rx_mac_des¸èbÀ.
size
);

629 
	`mem£t
((*)
¥iv
->
txbuffs
.
vaddr
, 0,Öriv->txbuffs.
size
);

630 
	`mem£t
((*)
¥iv
->
rxbuffs
.
vaddr
, 0,Öriv->rxbuffs.
size
);

632 
	`•rötf
(
dev
->
«me
, "dwmac.%lx", 
ba£_addr
);

633 
dev
->
ioba£
 = ()
ba£_addr
;

634 
dev
->
¥iv
 =Öriv;

636 
¥iv
->
dev
 = dev;

637 
¥iv
->
mac_ªgs_p
 = (
ëh_mac_ªgs
 *)
ba£_addr
;

638 
¥iv
->
dma_ªgs_p
 = (
ëh_dma_ªgs
 *)(
ba£_addr
 +

639 
DW_DMA_BASE_OFFSET
);

641 
dev
->
öô
 = 
dw_ëh_öô
;

642 
dev
->
£nd
 = 
dw_ëh_£nd
;

643 
dev
->
ªcv
 = 
dw_ëh_ªcv
;

644 
dev
->
hÆt
 = 
dw_ëh_hÆt
;

645 
dev
->
wrôe_hwaddr
 = 
dw_wrôe_hwaddr
;

647 
¥iv
->
öãrÁ˚
 = interface;

649 
	`dw_mdio_öô
(
dev
->
«me
, 
¥iv
->
mac_ªgs_p
);

650 
¥iv
->
bus
 = 
	`miùhy_gë_dev_by_«me
(
dev
->
«me
);

652  
	`dw_phy_öô
(
¥iv
, 
dev
);

653 
	}
}

656 #ifde‡
CONFIG_DM_ETH


657 
	$designw¨e_ëh_°¨t
(
udevi˚
 *
dev
)

659 
ëh_pd©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

660 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

661 
ªt
;

663 
ªt
 = 
	`designw¨e_ëh_öô
(
¥iv
, 
pd©a
->
íëaddr
);

664 i‡(
ªt
)

665  
ªt
;

666 
ªt
 = 
	`designw¨e_ëh_íabÀ
(
¥iv
);

667 i‡(
ªt
)

668  
ªt
;

671 
	}
}

673 
	$designw¨e_ëh_£nd
(
udevi˚
 *
dev
, *
∑ckë
, 
Àngth
)

675 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

677  
	`_dw_ëh_£nd
(
¥iv
, 
∑ckë
, 
Àngth
);

678 
	}
}

680 
	$designw¨e_ëh_ªcv
(
udevi˚
 *
dev
, 
Êags
, 
uch¨
 **
∑ckëp
)

682 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

684  
	`_dw_ëh_ªcv
(
¥iv
, 
∑ckëp
);

685 
	}
}

687 
	$designw¨e_ëh_‰ì_pkt
(
udevi˚
 *
dev
, 
uch¨
 *
∑ckë
, 
Àngth
)

689 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

691  
	`_dw_‰ì_pkt
(
¥iv
);

692 
	}
}

694 
	$designw¨e_ëh_°›
(
udevi˚
 *
dev
)

696 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

698  
	`_dw_ëh_hÆt
(
¥iv
);

699 
	}
}

701 
	$designw¨e_ëh_wrôe_hwaddr
(
udevi˚
 *
dev
)

703 
ëh_pd©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

704 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

706  
	`_dw_wrôe_hwaddr
(
¥iv
, 
pd©a
->
íëaddr
);

707 
	}
}

709 
	$designw¨e_ëh_böd
(
udevi˚
 *
dev
)

711 #ifde‡
CONFIG_DM_PCI


712 
num_ˇrds
;

713 
«me
[20];

716 i‡(
	`devi˚_is_⁄_pci_bus
(
dev
)) {

717 
	`•rötf
(
«me
, "ëh_designw¨e#%u", 
num_ˇrds
++);

718 
	`devi˚_£t_«me
(
dev
, 
«me
);

723 
	}
}

725 
	$designw¨e_ëh_¥obe
(
udevi˚
 *
dev
)

727 
ëh_pd©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

728 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

729 
u32
 
ioba£
 = 
pd©a
->iobase;

730 
ul⁄g
 
iﬂddr
;

731 
ªt
;

732 #ifde‡
CONFIG_CLK


733 
i
, 
îr
, 
˛ock_nb
;

735 
¥iv
->
˛ock_cou¡
 = 0;

736 
˛ock_nb
 = 
	`dev_cou¡_ph™dÀ_wôh_¨gs
(
dev
, "clocks", "#clock-cells");

737 i‡(
˛ock_nb
 > 0) {

738 
¥iv
->
˛ocks
 = 
	`devm_kˇŒoc
(
dev
, 
˛ock_nb
, (
˛k
),

739 
GFP_KERNEL
);

740 i‡(!
¥iv
->
˛ocks
)

741  -
ENOMEM
;

743 
i
 = 0; i < 
˛ock_nb
; i++) {

744 
îr
 = 
	`˛k_gë_by_ödex
(
dev
, 
i
, &
¥iv
->
˛ocks
[i]);

745 i‡(
îr
 < 0)

748 
îr
 = 
	`˛k_íabÀ
(&
¥iv
->
˛ocks
[
i
]);

749 i‡(
îr
 &&Éº !-
ENOSYS
 &&Éº !-
ENOTSUPP
) {

750 
	`¥_îr
("ÁûedÅÿíabÀ clock %d\n", 
i
);

751 
	`˛k_‰ì
(&
¥iv
->
˛ocks
[
i
]);

752 
˛k_îr
;

754 
¥iv
->
˛ock_cou¡
++;

756 } i‡(
˛ock_nb
 !-
ENOENT
) {

757 
	`¥_îr
("ÁûedÅÿgë clockÖh™dÀ(%d)\n", 
˛ock_nb
);

758  
˛ock_nb
;

762 #i‡
	`deföed
(
CONFIG_DM_REGULATOR
)

763 
udevi˚
 *
phy_suµly
;

765 
ªt
 = 
	`devi˚_gë_suµly_ªguœt‹
(
dev
, "phy-supply",

766 &
phy_suµly
);

767 i‡(
ªt
) {

768 
	`debug
("%s: Nÿphy suµly\n", 
dev
->
«me
);

770 
ªt
 = 
	`ªguœt‹_£t_íabÀ
(
phy_suµly
, 
åue
);

771 i‡(
ªt
) {

772 
	`puts
("ErrorÉnablingÖhy supply\n");

773  
ªt
;

778 #ifde‡
CONFIG_DM_PCI


783 i‡(
	`devi˚_is_⁄_pci_bus
(
dev
)) {

784 
	`dm_pci_ªad_c⁄fig32
(
dev
, 
PCI_BASE_ADDRESS_0
, &
ioba£
);

785 
ioba£
 &
PCI_BASE_ADDRESS_MEM_MASK
;

786 
ioba£
 = 
	`dm_pci_mem_to_phys
(
dev
, iobase);

788 
pd©a
->
ioba£
 = iobase;

789 
pd©a
->
phy_öãrÁ˚
 = 
PHY_INTERFACE_MODE_RMII
;

793 
	`debug
("%s, ioba£=%x,Öriv=%p\n", 
__func__
, 
ioba£
, 
¥iv
);

794 
iﬂddr
 = 
ioba£
;

795 
¥iv
->
mac_ªgs_p
 = (
ëh_mac_ªgs
 *)
iﬂddr
;

796 
¥iv
->
dma_ªgs_p
 = (
ëh_dma_ªgs
 *)(
iﬂddr
 + 
DW_DMA_BASE_OFFSET
);

797 
¥iv
->
öãrÁ˚
 = 
pd©a
->
phy_öãrÁ˚
;

798 
¥iv
->
max_•ìd
 = 
pd©a
->max_speed;

800 
	`dw_mdio_öô
(
dev
->
«me
, dev);

801 
¥iv
->
bus
 = 
	`miùhy_gë_dev_by_«me
(
dev
->
«me
);

803 
ªt
 = 
	`dw_phy_öô
(
¥iv
, 
dev
);

804 
	`debug
("%s,Ñë=%d\n", 
__func__
, 
ªt
);

806  
ªt
;

808 #ifde‡
CONFIG_CLK


809 
˛k_îr
:

810 
ªt
 = 
	`˛k_ªÀa£_Æl
(
¥iv
->
˛ocks
,Öriv->
˛ock_cou¡
);

811 i‡(
ªt
)

812 
	`¥_îr
("failedÅo disableáll clocks\n");

814  
îr
;

816 
	}
}

818 
	$designw¨e_ëh_ªmove
(
udevi˚
 *
dev
)

820 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

822 
	`‰ì
(
¥iv
->
phydev
);

823 
	`mdio_uƒegi°î
(
¥iv
->
bus
);

824 
	`mdio_‰ì
(
¥iv
->
bus
);

826 #ifde‡
CONFIG_CLK


827  
	`˛k_ªÀa£_Æl
(
¥iv
->
˛ocks
,Öriv->
˛ock_cou¡
);

831 
	}
}

833 c⁄° 
ëh_›s
 
	gdesignw¨e_ëh_›s
 = {

834 .
°¨t
 = 
designw¨e_ëh_°¨t
,

835 .
	g£nd
 = 
designw¨e_ëh_£nd
,

836 .
	gªcv
 = 
designw¨e_ëh_ªcv
,

837 .
	g‰ì_pkt
 = 
designw¨e_ëh_‰ì_pkt
,

838 .
	g°›
 = 
designw¨e_ëh_°›
,

839 .
	gwrôe_hwaddr
 = 
designw¨e_ëh_wrôe_hwaddr
,

842 
	$designw¨e_ëh_ofd©a_to_∂©d©a
(
udevi˚
 *
dev
)

844 
dw_ëh_pd©a
 *
dw_pd©a
 = 
	`dev_gë_∂©d©a
(
dev
);

845 #ifde‡
CONFIG_DM_GPIO


846 
dw_ëh_dev
 *
¥iv
 = 
	`dev_gë_¥iv
(
dev
);

848 
ëh_pd©a
 *
pd©a
 = &
dw_pd©a
->eth_pdata;

849 c⁄° *
phy_mode
;

850 #ifde‡
CONFIG_DM_GPIO


851 
ª£t_Êags
 = 
GPIOD_IS_OUT
;

853 
ªt
 = 0;

855 
pd©a
->
ioba£
 = 
	`dev_ªad_addr
(
dev
);

856 
pd©a
->
phy_öãrÁ˚
 = -1;

857 
phy_mode
 = 
	`dev_ªad_°rög
(
dev
, "phy-mode");

858 i‡(
phy_mode
)

859 
pd©a
->
phy_öãrÁ˚
 = 
	`phy_gë_öãrÁ˚_by_«me
(
phy_mode
);

860 i‡(
pd©a
->
phy_öãrÁ˚
 == -1) {

861 
	`debug
("%s: InvÆid PHY i¡îÁ˚ '%s'\n", 
__func__
, 
phy_mode
);

862  -
EINVAL
;

865 
pd©a
->
max_•ìd
 = 
	`dev_ªad_u32_deÁu…
(
dev
, "max-speed", 0);

867 #ifde‡
CONFIG_DM_GPIO


868 i‡(
	`dev_ªad_boﬁ
(
dev
, "snps,reset-active-low"))

869 
ª£t_Êags
 |
GPIOD_ACTIVE_LOW
;

871 
ªt
 = 
	`gpio_ªque°_by_«me
(
dev
, "snps,reset-gpio", 0,

872 &
¥iv
->
ª£t_gpio
, 
ª£t_Êags
);

873 i‡(
ªt
 == 0) {

874 
ªt
 = 
	`dev_ªad_u32_¨øy
(
dev
, "snps,reset-delays-us",

875 
dw_pd©a
->
ª£t_dñays
, 3);

876 } i‡(
ªt
 =-
ENOENT
) {

877 
ªt
 = 0;

881  
ªt
;

882 
	}
}

884 c⁄° 
udevi˚_id
 
	gdesignw¨e_ëh_ids
[] = {

885 { .
com∑tibÀ
 = "allwinner,sun7i-a20-gmac" },

886 { .
	gcom∑tibÀ
 = "altr,socfpga-stmmac" },

887 { .
	gcom∑tibÀ
 = "amlogic,meson6-dwmac" },

888 { .
	gcom∑tibÀ
 = "amlogic,meson-gx-dwmac" },

889 { .
	gcom∑tibÀ
 = "st,stm32-dwmac" },

893 
U_BOOT_DRIVER
(
ëh_designw¨e
) = {

894 .
«me
 = "eth_designware",

895 .
	gid
 = 
UCLASS_ETH
,

896 .
	gof_m©ch
 = 
designw¨e_ëh_ids
,

897 .
	gofd©a_to_∂©d©a
 = 
designw¨e_ëh_ofd©a_to_∂©d©a
,

898 .
	gböd
 = 
designw¨e_ëh_böd
,

899 .
	g¥obe
 = 
designw¨e_ëh_¥obe
,

900 .
	gªmove
 = 
designw¨e_ëh_ªmove
,

901 .
	g›s
 = &
designw¨e_ëh_›s
,

902 .
	g¥iv_auto_Æloc_size
 = (
dw_ëh_dev
),

903 .
	g∂©d©a_auto_Æloc_size
 = (
dw_ëh_pd©a
),

904 .
	gÊags
 = 
DM_FLAG_ALLOC_PRIV_DMA
,

907 
pci_devi˚_id
 
	gsuµ‹ãd
[] = {

908 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_QRK_EMAC
) },

912 
U_BOOT_PCI_DEVICE
(
ëh_designw¨e
, 
suµ‹ãd
);

	@libethernet/src/uboot/designware.h

11 #i‚de‡
_DW_ETH_H


12 
	#_DW_ETH_H


	)

14 #ifde‡
CONFIG_DM_GPIO


15 
	~<asm-gíîic/gpio.h
>

18 
	#CONFIG_TX_DESCR_NUM
 16

	)

19 
	#CONFIG_RX_DESCR_NUM
 16

	)

20 
	#CONFIG_ETH_BUFSIZE
 2048

	)

21 
	#TX_TOTAL_BUFSIZE
 (
CONFIG_ETH_BUFSIZE
 * 
CONFIG_TX_DESCR_NUM
)

	)

22 
	#RX_TOTAL_BUFSIZE
 (
CONFIG_ETH_BUFSIZE
 * 
CONFIG_RX_DESCR_NUM
)

	)

24 
	#CONFIG_MACRESET_TIMEOUT
 (3 * 
CONFIG_SYS_HZ
)

	)

25 
	#CONFIG_MDIO_TIMEOUT
 (3 * 
CONFIG_SYS_HZ
)

	)

27 
	sëh_mac_ªgs
 {

28 
u32
 
	mc⁄f
;

29 
u32
 
	m‰amefût
;

30 
u32
 
	mhashèbÀhigh
;

31 
u32
 
	mhashèbÀlow
;

32 
u32
 
	mmiüddr
;

33 
u32
 
	mmiid©a
;

34 
u32
 
	mÊowc⁄åﬁ
;

35 
u32
 
	mvœ¡ag
;

36 
u32
 
	mvîsi⁄
;

37 
u8
 
	mª£rved_1
[20];

38 
u32
 
	möåeg
;

39 
u32
 
	mötmask
;

40 
u32
 
	mmaˇddr0hi
;

41 
u32
 
	mmaˇddr0lo
;

45 
	#FRAMEBURSTENABLE
 (1 << 21)

	)

46 
	#MII_PORTSELECT
 (1 << 15)

	)

47 
	#FES_100
 (1 << 14)

	)

48 
	#DISABLERXOWN
 (1 << 13)

	)

49 
	#FULLDPLXMODE
 (1 << 11)

	)

50 
	#RXENABLE
 (1 << 2)

	)

51 
	#TXENABLE
 (1 << 3)

	)

54 
	#MII_BUSY
 (1 << 0)

	)

55 
	#MII_WRITE
 (1 << 1)

	)

56 
	#MII_CLKRANGE_60_100M
 (0)

	)

57 
	#MII_CLKRANGE_100_150M
 (0x4)

	)

58 
	#MII_CLKRANGE_20_35M
 (0x8)

	)

59 
	#MII_CLKRANGE_35_60M
 (0xC)

	)

60 
	#MII_CLKRANGE_150_250M
 (0x10)

	)

61 
	#MII_CLKRANGE_250_300M
 (0x14)

	)

63 
	#MIIADDRSHIFT
 (11)

	)

64 
	#MIIREGSHIFT
 (6)

	)

65 
	#MII_REGMSK
 (0x1F << 6)

	)

66 
	#MII_ADDRMSK
 (0x1F << 11)

	)

69 
	sëh_dma_ªgs
 {

70 
u32
 
	mbusmode
;

71 
u32
 
	mtxpﬁldem™d
;

72 
u32
 
	mrxpﬁldem™d
;

73 
u32
 
	mrxdes˛i°addr
;

74 
u32
 
	mtxdes˛i°addr
;

75 
u32
 
	m°©us
;

76 
u32
 
	m›mode
;

77 
u32
 
	möã«bÀ
;

78 
u32
 
	mª£rved1
[2];

79 
u32
 
	maxibus
;

80 
u32
 
	mª£rved2
[7];

81 
u32
 
	mcuºho°txdesc
;

82 
u32
 
	mcuºho°rxdesc
;

83 
u32
 
	mcuºho°txbufÁddr
;

84 
u32
 
	mcuºho°rxbufÁddr
;

87 
	#DW_DMA_BASE_OFFSET
 (0x1000)

	)

90 #i‚de‡
CONFIG_DW_GMAC_DEFAULT_DMA_PBL


91 
	#CONFIG_DW_GMAC_DEFAULT_DMA_PBL
 8

	)

95 
	#FIXEDBURST
 (1 << 16)

	)

96 
	#PRIORXTX_41
 (3 << 14)

	)

97 
	#PRIORXTX_31
 (2 << 14)

	)

98 
	#PRIORXTX_21
 (1 << 14)

	)

99 
	#PRIORXTX_11
 (0 << 14)

	)

100 
	#DMA_PBL
 (
CONFIG_DW_GMAC_DEFAULT_DMA_PBL
<<8)

	)

101 
	#RXHIGHPRIO
 (1 << 1)

	)

102 
	#DMAMAC_SRST
 (1 << 0)

	)

105 
	#POLL_DATA
 (0xFFFFFFFF)

	)

108 
	#STOREFORWARD
 (1 << 21)

	)

109 
	#FLUSHTXFIFO
 (1 << 20)

	)

110 
	#TXSTART
 (1 << 13)

	)

111 
	#TXSECONDFRAME
 (1 << 2)

	)

112 
	#RXSTART
 (1 << 1)

	)

115 
	#MAC_MAX_FRAME_SZ
 (1600)

	)

117 
	sdmamacdes¸
 {

118 
u32
 
	mtxrx_°©us
;

119 
u32
 
	mdmamac_˙é
;

120 
u32
 
	mdmamac_addr
;

121 
u32
 
	mdmamac_√xt
;

122 } 
__Æig√d
(
ARCH_DMA_MINALIGN
);

129 #i‡
deföed
(
CONFIG_DW_ALTDESCRIPTOR
)

131 
	#DESC_TXSTS_OWNBYDMA
 (1 << 31)

	)

132 
	#DESC_TXSTS_TXINT
 (1 << 30)

	)

133 
	#DESC_TXSTS_TXLAST
 (1 << 29)

	)

134 
	#DESC_TXSTS_TXFIRST
 (1 << 28)

	)

135 
	#DESC_TXSTS_TXCRCDIS
 (1 << 27)

	)

137 
	#DESC_TXSTS_TXPADDIS
 (1 << 26)

	)

138 
	#DESC_TXSTS_TXCHECKINSCTRL
 (3 << 22)

	)

139 
	#DESC_TXSTS_TXRINGEND
 (1 << 21)

	)

140 
	#DESC_TXSTS_TXCHAIN
 (1 << 20)

	)

141 
	#DESC_TXSTS_MSK
 (0x1FFFF << 0)

	)

145 
	#DESC_TXSTS_OWNBYDMA
 (1 << 31)

	)

146 
	#DESC_TXSTS_MSK
 (0x1FFFF << 0)

	)

151 
	#DESC_RXSTS_OWNBYDMA
 (1 << 31)

	)

152 
	#DESC_RXSTS_DAFILTERFAIL
 (1 << 30)

	)

153 
	#DESC_RXSTS_FRMLENMSK
 (0x3FFF << 16)

	)

154 
	#DESC_RXSTS_FRMLENSHFT
 (16)

	)

156 
	#DESC_RXSTS_ERROR
 (1 << 15)

	)

157 
	#DESC_RXSTS_RXTRUNCATED
 (1 << 14)

	)

158 
	#DESC_RXSTS_SAFILTERFAIL
 (1 << 13)

	)

159 
	#DESC_RXSTS_RXIPC_GIANTFRAME
 (1 << 12)

	)

160 
	#DESC_RXSTS_RXDAMAGED
 (1 << 11)

	)

161 
	#DESC_RXSTS_RXVLANTAG
 (1 << 10)

	)

162 
	#DESC_RXSTS_RXFIRST
 (1 << 9)

	)

163 
	#DESC_RXSTS_RXLAST
 (1 << 8)

	)

164 
	#DESC_RXSTS_RXIPC_GIANT
 (1 << 7)

	)

165 
	#DESC_RXSTS_RXCOLLISION
 (1 << 6)

	)

166 
	#DESC_RXSTS_RXFRAMEETHER
 (1 << 5)

	)

167 
	#DESC_RXSTS_RXWATCHDOG
 (1 << 4)

	)

168 
	#DESC_RXSTS_RXMIIERROR
 (1 << 3)

	)

169 
	#DESC_RXSTS_RXDRIBBLING
 (1 << 2)

	)

170 
	#DESC_RXSTS_RXCRC
 (1 << 1)

	)

177 #i‡
deföed
(
CONFIG_DW_ALTDESCRIPTOR
)

179 
	#DESC_TXCTRL_SIZE1MASK
 (0x1FFF << 0)

	)

180 
	#DESC_TXCTRL_SIZE1SHFT
 (0)

	)

181 
	#DESC_TXCTRL_SIZE2MASK
 (0x1FFF << 16)

	)

182 
	#DESC_TXCTRL_SIZE2SHFT
 (16)

	)

186 
	#DESC_TXCTRL_TXINT
 (1 << 31)

	)

187 
	#DESC_TXCTRL_TXLAST
 (1 << 30)

	)

188 
	#DESC_TXCTRL_TXFIRST
 (1 << 29)

	)

189 
	#DESC_TXCTRL_TXCHECKINSCTRL
 (3 << 27)

	)

190 
	#DESC_TXCTRL_TXCRCDIS
 (1 << 26)

	)

191 
	#DESC_TXCTRL_TXRINGEND
 (1 << 25)

	)

192 
	#DESC_TXCTRL_TXCHAIN
 (1 << 24)

	)

194 
	#DESC_TXCTRL_SIZE1MASK
 (0x7FF << 0)

	)

195 
	#DESC_TXCTRL_SIZE1SHFT
 (0)

	)

196 
	#DESC_TXCTRL_SIZE2MASK
 (0x7FF << 11)

	)

197 
	#DESC_TXCTRL_SIZE2SHFT
 (11)

	)

202 #i‡
deföed
(
CONFIG_DW_ALTDESCRIPTOR
)

204 
	#DESC_RXCTRL_RXINTDIS
 (1 << 31)

	)

205 
	#DESC_RXCTRL_RXRINGEND
 (1 << 15)

	)

206 
	#DESC_RXCTRL_RXCHAIN
 (1 << 14)

	)

208 
	#DESC_RXCTRL_SIZE1MASK
 (0x1FFF << 0)

	)

209 
	#DESC_RXCTRL_SIZE1SHFT
 (0)

	)

210 
	#DESC_RXCTRL_SIZE2MASK
 (0x1FFF << 16)

	)

211 
	#DESC_RXCTRL_SIZE2SHFT
 (16)

	)

215 
	#DESC_RXCTRL_RXINTDIS
 (1 << 31)

	)

216 
	#DESC_RXCTRL_RXRINGEND
 (1 << 25)

	)

217 
	#DESC_RXCTRL_RXCHAIN
 (1 << 24)

	)

219 
	#DESC_RXCTRL_SIZE1MASK
 (0x7FF << 0)

	)

220 
	#DESC_RXCTRL_SIZE1SHFT
 (0)

	)

221 
	#DESC_RXCTRL_SIZE2MASK
 (0x7FF << 11)

	)

222 
	#DESC_RXCTRL_SIZE2SHFT
 (11)

	)

226 
	sdw_ëh_dev
 {

227 
ëhif_dma_addr_t
 
	mtx_mac_des¸èbÀ
;

228 
ëhif_dma_addr_t
 
	mrx_mac_des¸èbÀ
;

229 
ëhif_dma_addr_t
 
	mtxbuffs
;

230 
ëhif_dma_addr_t
 
	mrxbuffs
;

232 
u32
 
	möãrÁ˚
;

233 
u32
 
	mmax_•ìd
;

234 
u32
 
	mtx_cuºdes˙um
;

235 
u32
 
	mrx_cuºdes˙um
;

237 
ëh_mac_ªgs
 *
	mmac_ªgs_p
;

238 
ëh_dma_ªgs
 *
	mdma_ªgs_p
;

239 #i‚de‡
CONFIG_DM_ETH


240 
ëh_devi˚
 *
	mdev
;

242 #ifde‡
CONFIG_DM_GPIO


243 
gpio_desc
 
	mª£t_gpio
;

245 #ifde‡
CONFIG_CLK


246 
˛k
 *
	m˛ocks
;

247 
	m˛ock_cou¡
;

250 
phy_devi˚
 *
	mphydev
;

251 
mii_dev
 *
	mbus
;

254 #ifde‡
CONFIG_DM_ETH


255 
designw¨e_ëh_ofd©a_to_∂©d©a
(
udevi˚
 *
dev
);

256 
designw¨e_ëh_¥obe
(
udevi˚
 *
dev
);

257 c⁄° 
ëh_›s
 
designw¨e_ëh_›s
;

259 
	sdw_ëh_pd©a
 {

260 
ëh_pd©a
 
	mëh_pd©a
;

261 
u32
 
	mª£t_dñays
[3];

264 
designw¨e_ëh_öô
(
dw_ëh_dev
 *
¥iv
, 
u8
 *
íëaddr
);

265 
designw¨e_ëh_íabÀ
(
dw_ëh_dev
 *
¥iv
);

266 
designw¨e_ëh_£nd
(
udevi˚
 *
dev
, *
∑ckë
, 
Àngth
);

267 
designw¨e_ëh_ªcv
(
udevi˚
 *
dev
, 
Êags
, 
uch¨
 **
∑ckëp
);

268 
designw¨e_ëh_‰ì_pkt
(
udevi˚
 *
dev
, 
uch¨
 *
∑ckë
,

269 
Àngth
);

270 
designw¨e_ëh_°›
(
udevi˚
 *
dev
);

271 
designw¨e_ëh_wrôe_hwaddr
(
udevi˚
 *
dev
);

	@libethernet/src/uboot/err.h

4 #i‚de‡
_LINUX_ERR_H


5 
	#_LINUX_ERR_H


	)

7 
	~<î∫o.h
>

18 
	#MAX_ERRNO
 4095

	)

20 #i‚de‡
__ASSEMBLY__


22 
	#IS_ERR_VALUE
(
x
Ë
	`u∆ikñy
((xË>()-
MAX_ERRNO
)

	)

24 
ölöe
 *
	$ERR_PTR
(
îr‹
)

26  (*Ë
îr‹
;

27 
	}
}

29 
ölöe
 
	$PTR_ERR
(c⁄° *
±r
)

31  (Ë
±r
;

32 
	}
}

34 
ölöe
 
	$IS_ERR
(c⁄° *
±r
)

36  
	`IS_ERR_VALUE
(()
±r
);

37 
	}
}

46 
ölöe
 * 
__mu°_check
 
	$ERR_CAST
(
__f‹˚
 c⁄° *
±r
)

49  (*Ë
±r
;

50 
	}
}

	@libethernet/src/uboot/ethtool.h

17 #i‚de‡
_LINUX_ETHTOOL_H


18 
	#_LINUX_ETHTOOL_H


	)

20 
	~<°döt.h
>

23 
	sëhtoﬁ_cmd
 {

24 
uöt32_t
 
	mcmd
;

25 
uöt32_t
 
	msuµ‹ãd
;

26 
uöt32_t
 
	madvîtisög
;

27 
uöt16_t
 
	m•ìd
;

28 
uöt8_t
 
	mdu∂ex
;

29 
uöt8_t
 
	mp‹t
;

30 
uöt8_t
 
	mphy_addªss
;

31 
uöt8_t
 
	må™s˚ivî
;

32 
uöt8_t
 
	maut⁄eg
;

33 
uöt8_t
 
	mmdio_suµ‹t
;

34 
uöt32_t
 
	mmaxtxpkt
;

35 
uöt32_t
 
	mmaxrxpkt
;

36 
uöt16_t
 
	m•ìd_hi
;

37 
uöt8_t
 
	mëh_ç_mdix
;

38 
uöt8_t
 
	mª£rved2
;

39 
uöt32_t
 
	mÕ_advîtisög
;

40 
uöt32_t
 
	mª£rved
[2];

43 
ölöe
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

44 
uöt32_t
 
•ìd
)

47 
ï
->
•ìd
 = (
uöt16_t
)speed;

48 
ï
->
•ìd_hi
 = (
uöt16_t
)(
•ìd
 >> 16);

49 
	}
}

51 
ölöe
 
uöt32_t
 
	$ëhtoﬁ_cmd_•ìd
(
ëhtoﬁ_cmd
 *
ï
)

53  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

54 
	}
}

56 
	#ETHTOOL_FWVERS_LEN
 32

	)

57 
	#ETHTOOL_BUSINFO_LEN
 32

	)

59 
	sëhtoﬁ_drvöfo
 {

60 
uöt32_t
 
	mcmd
;

61 
	mdrivî
[32];

62 
	mvîsi⁄
[32];

63 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

64 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

66 
	mª£rved1
[32];

67 
	mª£rved2
[12];

75 
uöt32_t
 
	mn_¥iv_Êags
;

76 
uöt32_t
 
	mn_°©s
;

77 
uöt32_t
 
	mã°öfo_Àn
;

78 
uöt32_t
 
	mìdump_Àn
;

79 
uöt32_t
 
	mªgdump_Àn
;

82 
	#SOPASS_MAX
 6

	)

84 
	sëhtoﬁ_wﬁöfo
 {

85 
uöt32_t
 
	mcmd
;

86 
uöt32_t
 
	msuµ‹ãd
;

87 
uöt32_t
 
	mwﬁ›ts
;

88 
uöt8_t
 
	ms›ass
[
SOPASS_MAX
];

92 
	sëhtoﬁ_vÆue
 {

93 
uöt32_t
 
	mcmd
;

94 
uöt32_t
 
	md©a
;

98 
	sëhtoﬁ_ªgs
 {

99 
uöt32_t
 
	mcmd
;

100 
uöt32_t
 
	mvîsi⁄
;

101 
uöt32_t
 
	mÀn
;

102 
uöt8_t
 
	md©a
[0];

106 
	sëhtoﬁ_ì¥om
 {

107 
uöt32_t
 
	mcmd
;

108 
uöt32_t
 
	mmagic
;

109 
uöt32_t
 
	moff£t
;

110 
uöt32_t
 
	mÀn
;

111 
uöt8_t
 
	md©a
[0];

115 
	sëhtoﬁ_cﬂÀs˚
 {

116 
uöt32_t
 
	mcmd
;

122 
uöt32_t
 
	mrx_cﬂÀs˚_u£cs
;

130 
uöt32_t
 
	mrx_max_cﬂÀs˚d_‰ames
;

137 
uöt32_t
 
	mrx_cﬂÀs˚_u£cs_úq
;

138 
uöt32_t
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

144 
uöt32_t
 
	mtx_cﬂÀs˚_u£cs
;

152 
uöt32_t
 
	mtx_max_cﬂÀs˚d_‰ames
;

159 
uöt32_t
 
	mtx_cﬂÀs˚_u£cs_úq
;

160 
uöt32_t
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

167 
uöt32_t
 
	m°©s_block_cﬂÀs˚_u£cs
;

176 
uöt32_t
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

177 
uöt32_t
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

183 
uöt32_t
 
	mpkt_øã_low
;

184 
uöt32_t
 
	mrx_cﬂÀs˚_u£cs_low
;

185 
uöt32_t
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

186 
uöt32_t
 
	mtx_cﬂÀs˚_u£cs_low
;

187 
uöt32_t
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

198 
uöt32_t
 
	mpkt_øã_high
;

199 
uöt32_t
 
	mrx_cﬂÀs˚_u£cs_high
;

200 
uöt32_t
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

201 
uöt32_t
 
	mtx_cﬂÀs˚_u£cs_high
;

202 
uöt32_t
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

207 
uöt32_t
 
	møã_ßm∂e_öãrvÆ
;

211 
	sëhtoﬁ_rög∑øm
 {

212 
uöt32_t
 
	mcmd
;

218 
uöt32_t
 
	mrx_max_≥ndög
;

219 
uöt32_t
 
	mrx_möi_max_≥ndög
;

220 
uöt32_t
 
	mrx_jumbo_max_≥ndög
;

221 
uöt32_t
 
	mtx_max_≥ndög
;

226 
uöt32_t
 
	mrx_≥ndög
;

227 
uöt32_t
 
	mrx_möi_≥ndög
;

228 
uöt32_t
 
	mrx_jumbo_≥ndög
;

229 
uöt32_t
 
	mtx_≥ndög
;

233 
	sëhtoﬁ_∑u£∑øm
 {

234 
uöt32_t
 
	mcmd
;

246 
uöt32_t
 
	maut⁄eg
;

247 
uöt32_t
 
	mrx_∑u£
;

248 
uöt32_t
 
	mtx_∑u£
;

251 
	#ETH_GSTRING_LEN
 32

	)

252 
	eëhtoﬁ_°rög£t
 {

253 
	mETH_SS_TEST
 = 0,

254 
	mETH_SS_STATS
,

255 
	mETH_SS_PRIV_FLAGS
,

256 
	mETH_SS_NTUPLE_FILTERS
,

257 
	mETH_SS_FEATURES
,

261 
	sëhtoﬁ_g°rögs
 {

262 
uöt32_t
 
	mcmd
;

263 
uöt32_t
 
	m°rög_£t
;

264 
uöt32_t
 
	mÀn
;

265 
uöt8_t
 
	md©a
[0];

268 
	sëhtoﬁ_s£t_öfo
 {

269 
uöt32_t
 
	mcmd
;

270 
uöt32_t
 
	mª£rved
;

271 
uöt64_t
 
	ms£t_mask
;

273 
uöt32_t
 
	md©a
[0];

279 
	eëhtoﬁ_ã°_Êags
 {

280 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

281 
	mETH_TEST_FL_FAILED
 = (1 << 1),

285 
	sëhtoﬁ_ã°
 {

286 
uöt32_t
 
	mcmd
;

287 
uöt32_t
 
	mÊags
;

288 
uöt32_t
 
	mª£rved
;

289 
uöt32_t
 
	mÀn
;

290 
uöt64_t
 
	md©a
[0];

294 
	sëhtoﬁ_°©s
 {

295 
uöt32_t
 
	mcmd
;

296 
uöt32_t
 
	mn_°©s
;

297 
uöt64_t
 
	md©a
[0];

300 
	sëhtoﬁ_≥rm_addr
 {

301 
uöt32_t
 
	mcmd
;

302 
uöt32_t
 
	msize
;

303 
uöt8_t
 
	md©a
[0];

315 
	eëhtoﬁ_Êags
 {

316 
	mETH_FLAG_TXVLAN
 = (1 << 7),

317 
	mETH_FLAG_RXVLAN
 = (1 << 8),

318 
	mETH_FLAG_LRO
 = (1 << 15),

319 
	mETH_FLAG_NTUPLE
 = (1 << 27),

320 
	mETH_FLAG_RXHASH
 = (1 << 28),

339 
	sëhtoﬁ_t˝ù4_•ec
 {

340 
uöt32_t
 
	mù4§c
;

341 
uöt32_t
 
	mù4d°
;

342 
uöt16_t
 
	mp§c
;

343 
uöt16_t
 
	mpd°
;

344 
uöt8_t
 
	mtos
;

356 
	sëhtoﬁ_ah_e•ù4_•ec
 {

357 
uöt32_t
 
	mù4§c
;

358 
uöt32_t
 
	mù4d°
;

359 
uöt32_t
 
	m•i
;

360 
uöt8_t
 
	mtos
;

363 
	#ETH_RX_NFC_IP4
 1

	)

374 
	sëhtoﬁ_u§ù4_•ec
 {

375 
uöt32_t
 
	mù4§c
;

376 
uöt32_t
 
	mù4d°
;

377 
uöt32_t
 
	ml4_4_byãs
;

378 
uöt8_t
 
	mtos
;

379 
uöt8_t
 
	mù_vî
;

380 
uöt8_t
 
	m¥Ÿo
;

391 
	sëhtoﬁ_rxfh_ödú
 {

392 
uöt32_t
 
	mcmd
;

393 
uöt32_t
 
	msize
;

394 
uöt32_t
 
	mrög_ödex
[0];

397 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

398 
	eëhtoﬁ_Êash_›_ty≥
 {

399 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

403 
	sëhtoﬁ_Êash
 {

404 
uöt32_t
 
	mcmd
;

405 
uöt32_t
 
	mªgi⁄
;

406 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

418 
	sëhtoﬁ_gë_„©uªs_block
 {

419 
uöt32_t
 
	mavaûabÀ
;

420 
uöt32_t
 
	mªque°ed
;

421 
uöt32_t
 
	ma˘ive
;

422 
uöt32_t
 
	m√vî_ch™ged
;

432 
	sëhtoﬁ_g„©uªs
 {

433 
uöt32_t
 
	mcmd
;

434 
uöt32_t
 
	msize
;

435 
ëhtoﬁ_gë_„©uªs_block
 
	m„©uªs
[0];

443 
	sëhtoﬁ_£t_„©uªs_block
 {

444 
uöt32_t
 
	mvÆid
;

445 
uöt32_t
 
	mªque°ed
;

454 
	sëhtoﬁ_s„©uªs
 {

455 
uöt32_t
 
	mcmd
;

456 
uöt32_t
 
	msize
;

457 
ëhtoﬁ_£t_„©uªs_block
 
	m„©uªs
[0];

485 
	eëhtoﬁ_s„©uªs_ªtvÆ_bôs
 {

486 
	mETHTOOL_F_UNSUPPORTED__BIT
,

487 
	mETHTOOL_F_WISH__BIT
,

488 
	mETHTOOL_F_COMPAT__BIT
,

491 
	#ETHTOOL_F_UNSUPPORTED
 (1 << 
ETHTOOL_F_UNSUPPORTED__BIT
)

	)

492 
	#ETHTOOL_F_WISH
 (1 << 
ETHTOOL_F_WISH__BIT
)

	)

493 
	#ETHTOOL_F_COMPAT
 (1 << 
ETHTOOL_F_COMPAT__BIT
)

	)

496 
	#ETHTOOL_GSET
 0x00000001

	)

497 
	#ETHTOOL_SSET
 0x00000002

	)

498 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

499 
	#ETHTOOL_GREGS
 0x00000004

	)

500 
	#ETHTOOL_GWOL
 0x00000005

	)

501 
	#ETHTOOL_SWOL
 0x00000006

	)

502 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

503 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

504 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

507 
	#ETHTOOL_GLINK
 0x0000000a

	)

508 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

509 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

510 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

511 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

512 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

513 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

514 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

515 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

516 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

517 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

518 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

519 
	#ETHTOOL_STXCSUM
 0x00000017

	)

520 
	#ETHTOOL_GSG
 0x00000018

	)

522 
	#ETHTOOL_SSG
 0x00000019

	)

524 
	#ETHTOOL_TEST
 0x0000001®

	)

525 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

526 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

527 
	#ETHTOOL_GSTATS
 0x0000001d

	)

528 
	#ETHTOOL_GTSO
 0x0000001ê

	)

529 
	#ETHTOOL_STSO
 0x0000001‡

	)

530 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

531 
	#ETHTOOL_GUFO
 0x00000021

	)

532 
	#ETHTOOL_SUFO
 0x00000022

	)

533 
	#ETHTOOL_GGSO
 0x00000023

	)

534 
	#ETHTOOL_SGSO
 0x00000024

	)

535 
	#ETHTOOL_GFLAGS
 0x00000025

	)

536 
	#ETHTOOL_SFLAGS
 0x00000026

	)

537 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

538 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

540 
	#ETHTOOL_GRXFH
 0x00000029

	)

541 
	#ETHTOOL_SRXFH
 0x0000002®

	)

542 
	#ETHTOOL_GGRO
 0x0000002b

	)

543 
	#ETHTOOL_SGRO
 0x0000002¯

	)

544 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

545 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

546 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

547 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

548 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

549 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

550 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

551 
	#ETHTOOL_RESET
 0x00000034

	)

552 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

553 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

554 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

555 
	#ETHTOOL_GRXFHINDIR
 0x00000038

	)

556 
	#ETHTOOL_SRXFHINDIR
 0x00000039

	)

558 
	#ETHTOOL_GFEATURES
 0x0000003®

	)

559 
	#ETHTOOL_SFEATURES
 0x0000003b

	)

562 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

563 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

566 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

567 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

568 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

569 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

570 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

571 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

572 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

573 
	#SUPPORTED_TP
 (1 << 7)

	)

574 
	#SUPPORTED_AUI
 (1 << 8)

	)

575 
	#SUPPORTED_MII
 (1 << 9)

	)

576 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

577 
	#SUPPORTED_BNC
 (1 << 11)

	)

578 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

579 
	#SUPPORTED_Pau£
 (1 << 13)

	)

580 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

581 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

582 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

583 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

584 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

585 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

586 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

587 
	#SUPPORTED_1000ba£X_HÆf
 (1 << 21)

	)

588 
	#SUPPORTED_1000ba£X_FuŒ
 (1 << 22)

	)

591 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

592 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

593 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

594 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

595 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

596 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

597 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

598 
	#ADVERTISED_TP
 (1 << 7)

	)

599 
	#ADVERTISED_AUI
 (1 << 8)

	)

600 
	#ADVERTISED_MII
 (1 << 9)

	)

601 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

602 
	#ADVERTISED_BNC
 (1 << 11)

	)

603 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

604 
	#ADVERTISED_Pau£
 (1 << 13)

	)

605 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

606 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

607 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

608 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

609 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

610 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

611 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

612 
	#ADVERTISED_1000ba£X_HÆf
 (1 << 21)

	)

613 
	#ADVERTISED_1000ba£X_FuŒ
 (1 << 22)

	)

622 
	#SPEED_10
 10

	)

623 
	#SPEED_100
 100

	)

624 
	#SPEED_1000
 1000

	)

625 
	#SPEED_2500
 2500

	)

626 
	#SPEED_10000
 10000

	)

629 
	#DUPLEX_HALF
 0x00

	)

630 
	#DUPLEX_FULL
 0x01

	)

633 
	#PORT_TP
 0x00

	)

634 
	#PORT_AUI
 0x01

	)

635 
	#PORT_MII
 0x02

	)

636 
	#PORT_FIBRE
 0x03

	)

637 
	#PORT_BNC
 0x04

	)

638 
	#PORT_DA
 0x05

	)

639 
	#PORT_NONE
 0xef

	)

640 
	#PORT_OTHER
 0xff

	)

643 
	#XCVR_INTERNAL
 0x00

	)

644 
	#XCVR_EXTERNAL
 0x01

	)

645 
	#XCVR_DUMMY1
 0x02

	)

646 
	#XCVR_DUMMY2
 0x03

	)

647 
	#XCVR_DUMMY3
 0x04

	)

652 
	#AUTONEG_DISABLE
 0x00

	)

653 
	#AUTONEG_ENABLE
 0x01

	)

656 
	#ETH_TP_MDI_INVALID
 0x00

	)

657 
	#ETH_TP_MDI
 0x01

	)

658 
	#ETH_TP_MDI_X
 0x02

	)

661 
	#WAKE_PHY
 (1 << 0)

	)

662 
	#WAKE_UCAST
 (1 << 1)

	)

663 
	#WAKE_MCAST
 (1 << 2)

	)

664 
	#WAKE_BCAST
 (1 << 3)

	)

665 
	#WAKE_ARP
 (1 << 4)

	)

666 
	#WAKE_MAGIC
 (1 << 5)

	)

667 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

670 
	#TCP_V4_FLOW
 0x01

	)

671 
	#UDP_V4_FLOW
 0x02

	)

672 
	#SCTP_V4_FLOW
 0x03

	)

673 
	#AH_ESP_V4_FLOW
 0x04

	)

674 
	#TCP_V6_FLOW
 0x05

	)

675 
	#UDP_V6_FLOW
 0x06

	)

676 
	#SCTP_V6_FLOW
 0x07

	)

677 
	#AH_ESP_V6_FLOW
 0x08

	)

678 
	#AH_V4_FLOW
 0x09

	)

679 
	#ESP_V4_FLOW
 0x0®

	)

680 
	#AH_V6_FLOW
 0x0b

	)

681 
	#ESP_V6_FLOW
 0x0¯

	)

682 
	#IP_USER_FLOW
 0x0d

	)

683 
	#IPV4_FLOW
 0x10

	)

684 
	#IPV6_FLOW
 0x11

	)

685 
	#ETHER_FLOW
 0x12

	)

688 
	#RXH_L2DA
 (1 << 1)

	)

689 
	#RXH_VLAN
 (1 << 2)

	)

690 
	#RXH_L3_PROTO
 (1 << 3)

	)

691 
	#RXH_IP_SRC
 (1 << 4)

	)

692 
	#RXH_IP_DST
 (1 << 5)

	)

693 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

694 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

695 
	#RXH_DISCARD
 (1U << 31)

	)

697 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

706 
	eëhtoﬁ_ª£t_Êags
 {

712 
	mETH_RESET_MGMT
 = 1 << 0,

713 
	mETH_RESET_IRQ
 = 1 << 1,

714 
	mETH_RESET_DMA
 = 1 << 2,

715 
	mETH_RESET_FILTER
 = 1 << 3,

716 
	mETH_RESET_OFFLOAD
 = 1 << 4,

717 
	mETH_RESET_MAC
 = 1 << 5,

718 
	mETH_RESET_PHY
 = 1 << 6,

719 
	mETH_RESET_RAM
 = 1 << 7,

722 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

724 
	mETH_RESET_ALL
 = 0xffffffff,

727 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@libethernet/src/uboot/list.h

4 #i‚de‡
_LINUX_LIST_H


5 
	#_LINUX_LIST_H


	)

7 
	~<°ddef.h
>

9 
	#LIST_POISON1
 ((*Ë0x0)

	)

10 
	#LIST_POISON2
 ((*Ë0x0)

	)

12 #i‚de‡
ARCH_HAS_PREFETCH


13 
	#ARCH_HAS_PREFETCH


	)

14 
ölöe
 
	$¥e„tch
(c⁄° *
x
Ë{;
	}
}

27 
	sli°_hód
 {

28 
li°_hód
 *
	m√xt
, *
	m¥ev
;

31 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

33 
	#LIST_HEAD
(
«me
) \

34 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

36 
ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

38 
li°
->
√xt
 =Üist;

39 
li°
->
¥ev
 =Üist;

40 
	}
}

48 
ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

49 
li°_hód
 *
¥ev
,

50 
li°_hód
 *
√xt
)

52 
√xt
->
¥ev
 = 
√w
;

53 
√w
->
√xt
 =Çext;

54 
√w
->
¥ev
 =Örev;

55 
¥ev
->
√xt
 = 
√w
;

56 
	}
}

66 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

68 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

69 
	}
}

79 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

81 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

82 
	}
}

91 
ölöe
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

93 
√xt
->
¥ev
 =Örev;

94 
¥ev
->
√xt
 =Çext;

95 
	}
}

103 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

105 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

106 
íåy
->
√xt
 = 
LIST_POISON1
;

107 
íåy
->
¥ev
 = 
LIST_POISON2
;

108 
	}
}

117 
ölöe
 
	$li°_ª∂a˚
(
li°_hód
 *
ﬁd
,

118 
li°_hód
 *
√w
)

120 
√w
->
√xt
 = 
ﬁd
->next;

121 
√w
->
√xt
->
¥ev
 =Çew;

122 
√w
->
¥ev
 = 
ﬁd
->prev;

123 
√w
->
¥ev
->
√xt
 =Çew;

124 
	}
}

126 
ölöe
 
	$li°_ª∂a˚_öô
(
li°_hód
 *
ﬁd
,

127 
li°_hód
 *
√w
)

129 
	`li°_ª∂a˚
(
ﬁd
, 
√w
);

130 
	`INIT_LIST_HEAD
(
ﬁd
);

131 
	}
}

137 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

139 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

140 
	`INIT_LIST_HEAD
(
íåy
);

141 
	}
}

148 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

150 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

151 
	`li°_add
(
li°
, 
hód
);

152 
	}
}

159 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

160 
li°_hód
 *
hód
)

162 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

163 
	`li°_add_èû
(
li°
, 
hód
);

164 
	}
}

171 
ölöe
 
	$li°_is_œ°
(c⁄° 
li°_hód
 *
li°
,

172 c⁄° 
li°_hód
 *
hód
)

174  
li°
->
√xt
 =
hód
;

175 
	}
}

181 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

183  
hód
->
√xt
 == head;

184 
	}
}

199 
ölöe
 
	$li°_em±y_ˇªful
(c⁄° 
li°_hód
 *
hód
)

201 
li°_hód
 *
√xt
 = 
hód
->next;

202  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

203 
	}
}

209 
ölöe
 
	$li°_is_söguœr
(c⁄° 
li°_hód
 *
hód
)

211  !
	`li°_em±y
(
hód
Ë&& (hód->
√xt
 =hód->
¥ev
);

212 
	}
}

214 
ölöe
 
	$__li°_cut_posôi⁄
(
li°_hód
 *
li°
,

215 
li°_hód
 *
hód
, li°_hód *
íåy
)

217 
li°_hód
 *
√w_fú°
 = 
íåy
->
√xt
;

218 
li°
->
√xt
 = 
hód
->next;

219 
li°
->
√xt
->
¥ev
 =Üist;

220 
li°
->
¥ev
 = 
íåy
;

221 
íåy
->
√xt
 = 
li°
;

222 
hód
->
√xt
 = 
√w_fú°
;

223 
√w_fú°
->
¥ev
 = 
hód
;

224 
	}
}

240 
ölöe
 
	$li°_cut_posôi⁄
(
li°_hód
 *
li°
,

241 
li°_hód
 *
hód
, li°_hód *
íåy
)

243 i‡(
	`li°_em±y
(
hód
))

245 i‡(
	`li°_is_söguœr
(
hód
) &&

246 (
hód
->
√xt
 !
íåy
 && head !=Éntry))

248 i‡(
íåy
 =
hód
)

249 
	`INIT_LIST_HEAD
(
li°
);

251 
	`__li°_cut_posôi⁄
(
li°
, 
hód
, 
íåy
);

252 
	}
}

254 
ölöe
 
	$__li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

255 
li°_hód
 *
¥ev
,

256 
li°_hód
 *
√xt
)

258 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

259 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

261 
fú°
->
¥ev
 =Örev;

262 
¥ev
->
√xt
 = 
fú°
;

264 
œ°
->
√xt
 =Çext;

265 
√xt
->
¥ev
 = 
œ°
;

266 
	}
}

273 
ölöe
 
	$li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

274 
li°_hód
 *
hód
)

276 i‡(!
	`li°_em±y
(
li°
))

277 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

278 
	}
}

285 
ölöe
 
	$li°_•li˚_èû
(
li°_hód
 *
li°
,

286 
li°_hód
 *
hód
)

288 i‡(!
	`li°_em±y
(
li°
))

289 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

290 
	}
}

299 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

300 
li°_hód
 *
hód
)

302 i‡(!
	`li°_em±y
(
li°
)) {

303 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

304 
	`INIT_LIST_HEAD
(
li°
);

306 
	}
}

316 
ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

317 
li°_hód
 *
hód
)

319 i‡(!
	`li°_em±y
(
li°
)) {

320 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

321 
	`INIT_LIST_HEAD
(
li°
);

323 
	}
}

331 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

332 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

342 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

343 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

350 
	#li°_f‹_óch
(
pos
, 
hód
) \

351 
pos
 = (
hód
)->
√xt
; 
	`¥e„tch
(pos->next),Öos != (head); \

352 
pos
 =Öos->
√xt
)

	)

364 
	#__li°_f‹_óch
(
pos
, 
hód
) \

365 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

372 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

373 
pos
 = (
hód
)->
¥ev
; 
	`¥e„tch
(pos->prev),Öos != (head); \

374 
pos
 =Öos->
¥ev
)

	)

382 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

383 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

384 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

392 
	#li°_f‹_óch_¥ev_ß„
(
pos
, 
n
, 
hód
) \

393 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev; \

394 
	`¥e„tch
(
pos
->
¥ev
),Öo†!(
hód
); \

395 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

403 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

404 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

405 
	`¥e„tch
(
pos
->
membî
.
√xt
), &pos->membî !(
hód
); \

406 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

414 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

415 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

416 
	`¥e„tch
(
pos
->
membî
.
¥ev
), &pos->membî !(
hód
); \

417 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

427 
	#li°_¥ï¨e_íåy
(
pos
, 
hód
, 
membî
) \

428 ((
pos
Ë? : 
	`li°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
))

	)

439 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

440 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

441 
	`¥e„tch
(
pos
->
membî
.
√xt
), &pos->membî !(
hód
); \

442 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

453 
	#li°_f‹_óch_íåy_c⁄töue_ªvî£
(
pos
, 
hód
, 
membî
) \

454 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

455 
	`¥e„tch
(
pos
->
membî
.
¥ev
), &pos->membî !(
hód
); \

456 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

466 
	#li°_f‹_óch_íåy_‰om
(
pos
, 
hód
, 
membî
) \

467 ; 
	`¥e„tch
(
pos
->
membî
.
√xt
), &pos->membî !(
hód
); \

468 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

477 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

478 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

479 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

480 &
pos
->
membî
 !(
hód
); \

481 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

493 
	#li°_f‹_óch_íåy_ß„_c⁄töue
(
pos
, 
n
, 
hód
, 
membî
) \

494 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

495 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

496 &
pos
->
membî
 !(
hód
); \

497 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

509 
	#li°_f‹_óch_íåy_ß„_‰om
(
pos
, 
n
, 
hód
, 
membî
) \

510 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

511 &
pos
->
membî
 !(
hód
); \

512 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

524 
	#li°_f‹_óch_íåy_ß„_ªvî£
(
pos
, 
n
, 
hód
, 
membî
) \

525 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
), \

526 
n
 = 
	`li°_íåy
(
pos
->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

527 &
pos
->
membî
 !(
hód
); \

528 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
¥ev
, 
	`ty≥of
(*n), membî))

	)

537 
	shli°_hód
 {

538 
hli°_node
 *
	mfú°
;

541 
	shli°_node
 {

542 
hli°_node
 *
	m√xt
, **
	mµªv
;

545 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

546 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

547 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

548 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

550 
h
->
√xt
 = 
NULL
;

551 
h
->
µªv
 = 
NULL
;

552 
	}
}

554 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

556  !
h
->
µªv
;

557 
	}
}

559 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

561  !
h
->
fú°
;

562 
	}
}

564 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

566 
hli°_node
 *
√xt
 = 
n
->next;

567 
hli°_node
 **
µªv
 = 
n
->pprev;

568 *
µªv
 = 
√xt
;

569 i‡(
√xt
)

570 
√xt
->
µªv
 =Öprev;

571 
	}
}

573 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

575 
	`__hli°_dñ
(
n
);

576 
n
->
√xt
 = 
LIST_POISON1
;

577 
n
->
µªv
 = 
LIST_POISON2
;

578 
	}
}

580 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

582 i‡(!
	`hli°_unhashed
(
n
)) {

583 
	`__hli°_dñ
(
n
);

584 
	`INIT_HLIST_NODE
(
n
);

586 
	}
}

588 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

590 
hli°_node
 *
fú°
 = 
h
->first;

591 
n
->
√xt
 = 
fú°
;

592 i‡(
fú°
)

593 
fú°
->
µªv
 = &
n
->
√xt
;

594 
h
->
fú°
 = 
n
;

595 
n
->
µªv
 = &
h
->
fú°
;

596 
	}
}

599 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

600 
hli°_node
 *
√xt
)

602 
n
->
µªv
 = 
√xt
->pprev;

603 
n
->
√xt
 =Çext;

604 
√xt
->
µªv
 = &
n
->next;

605 *(
n
->
µªv
) =Ç;

606 
	}
}

608 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

609 
hli°_node
 *
√xt
)

611 
√xt
->√xà
n
->next;

612 
n
->
√xt
 =Çext;

613 
√xt
->
µªv
 = &
n
->next;

615 if(
√xt
->next)

616 
√xt
->√xt->
µªv
 = &next->next;

617 
	}
}

619 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,ty≥,membî)

	)

621 
	#hli°_f‹_óch
(
pos
, 
hód
) \

622 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
	`¥e„tch
’os->
√xt
); 1; }); \

623 
pos
 =Öos->
√xt
)

	)

625 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

626 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

627 
pos
 = 
n
)

	)

636 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
membî
) \

637 
pos
 = (
hód
)->
fú°
; \

638 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

639 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

640 
pos
 =Öos->
√xt
)

	)

648 
	#hli°_f‹_óch_íåy_c⁄töue
(
ços
, 
pos
, 
membî
) \

649 
pos
 = (pos)->
√xt
; \

650 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

651 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

652 
pos
 =Öos->
√xt
)

	)

660 
	#hli°_f‹_óch_íåy_‰om
(
ços
, 
pos
, 
membî
) \

661 ; 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

662 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

663 
pos
 =Öos->
√xt
)

	)

673 
	#hli°_f‹_óch_íåy_ß„
(
ços
, 
pos
, 
n
, 
hód
, 
membî
) \

674 
pos
 = (
hód
)->
fú°
; \

675 
pos
 && ({ 
n
 =Öos->
√xt
; 1; }) && \

676 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

677 
pos
 = 
n
)

	)

	@libethernet/src/uboot/mdio.h

14 #i‚de‡
__LINUX_MDIO_H__


15 
	#__LINUX_MDIO_H__


	)

17 
	~"mii.h
"

20 
	#MDIO_MMD_PMAPMD
 1

	)

22 
	#MDIO_MMD_WIS
 2

	)

23 
	#MDIO_MMD_PCS
 3

	)

24 
	#MDIO_MMD_PHYXS
 4

	)

25 
	#MDIO_MMD_DTEXS
 5

	)

26 
	#MDIO_MMD_TC
 6

	)

27 
	#MDIO_MMD_AN
 7

	)

28 
	#MDIO_MMD_C22EXT
 29

	)

29 
	#MDIO_MMD_VEND1
 30

	)

30 
	#MDIO_MMD_VEND2
 31

	)

33 
	#MDIO_CTRL1
 
MII_BMCR


	)

34 
	#MDIO_STAT1
 
MII_BMSR


	)

35 
	#MDIO_DEVID1
 
MII_PHYSID1


	)

36 
	#MDIO_DEVID2
 
MII_PHYSID2


	)

37 
	#MDIO_SPEED
 4

	)

38 
	#MDIO_DEVS1
 5

	)

39 
	#MDIO_DEVS2
 6

	)

40 
	#MDIO_CTRL2
 7

	)

41 
	#MDIO_STAT2
 8

	)

42 
	#MDIO_PMA_TXDIS
 9

	)

43 
	#MDIO_PMA_RXDET
 10

	)

44 
	#MDIO_PMA_EXTABLE
 11

	)

45 
	#MDIO_PKGID1
 14

	)

46 
	#MDIO_PKGID2
 15

	)

47 
	#MDIO_AN_ADVERTISE
 16

	)

48 
	#MDIO_AN_LPA
 19

	)

49 
	#MDIO_PHYXS_LNSTAT
 24

	)

52 
	#MDIO_PMA_10GBT_SWAPPOL
 130

	)

53 
	#MDIO_PMA_10GBT_TXPWR
 131

	)

54 
	#MDIO_PMA_10GBT_SNR
 133

	)

56 
	#MDIO_PMA_10GBR_FECABLE
 170

	)

57 
	#MDIO_PCS_10GBX_STAT1
 24

	)

58 
	#MDIO_PCS_10GBRT_STAT1
 32

	)

59 
	#MDIO_PCS_10GBRT_STAT2
 33

	)

60 
	#MDIO_AN_10GBT_CTRL
 32

	)

61 
	#MDIO_AN_10GBT_STAT
 33

	)

62 
	#MDIO_AN_EEE_ADV
 60

	)

65 
	#MDIO_PMA_LASI_RXCTRL
 0x9000

	)

66 
	#MDIO_PMA_LASI_TXCTRL
 0x9001

	)

67 
	#MDIO_PMA_LASI_CTRL
 0x9002

	)

68 
	#MDIO_PMA_LASI_RXSTAT
 0x9003

	)

69 
	#MDIO_PMA_LASI_TXSTAT
 0x9004

	)

70 
	#MDIO_PMA_LASI_STAT
 0x9005

	)

74 
	#MDIO_CTRL1_SPEEDSELEXT
 (
BMCR_SPEED1000
 | 
BMCR_SPEED100
)

	)

76 
	#MDIO_CTRL1_SPEEDSEL
 (
MDIO_CTRL1_SPEEDSELEXT
 | 0x003c)

	)

77 
	#MDIO_CTRL1_FULLDPLX
 
BMCR_FULLDPLX


	)

78 
	#MDIO_CTRL1_LPOWER
 
BMCR_PDOWN


	)

79 
	#MDIO_CTRL1_RESET
 
BMCR_RESET


	)

80 
	#MDIO_PMA_CTRL1_LOOPBACK
 0x0001

	)

81 
	#MDIO_PMA_CTRL1_SPEED1000
 
BMCR_SPEED1000


	)

82 
	#MDIO_PMA_CTRL1_SPEED100
 
BMCR_SPEED100


	)

83 
	#MDIO_PCS_CTRL1_LOOPBACK
 
BMCR_LOOPBACK


	)

84 
	#MDIO_PHYXS_CTRL1_LOOPBACK
 
BMCR_LOOPBACK


	)

85 
	#MDIO_AN_CTRL1_RESTART
 
BMCR_ANRESTART


	)

86 
	#MDIO_AN_CTRL1_ENABLE
 
BMCR_ANENABLE


	)

87 
	#MDIO_AN_CTRL1_XNP
 0x2000

	)

90 
	#MDIO_CTRL1_SPEED10G
 (
MDIO_CTRL1_SPEEDSELEXT
 | 0x00)

	)

92 
	#MDIO_CTRL1_SPEED10P2B
 (
MDIO_CTRL1_SPEEDSELEXT
 | 0x04)

	)

95 
	#MDIO_STAT1_LPOWERABLE
 0x0002

	)

96 
	#MDIO_STAT1_LSTATUS
 
BMSR_LSTATUS


	)

97 
	#MDIO_STAT1_FAULT
 0x0080

	)

98 
	#MDIO_AN_STAT1_LPABLE
 0x0001

	)

99 
	#MDIO_AN_STAT1_ABLE
 
BMSR_ANEGCAPABLE


	)

100 
	#MDIO_AN_STAT1_RFAULT
 
BMSR_RFAULT


	)

101 
	#MDIO_AN_STAT1_COMPLETE
 
BMSR_ANEGCOMPLETE


	)

102 
	#MDIO_AN_STAT1_PAGE
 0x0040

	)

103 
	#MDIO_AN_STAT1_XNP
 0x0080

	)

106 
	#MDIO_SPEED_10G
 0x0001

	)

107 
	#MDIO_PMA_SPEED_2B
 0x0002

	)

108 
	#MDIO_PMA_SPEED_10P
 0x0004

	)

109 
	#MDIO_PMA_SPEED_1000
 0x0010

	)

110 
	#MDIO_PMA_SPEED_100
 0x0020

	)

111 
	#MDIO_PMA_SPEED_10
 0x0040

	)

112 
	#MDIO_PCS_SPEED_10P2B
 0x0002

	)

115 
	#MDIO_DEVS_PRESENT
(
devad
Ë(1 << (devad))

	)

116 
	#MDIO_DEVS_PMAPMD
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_PMAPMD
)

	)

117 
	#MDIO_DEVS_WIS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_WIS
)

	)

118 
	#MDIO_DEVS_PCS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_PCS
)

	)

119 
	#MDIO_DEVS_PHYXS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_PHYXS
)

	)

120 
	#MDIO_DEVS_DTEXS
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_DTEXS
)

	)

121 
	#MDIO_DEVS_TC
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_TC
)

	)

122 
	#MDIO_DEVS_AN
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_AN
)

	)

123 
	#MDIO_DEVS_C22EXT
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_C22EXT
)

	)

124 
	#MDIO_DEVS_VEND1
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_VEND1
)

	)

125 
	#MDIO_DEVS_VEND2
 
	`MDIO_DEVS_PRESENT
(
MDIO_MMD_VEND2
)

	)

127 
	#MDIO_DEVS_LINK
 (
MDIO_DEVS_PMAPMD
 | \

128 
MDIO_DEVS_WIS
 | \

129 
MDIO_DEVS_PCS
 | \

130 
MDIO_DEVS_PHYXS
 | \

131 
MDIO_DEVS_DTEXS
 | \

132 
MDIO_DEVS_AN
)

	)

135 
	#MDIO_PMA_CTRL2_TYPE
 0x000‡

	)

136 
	#MDIO_PMA_CTRL2_10GBCX4
 0x0000

	)

137 
	#MDIO_PMA_CTRL2_10GBEW
 0x0001

	)

138 
	#MDIO_PMA_CTRL2_10GBLW
 0x0002

	)

139 
	#MDIO_PMA_CTRL2_10GBSW
 0x0003

	)

140 
	#MDIO_PMA_CTRL2_10GBLX4
 0x0004

	)

141 
	#MDIO_PMA_CTRL2_10GBER
 0x0005

	)

142 
	#MDIO_PMA_CTRL2_10GBLR
 0x0006

	)

143 
	#MDIO_PMA_CTRL2_10GBSR
 0x0007

	)

144 
	#MDIO_PMA_CTRL2_10GBLRM
 0x0008

	)

145 
	#MDIO_PMA_CTRL2_10GBT
 0x0009

	)

146 
	#MDIO_PMA_CTRL2_10GBKX4
 0x000®

	)

147 
	#MDIO_PMA_CTRL2_10GBKR
 0x000b

	)

148 
	#MDIO_PMA_CTRL2_1000BT
 0x000¯

	)

149 
	#MDIO_PMA_CTRL2_1000BKX
 0x000d

	)

150 
	#MDIO_PMA_CTRL2_100BTX
 0x000ê

	)

151 
	#MDIO_PMA_CTRL2_10BT
 0x000‡

	)

152 
	#MDIO_PCS_CTRL2_TYPE
 0x0003

	)

153 
	#MDIO_PCS_CTRL2_10GBR
 0x0000

	)

154 
	#MDIO_PCS_CTRL2_10GBX
 0x0001

	)

155 
	#MDIO_PCS_CTRL2_10GBW
 0x0002

	)

156 
	#MDIO_PCS_CTRL2_10GBT
 0x0003

	)

159 
	#MDIO_STAT2_RXFAULT
 0x0400

	)

160 
	#MDIO_STAT2_TXFAULT
 0x0800

	)

161 
	#MDIO_STAT2_DEVPRST
 0xc000

	)

162 
	#MDIO_STAT2_DEVPRST_VAL
 0x8000

	)

163 
	#MDIO_PMA_STAT2_LBABLE
 0x0001

	)

164 
	#MDIO_PMA_STAT2_10GBEW
 0x0002

	)

165 
	#MDIO_PMA_STAT2_10GBLW
 0x0004

	)

166 
	#MDIO_PMA_STAT2_10GBSW
 0x0008

	)

167 
	#MDIO_PMA_STAT2_10GBLX4
 0x0010

	)

168 
	#MDIO_PMA_STAT2_10GBER
 0x0020

	)

169 
	#MDIO_PMA_STAT2_10GBLR
 0x0040

	)

170 
	#MDIO_PMA_STAT2_10GBSR
 0x0080

	)

171 
	#MDIO_PMD_STAT2_TXDISAB
 0x0100

	)

172 
	#MDIO_PMA_STAT2_EXTABLE
 0x0200

	)

173 
	#MDIO_PMA_STAT2_RXFLTABLE
 0x1000

	)

174 
	#MDIO_PMA_STAT2_TXFLTABLE
 0x2000

	)

175 
	#MDIO_PCS_STAT2_10GBR
 0x0001

	)

176 
	#MDIO_PCS_STAT2_10GBX
 0x0002

	)

177 
	#MDIO_PCS_STAT2_10GBW
 0x0004

	)

178 
	#MDIO_PCS_STAT2_RXFLTABLE
 0x1000

	)

179 
	#MDIO_PCS_STAT2_TXFLTABLE
 0x2000

	)

182 
	#MDIO_PMD_TXDIS_GLOBAL
 0x0001

	)

183 
	#MDIO_PMD_TXDIS_0
 0x0002

	)

184 
	#MDIO_PMD_TXDIS_1
 0x0004

	)

185 
	#MDIO_PMD_TXDIS_2
 0x0008

	)

186 
	#MDIO_PMD_TXDIS_3
 0x0010

	)

189 
	#MDIO_PMD_RXDET_GLOBAL
 0x0001

	)

190 
	#MDIO_PMD_RXDET_0
 0x0002

	)

191 
	#MDIO_PMD_RXDET_1
 0x0004

	)

192 
	#MDIO_PMD_RXDET_2
 0x0008

	)

193 
	#MDIO_PMD_RXDET_3
 0x0010

	)

196 
	#MDIO_PMA_EXTABLE_10GCX4
 0x0001

	)

197 
	#MDIO_PMA_EXTABLE_10GBLRM
 0x0002

	)

198 
	#MDIO_PMA_EXTABLE_10GBT
 0x0004

	)

199 
	#MDIO_PMA_EXTABLE_10GBKX4
 0x0008

	)

200 
	#MDIO_PMA_EXTABLE_10GBKR
 0x0010

	)

201 
	#MDIO_PMA_EXTABLE_1000BT
 0x0020

	)

202 
	#MDIO_PMA_EXTABLE_1000BKX
 0x0040

	)

203 
	#MDIO_PMA_EXTABLE_100BTX
 0x0080

	)

204 
	#MDIO_PMA_EXTABLE_10BT
 0x0100

	)

207 
	#MDIO_PHYXS_LNSTAT_SYNC0
 0x0001

	)

208 
	#MDIO_PHYXS_LNSTAT_SYNC1
 0x0002

	)

209 
	#MDIO_PHYXS_LNSTAT_SYNC2
 0x0004

	)

210 
	#MDIO_PHYXS_LNSTAT_SYNC3
 0x0008

	)

211 
	#MDIO_PHYXS_LNSTAT_ALIGN
 0x1000

	)

214 
	#MDIO_PMA_10GBT_SWAPPOL_ABNX
 0x0001

	)

215 
	#MDIO_PMA_10GBT_SWAPPOL_CDNX
 0x0002

	)

216 
	#MDIO_PMA_10GBT_SWAPPOL_AREV
 0x0100

	)

217 
	#MDIO_PMA_10GBT_SWAPPOL_BREV
 0x0200

	)

218 
	#MDIO_PMA_10GBT_SWAPPOL_CREV
 0x0400

	)

219 
	#MDIO_PMA_10GBT_SWAPPOL_DREV
 0x0800

	)

222 
	#MDIO_PMA_10GBT_TXPWR_SHORT
 0x0001

	)

226 
	#MDIO_PMA_10GBT_SNR_BIAS
 0x8000

	)

227 
	#MDIO_PMA_10GBT_SNR_MAX
 127

	)

230 
	#MDIO_PMA_10GBR_FECABLE_ABLE
 0x0001

	)

231 
	#MDIO_PMA_10GBR_FECABLE_ERRABLE
 0x0002

	)

234 
	#MDIO_PCS_10GBRT_STAT1_BLKLK
 0x0001

	)

237 
	#MDIO_PCS_10GBRT_STAT2_ERR
 0x00ff

	)

238 
	#MDIO_PCS_10GBRT_STAT2_BER
 0x3f00

	)

241 
	#MDIO_AN_10GBT_CTRL_ADV10G
 0x1000

	)

244 
	#MDIO_AN_10GBT_STAT_LPTRR
 0x0200

	)

245 
	#MDIO_AN_10GBT_STAT_LPLTABLE
 0x0400

	)

246 
	#MDIO_AN_10GBT_STAT_LP10G
 0x0800

	)

247 
	#MDIO_AN_10GBT_STAT_REMOK
 0x1000

	)

248 
	#MDIO_AN_10GBT_STAT_LOCOK
 0x2000

	)

249 
	#MDIO_AN_10GBT_STAT_MS
 0x4000

	)

250 
	#MDIO_AN_10GBT_STAT_MSFLT
 0x8000

	)

253 
	#MDIO_AN_EEE_ADV_100TX
 0x0002

	)

254 
	#MDIO_AN_EEE_ADV_1000T
 0x0004

	)

257 
	#MDIO_PMA_LASI_RX_PHYXSLFLT
 0x0001

	)

258 
	#MDIO_PMA_LASI_RX_PCSLFLT
 0x0008

	)

259 
	#MDIO_PMA_LASI_RX_PMALFLT
 0x0010

	)

260 
	#MDIO_PMA_LASI_RX_OPTICPOWERFLT
 0x0020

	)

261 
	#MDIO_PMA_LASI_RX_WISLFLT
 0x0200

	)

264 
	#MDIO_PMA_LASI_TX_PHYXSLFLT
 0x0001

	)

265 
	#MDIO_PMA_LASI_TX_PCSLFLT
 0x0008

	)

266 
	#MDIO_PMA_LASI_TX_PMALFLT
 0x0010

	)

267 
	#MDIO_PMA_LASI_TX_LASERPOWERFLT
 0x0080

	)

268 
	#MDIO_PMA_LASI_TX_LASERTEMPFLT
 0x0100

	)

269 
	#MDIO_PMA_LASI_TX_LASERBICURRFLT
 0x0200

	)

272 
	#MDIO_PMA_LASI_LSALARM
 0x0001

	)

273 
	#MDIO_PMA_LASI_TXALARM
 0x0002

	)

274 
	#MDIO_PMA_LASI_RXALARM
 0x0004

	)

278 
	#MDIO_PHY_ID_C45
 0x8000

	)

279 
	#MDIO_PHY_ID_PRTAD
 0x03e0

	)

280 
	#MDIO_PHY_ID_DEVAD
 0x001f

	)

281 
	#MDIO_PHY_ID_C45_MASK
 \

282 (
MDIO_PHY_ID_C45
 | 
MDIO_PHY_ID_PRTAD
 | 
MDIO_PHY_ID_DEVAD
)

	)

284 
	#MDIO_PRTAD_NONE
 (-1)

	)

285 
	#MDIO_DEVAD_NONE
 (-1)

	)

286 
	#MDIO_EMULATE_C22
 4

	)

	@libethernet/src/uboot/mii.h

12 #i‚de‡
__LINUX_MII_H__


13 
	#__LINUX_MII_H__


	)

17 
	#MII_BMCR
 0x00

	)

18 
	#MII_BMSR
 0x01

	)

19 
	#MII_PHYSID1
 0x02

	)

20 
	#MII_PHYSID2
 0x03

	)

21 
	#MII_ADVERTISE
 0x04

	)

22 
	#MII_LPA
 0x05

	)

23 
	#MII_EXPANSION
 0x06

	)

24 
	#MII_CTRL1000
 0x09

	)

25 
	#MII_STAT1000
 0x0®

	)

26 
	#MII_ESTATUS
 0x0‡

	)

27 
	#MII_DCOUNTER
 0x12

	)

28 
	#MII_FCSCOUNTER
 0x13

	)

29 
	#MII_NWAYTEST
 0x14

	)

30 
	#MII_RERRCOUNTER
 0x15

	)

31 
	#MII_SREVISION
 0x16

	)

32 
	#MII_RESV1
 0x17

	)

33 
	#MII_LBRERROR
 0x18

	)

34 
	#MII_PHYADDR
 0x19

	)

35 
	#MII_RESV2
 0x1®

	)

36 
	#MII_TPISTATUS
 0x1b

	)

37 
	#MII_NCONFIG
 0x1¯

	)

40 
	#BMCR_RESV
 0x003‡

	)

41 
	#BMCR_SPEED1000
 0x0040

	)

42 
	#BMCR_CTST
 0x0080

	)

43 
	#BMCR_FULLDPLX
 0x0100

	)

44 
	#BMCR_ANRESTART
 0x0200

	)

45 
	#BMCR_ISOLATE
 0x0400

	)

46 
	#BMCR_PDOWN
 0x0800

	)

47 
	#BMCR_ANENABLE
 0x1000

	)

48 
	#BMCR_SPEED100
 0x2000

	)

49 
	#BMCR_LOOPBACK
 0x4000

	)

50 
	#BMCR_RESET
 0x8000

	)

53 
	#BMSR_ERCAP
 0x0001

	)

54 
	#BMSR_JCD
 0x0002

	)

55 
	#BMSR_LSTATUS
 0x0004

	)

56 
	#BMSR_ANEGCAPABLE
 0x0008

	)

57 
	#BMSR_RFAULT
 0x0010

	)

58 
	#BMSR_ANEGCOMPLETE
 0x0020

	)

59 
	#BMSR_RESV
 0x00c0

	)

60 
	#BMSR_ESTATEN
 0x0100

	)

61 
	#BMSR_100HALF2
 0x0200

	)

62 
	#BMSR_100FULL2
 0x0400

	)

63 
	#BMSR_10HALF
 0x0800

	)

64 
	#BMSR_10FULL
 0x1000

	)

65 
	#BMSR_100HALF
 0x2000

	)

66 
	#BMSR_100FULL
 0x4000

	)

67 
	#BMSR_100BASE4
 0x8000

	)

70 
	#ADVERTISE_SLCT
 0x001‡

	)

71 
	#ADVERTISE_CSMA
 0x0001

	)

72 
	#ADVERTISE_10HALF
 0x0020

	)

73 
	#ADVERTISE_1000XFULL
 0x0020

	)

74 
	#ADVERTISE_10FULL
 0x0040

	)

75 
	#ADVERTISE_1000XHALF
 0x0040

	)

76 
	#ADVERTISE_100HALF
 0x0080

	)

77 
	#ADVERTISE_1000XPAUSE
 0x0080

	)

78 
	#ADVERTISE_100FULL
 0x0100

	)

79 
	#ADVERTISE_1000XPSE_ASYM
 0x0100

	)

80 
	#ADVERTISE_100BASE4
 0x0200

	)

81 
	#ADVERTISE_PAUSE_CAP
 0x0400

	)

82 
	#ADVERTISE_PAUSE_ASYM
 0x0800

	)

83 
	#ADVERTISE_RESV
 0x1000

	)

84 
	#ADVERTISE_RFAULT
 0x2000

	)

85 
	#ADVERTISE_LPACK
 0x4000

	)

86 
	#ADVERTISE_NPAGE
 0x8000

	)

88 
	#ADVERTISE_FULL
 (
ADVERTISE_100FULL
 | 
ADVERTISE_10FULL
 | \

89 
ADVERTISE_CSMA
)

	)

90 
	#ADVERTISE_ALL
 (
ADVERTISE_10HALF
 | 
ADVERTISE_10FULL
 | \

91 
ADVERTISE_100HALF
 | 
ADVERTISE_100FULL
)

	)

94 
	#LPA_SLCT
 0x001‡

	)

95 
	#LPA_10HALF
 0x0020

	)

96 
	#LPA_1000XFULL
 0x0020

	)

97 
	#LPA_10FULL
 0x0040

	)

98 
	#LPA_1000XHALF
 0x0040

	)

99 
	#LPA_100HALF
 0x0080

	)

100 
	#LPA_1000XPAUSE
 0x0080

	)

101 
	#LPA_100FULL
 0x0100

	)

102 
	#LPA_1000XPAUSE_ASYM
 0x0100

	)

103 
	#LPA_100BASE4
 0x0200

	)

104 
	#LPA_PAUSE_CAP
 0x0400

	)

105 
	#LPA_PAUSE_ASYM
 0x0800

	)

106 
	#LPA_RESV
 0x1000

	)

107 
	#LPA_RFAULT
 0x2000

	)

108 
	#LPA_LPACK
 0x4000

	)

109 
	#LPA_NPAGE
 0x8000

	)

111 
	#LPA_DUPLEX
 (
LPA_10FULL
 | 
LPA_100FULL
)

	)

112 
	#LPA_100
 (
LPA_100FULL
 | 
LPA_100HALF
 | 
LPA_100BASE4
)

	)

115 
	#EXPANSION_NWAY
 0x0001

	)

116 
	#EXPANSION_LCWP
 0x0002

	)

117 
	#EXPANSION_ENABLENPAGE
 0x0004

	)

118 
	#EXPANSION_NPCAPABLE
 0x0008

	)

119 
	#EXPANSION_MFAULTS
 0x0010

	)

120 
	#EXPANSION_RESV
 0xf„0

	)

122 
	#ESTATUS_1000_XFULL
 0x8000

	)

123 
	#ESTATUS_1000_XHALF
 0x4000

	)

124 
	#ESTATUS_1000_TFULL
 0x2000

	)

125 
	#ESTATUS_1000_THALF
 0x1000

	)

128 
	#NWAYTEST_RESV1
 0x00f‡

	)

129 
	#NWAYTEST_LOOPBACK
 0x0100

	)

130 
	#NWAYTEST_RESV2
 0x„00

	)

133 
	#ADVERTISE_1000FULL
 0x0200

	)

134 
	#ADVERTISE_1000HALF
 0x0100

	)

137 
	#LPA_1000LOCALRXOK
 0x2000

	)

138 
	#LPA_1000REMRXOK
 0x1000

	)

139 
	#LPA_1000FULL
 0x0800

	)

140 
	#LPA_1000HALF
 0x0400

	)

143 
	#FLOW_CTRL_TX
 0x01

	)

144 
	#FLOW_CTRL_RX
 0x02

	)

160 
ölöe
 
	$mii_nway_ªsu…
 (
√gŸüãd
)

162 
ªt
;

164 i‡(
√gŸüãd
 & 
LPA_100FULL
)

165 
ªt
 = 
LPA_100FULL
;

166 i‡(
√gŸüãd
 & 
LPA_100BASE4
)

167 
ªt
 = 
LPA_100BASE4
;

168 i‡(
√gŸüãd
 & 
LPA_100HALF
)

169 
ªt
 = 
LPA_100HALF
;

170 i‡(
√gŸüãd
 & 
LPA_10FULL
)

171 
ªt
 = 
LPA_10FULL
;

173 
ªt
 = 
LPA_10HALF
;

175  
ªt
;

176 
	}
}

187 
ölöe
 
	$mii_du∂ex
 (
du∂ex_lock
,

188 
√gŸüãd
)

190 i‡(
du∂ex_lock
)

192 i‡(
	`mii_nway_ªsu…
(
√gŸüãd
Ë& 
LPA_DUPLEX
)

195 
	}
}

	@libethernet/src/uboot/miiphy.h

38 #i‚de‡
_miùhy_h_


39 
	#_miùhy_h_


	)

41 
	~"comm⁄.h
"

42 
	~"li°.h
"

43 
	~"phy.h
"

45 
	sÀgacy_mii_dev
 {

46 (*
	mªad
)(c⁄° *
	mdev«me
, 
	maddr
,

47 
	mªg
, *
	mvÆue
);

48 (*
	mwrôe
)(c⁄° *
	mdev«me
, 
	maddr
,

49 
	mªg
, 
	mvÆue
);

52 
miùhy_ªad
(c⁄° *
dev«me
, 
addr
, 
ªg
,

53 *
vÆue
);

54 
miùhy_wrôe
(c⁄° *
dev«me
, 
addr
, 
ªg
,

55 
vÆue
);

56 
miùhy_öfo
(c⁄° *
dev«me
, 
addr
, *
oui
,

57 *
modñ
, *
ªv
);

58 
miùhy_ª£t
(c⁄° *
dev«me
, 
addr
);

59 
miùhy_•ìd
(c⁄° *
dev«me
, 
addr
);

60 
miùhy_du∂ex
(c⁄° *
dev«me
, 
addr
);

61 
miùhy_is_1000ba£_x
(c⁄° *
dev«me
, 
addr
);

62 #ifde‡
CONFIG_SYS_FAULT_ECHO_LINK_DOWN


63 
miùhy_lök
(c⁄° *
dev«me
, 
addr
);

66 
miùhy_öô
();

68 
miùhy_ªgi°î
(c⁄° *
dev«me
,

69 (*
ªad
)(c⁄° *
dev«me
, 
addr
,

70 
ªg
, *
vÆue
),

71 (*
wrôe
)(c⁄° *
dev«me
, 
addr
,

72 
ªg
, 
vÆue
));

74 
	`miùhy_£t_cuºít_dev
(c⁄° *
dev«me
);

75 c⁄° *
	`miùhy_gë_cuºít_dev
();

76 
mii_dev
 *
	`mdio_gë_cuºít_dev
();

77 
mii_dev
 *
	`miùhy_gë_dev_by_«me
(c⁄° *
dev«me
);

78 
phy_devi˚
 *
	`mdio_phydev_f‹_ëh«me
(c⁄° *
dev«me
);

80 
	`miùhy_li°dev
();

82 
mii_dev
 *
	`mdio_Æloc
();

83 
	`mdio_ªgi°î
(
mii_dev
 *
bus
);

84 
	`mdio_li°_devi˚s
();

86 #ifde‡
CONFIG_BITBANGMII


88 
	#BB_MII_DEVNAME
 "bb_miùhy"

	)

90 
	sbb_miùhy_bus
 {

91 
«me
[16];

92 (*
öô
)(
bb_miùhy_bus
 *
bus
);

93 (*
mdio_a˘ive
)(
bb_miùhy_bus
 *
bus
);

94 (*
mdio_åi°©e
)(
bb_miùhy_bus
 *
bus
);

95 (*
£t_mdio
)(
bb_miùhy_bus
 *
bus
, 
v
);

96 (*
gë_mdio
)(
bb_miùhy_bus
 *
bus
, *
v
);

97 (*
£t_mdc
)(
bb_miùhy_bus
 *
bus
, 
v
);

98 (*
dñay
)(
bb_miùhy_bus
 *
bus
);

99 #ifde‡
CONFIG_BITBANGMII_MULTI


100 *
¥iv
;

104 
bb_miùhy_bus
 
bb_miùhy_bu£s
[];

105 
bb_miùhy_bu£s_num
;

107 
	`bb_miùhy_öô
();

108 
	`bb_miùhy_ªad
(c⁄° *
dev«me
, 
addr
,

109 
ªg
, *
vÆue
);

110 
	`bb_miùhy_wrôe
(c⁄° *
dev«me
, 
addr
,

111 
ªg
, 
vÆue
);

115 
	#AUTO
 99

	)

116 
	#_1000BASET
 1000

	)

117 
	#_100BASET
 100

	)

118 
	#_10BASET
 10

	)

119 
	#HALF
 22

	)

120 
	#FULL
 44

	)

123 
	#MII_MIPSCR
 0x11

	)

126 
	#PHY_ANLPAR_PSB_802_3
 0x0001

	)

127 
	#PHY_ANLPAR_PSB_802_9
 0x0002

	)

130 
	#PHY_1000BTCR_1000FD
 0x0200

	)

131 
	#PHY_1000BTCR_1000HD
 0x0100

	)

134 
	#PHY_1000BTSR_MSCF
 0x8000

	)

135 
	#PHY_1000BTSR_MSCR
 0x4000

	)

136 
	#PHY_1000BTSR_LRS
 0x2000

	)

137 
	#PHY_1000BTSR_RRS
 0x1000

	)

138 
	#PHY_1000BTSR_1000FD
 0x0800

	)

139 
	#PHY_1000BTSR_1000HD
 0x0400

	)

142 
	#ESTATUS_1000XF
 0x8000

	)

143 
	#ESTATUS_1000XH
 0x4000

	)

	@libethernet/src/uboot/miiphyutil.c

33 
	~"comm⁄.h
"

34 
	~"miùhy.h
"

35 
	~"phy.h
"

37 
	~"li°.h
"

38 
	~"√t.h
"

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~"../unim∂emíãd.h
"

43 
	#BUG_ON
(
x
Ëdÿ{} 0)

	)

46 #unde‡
MII_DEBUG


48 #unde‡
debug


49 #ifde‡
MII_DEBUG


50 
	#debug
(
fmt
, 
¨gs
...Ë
	`¥ötf
(fmt, ##¨gs)

	)

52 
	#debug
(
fmt
, 
¨gs
...)

	)

55 
li°_hód
 
	gmii_devs
;

56 
mii_dev
 *
	gcuºít_mii
;

61 
mii_dev
 *
	$miùhy_gë_dev_by_«me
(c⁄° *
dev«me
)

63 
li°_hód
 *
íåy
;

64 
mii_dev
 *
dev
;

66 i‡(!
dev«me
) {

67 
	`¥ötf
("NULL deviceÇame!\n");

68  
NULL
;

71 
	`li°_f‹_óch
(
íåy
, &
mii_devs
) {

72 
dev
 = 
	`li°_íåy
(
íåy
, 
mii_dev
, 
lök
);

73 i‡(
	`°rcmp
(
dev
->
«me
, 
dev«me
) == 0)

74  
dev
;

77  
NULL
;

78 
	}
}

84 
	$miùhy_öô
()

86 
mii_devs
.
√xt
 = &mii_devs;

87 
mii_devs
.
¥ev
 = &mii_devs;

88 
cuºít_mii
 = 
NULL
;

89 
	}
}

91 
	$Àgacy_miùhy_ªad
(
mii_dev
 *
bus
, 
addr
, 
devad
, 
ªg
)

93 
vÆ
;

94 
ªt
;

95 
Àgacy_mii_dev
 *
ldev
 = 
bus
->
¥iv
;

97 
ªt
 = 
ldev
->
	`ªad
(
bus
->
«me
, 
addr
, 
ªg
, &
vÆ
);

99  
ªt
 ? -1 : ()
vÆ
;

100 
	}
}

102 
	$Àgacy_miùhy_wrôe
(
mii_dev
 *
bus
, 
addr
, 
devad
,

103 
ªg
, 
u16
 
vÆ
)

105 
Àgacy_mii_dev
 *
ldev
 = 
bus
->
¥iv
;

107  
ldev
->
	`wrôe
(
bus
->
«me
, 
addr
, 
ªg
, 
vÆ
);

108 
	}
}

115 
	$miùhy_ªgi°î
(c⁄° *
«me
,

116 (*
ªad
)(c⁄° *
dev«me
, 
addr
,

117 
ªg
, *
vÆue
),

118 (*
wrôe
)(c⁄° *
dev«me
, 
addr
,

119 
ªg
, 
vÆue
))

121 
mii_dev
 *
√w_dev
;

122 
Àgacy_mii_dev
 *
ldev
;

124 
	`BUG_ON
(
	`°æí
(
«me
Ë>
MDIO_NAME_LEN
);

127 
√w_dev
 = 
	`miùhy_gë_dev_by_«me
(
«me
);

128 i‡(
√w_dev
) {

129 
	`¥ötf
("miùhy_ªgi°î:Ç⁄ uniquêdevi˚Çamê'%s'\n", 
«me
);

134 
√w_dev
 = 
	`mdio_Æloc
();

135 
ldev
 = 
	`mÆloc
((*ldev));

137 i‡(
√w_dev
 =
NULL
 || 
ldev
 == NULL) {

138 
	`¥ötf
("miiphy_register: cannotállocate memory for '%s'\n",

139 
«me
);

144 
√w_dev
->
ªad
 = 
Àgacy_miùhy_ªad
;

145 
√w_dev
->
wrôe
 = 
Àgacy_miùhy_wrôe
;

146 
	`°∫˝y
(
√w_dev
->
«me
,Çame, 
MDIO_NAME_LEN
);

147 
√w_dev
->
«me
[
MDIO_NAME_LEN
 - 1] = 0;

148 
ldev
->
ªad
 =Ñead;

149 
ldev
->
wrôe
 = write;

150 
√w_dev
->
¥iv
 = 
ldev
;

152 
	`debug
("miiphy_register:ádded '%s',Ñead=0x%08lx, write=0x%08lx\n",

153 
√w_dev
->
«me
, 
ldev
->
ªad
,Üdev->
wrôe
);

156 
	`li°_add_èû
(&
√w_dev
->
lök
, &
mii_devs
);

158 i‡(!
cuºít_mii
)

159 
cuºít_mii
 = 
√w_dev
;

160 
	}
}

162 
mii_dev
 *
	$mdio_Æloc
()

164 
mii_dev
 *
bus
;

166 
bus
 = 
	`mÆloc
((*bus));

167 i‡(!
bus
)

168  
bus
;

170 
	`mem£t
(
bus
, 0, (*bus));

173 
	`INIT_LIST_HEAD
(&
bus
->
lök
);

175  
bus
;

176 
	}
}

178 
	$mdio_ªgi°î
(
mii_dev
 *
bus
)

180 i‡(!
bus
 || !bus->
«me
 || !bus->
ªad
 || !bus->
wrôe
)

184 i‡(
	`miùhy_gë_dev_by_«me
(
bus
->
«me
)) {

185 
	`¥ötf
("mdio_register:Çon unique deviceÇame '%s'\n",

186 
bus
->
«me
);

191 
	`li°_add_èû
(&
bus
->
lök
, &
mii_devs
);

193 i‡(!
cuºít_mii
)

194 
cuºít_mii
 = 
bus
;

197 
	}
}

199 
	$mdio_li°_devi˚s
()

201 
li°_hód
 *
íåy
;

203 
	`li°_f‹_óch
(
íåy
, &
mii_devs
) {

204 
i
;

205 
mii_dev
 *
bus
 = 
	`li°_íåy
(
íåy
, mii_dev, 
lök
);

207 
	`¥ötf
("%s:\n", 
bus
->
«me
);

209 
i
 = 0; i < 
PHY_MAX_ADDR
; i++) {

210 
phy_devi˚
 *
phydev
 = 
bus
->
phym≠
[
i
];

212 i‡(
phydev
) {

213 
	`¥ötf
("%d - %s", 
i
, 
phydev
->
drv
->
«me
);

215 i‡(
phydev
->
dev
)

216 
	`¥ötf
(" <--> %s\n", 
phydev
->
dev
->
«me
);

218 
	`¥ötf
("\n");

222 
	}
}

224 
	$miùhy_£t_cuºít_dev
(c⁄° *
dev«me
)

226 
mii_dev
 *
dev
;

228 
dev
 = 
	`miùhy_gë_dev_by_«me
(
dev«me
);

229 i‡(
dev
) {

230 
cuºít_mii
 = 
dev
;

234 
	`¥ötf
("Nÿsuch devi˚: %s\n", 
dev«me
);

237 
	}
}

239 
mii_dev
 *
	$mdio_gë_cuºít_dev
()

241  
cuºít_mii
;

242 
	}
}

244 
phy_devi˚
 *
	$mdio_phydev_f‹_ëh«me
(c⁄° *
ëh«me
)

246 
li°_hód
 *
íåy
;

247 
mii_dev
 *
bus
;

249 
	`li°_f‹_óch
(
íåy
, &
mii_devs
) {

250 
i
;

251 
bus
 = 
	`li°_íåy
(
íåy
, 
mii_dev
, 
lök
);

253 
i
 = 0; i < 
PHY_MAX_ADDR
; i++) {

254 i‡(!
bus
->
phym≠
[
i
] || !bus->phym≠[i]->
dev
)

257 i‡(
	`°rcmp
(
bus
->
phym≠
[
i
]->
dev
->
«me
, 
ëh«me
) == 0)

258  
bus
->
phym≠
[
i
];

262 
	`¥ötf
("%†i†nŸá know¿ëhî√t\n", 
ëh«me
);

263  
NULL
;

264 
	}
}

266 c⁄° *
	$miùhy_gë_cuºít_dev
()

268 i‡(
cuºít_mii
)

269  
cuºít_mii
->
«me
;

271  
NULL
;

272 
	}
}

274 
mii_dev
 *
	$miùhy_gë_a˘ive_dev
(c⁄° *
dev«me
)

277 i‡(
cuºít_mii
)

278 i‡(
	`°rcmp
(
cuºít_mii
->
«me
, 
dev«me
) == 0)

279  
cuºít_mii
;

282 i‡(
	`miùhy_£t_cuºít_dev
(
dev«me
))

283  
NULL
;

285  
cuºít_mii
;

286 
	}
}

298 
	$miùhy_ªad
(c⁄° *
dev«me
, 
addr
, 
ªg
,

299 *
vÆue
)

301 
mii_dev
 *
bus
;

302 
ªt
;

304 
bus
 = 
	`miùhy_gë_a˘ive_dev
(
dev«me
);

305 i‡(!
bus
)

308 
ªt
 = 
bus
->
	`ªad
(bus, 
addr
, 
MDIO_DEVAD_NONE
, 
ªg
);

309 i‡(
ªt
 < 0)

312 *
vÆue
 = ()
ªt
;

314 
	}
}

326 
	$miùhy_wrôe
(c⁄° *
dev«me
, 
addr
, 
ªg
,

327 
vÆue
)

329 
mii_dev
 *
bus
;

331 
bus
 = 
	`miùhy_gë_a˘ive_dev
(
dev«me
);

332 i‡(
bus
)

333  
bus
->
	`wrôe
(bus, 
addr
, 
MDIO_DEVAD_NONE
, 
ªg
, 
vÆue
);

336 
	}
}

342 
	$miùhy_li°dev
()

344 
li°_hód
 *
íåy
;

345 
mii_dev
 *
dev
;

347 
	`puts
("MII devices: ");

348 
	`li°_f‹_óch
(
íåy
, &
mii_devs
) {

349 
dev
 = 
	`li°_íåy
(
íåy
, 
mii_dev
, 
lök
);

350 
	`¥ötf
("'%s' ", 
dev
->
«me
);

352 
	`puts
("\n");

354 i‡(
cuºít_mii
)

355 
	`¥ötf
("Cuºíàdevi˚: '%s'\n", 
cuºít_mii
->
«me
);

356 
	}
}

371 
	$miùhy_öfo
(c⁄° *
dev«me
, 
addr
, *
oui
,

372 *
modñ
, *
ªv
)

374 
ªg
 = 0;

375 
tmp
;

377 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_PHYSID2
, &
tmp
) != 0) {

378 
	`debug
("PHY IDÑegister 2Ñead failed\n");

381 
ªg
 = 
tmp
;

383 
	`debug
("MII_PHYSID2 @ 0x%x = 0x%04x\n", 
addr
, 
ªg
);

385 i‡(
ªg
 == 0xFFFF) {

390 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_PHYSID1
, &
tmp
) != 0) {

391 
	`debug
("PHY IDÑegister 1Ñead failed\n");

394 
ªg
 |
tmp
 << 16;

395 
	`debug
("PHY_PHYIDR[1,2] @ 0x%x = 0x%08x\n", 
addr
, 
ªg
);

397 *
oui
 = (
ªg
 >> 10);

398 *
modñ
 = ()((
ªg
 >> 4) & 0x0000003F);

399 *
ªv
 = ()(
ªg
 & 0x0000000F);

401 
	}
}

403 #i‚de‡
CONFIG_PHYLIB


413 
	$miùhy_ª£t
(c⁄° *
dev«me
, 
addr
)

415 
ªg
;

416 
timeout
 = 500;

418 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_BMCR
, &
ªg
) != 0) {

419 
	`debug
("PHY statusÑead failed\n");

422 i‡(
	`miùhy_wrôe
(
dev«me
, 
addr
, 
MII_BMCR
, 
ªg
 | 
BMCR_RESET
) != 0) {

423 
	`debug
("PHYÑeset failed\n");

426 #ifde‡
CONFIG_PHY_RESET_DELAY


427 
	`udñay
(
CONFIG_PHY_RESET_DELAY
);

434 
ªg
 = 0x8000;

435 ((
ªg
 & 0x8000Ë!0Ë&& 
timeout
--) {

436 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_BMCR
, &
ªg
) != 0) {

437 
	`debug
("PHY statusÑead failed\n");

440 
	`udñay
(1000);

442 i‡((
ªg
 & 0x8000) == 0) {

445 
	`puts
("PHYÑesetÅimed out\n");

449 
	}
}

456 
	$miùhy_•ìd
(c⁄° *
dev«me
, 
addr
)

458 
u16
 
bm¸
, 
™Õ¨
;

460 #i‡
	`deföed
(
CONFIG_PHY_GIGE
)

461 
u16
 
bt§
;

467 i‡(
	`miùhy_is_1000ba£_x
(
dev«me
, 
addr
))

468  
_1000BASET
;

474 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_STAT1000
, &
bt§
)) {

475 
	`¥ötf
("PHY 1000BT status");

476 
miùhy_ªad_Áûed
;

478 i‡(
bt§
 != 0xFFFF &&

479 (
bt§
 & (
PHY_1000BTSR_1000FD
 | 
PHY_1000BTSR_1000HD
)))

480  
_1000BASET
;

484 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_BMCR
, &
bm¸
)) {

485 
	`¥ötf
("PHY speed");

486 
miùhy_ªad_Áûed
;

489 i‡(
bm¸
 & 
BMCR_ANENABLE
) {

491 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_LPA
, &
™Õ¨
)) {

492 
	`¥ötf
("PHY AN speed");

493 
miùhy_ªad_Áûed
;

495  (
™Õ¨
 & 
LPA_100
Ë? 
_100BASET
 : 
_10BASET
;

498  (
bm¸
 & 
BMCR_SPEED100
Ë? 
_100BASET
 : 
_10BASET
;

500 
miùhy_ªad_Áûed
:

501 
	`¥ötf
("Ñead failed,ássuming 10BASE-T\n");

502  
_10BASET
;

503 
	}
}

509 
	$miùhy_du∂ex
(c⁄° *
dev«me
, 
addr
)

511 
u16
 
bm¸
, 
™Õ¨
;

513 #i‡
	`deföed
(
CONFIG_PHY_GIGE
)

514 
u16
 
bt§
;

517 i‡(
	`miùhy_is_1000ba£_x
(
dev«me
, 
addr
)) {

519 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_LPA
, &
™Õ¨
)) {

520 
	`¥ötf
("1000BASE-X PHY AN duplex");

521 
miùhy_ªad_Áûed
;

528 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_STAT1000
, &
bt§
)) {

529 
	`¥ötf
("PHY 1000BT status");

530 
miùhy_ªad_Áûed
;

532 i‡(
bt§
 != 0xFFFF) {

533 i‡(
bt§
 & 
PHY_1000BTSR_1000FD
) {

534  
FULL
;

535 } i‡(
bt§
 & 
PHY_1000BTSR_1000HD
) {

536  
HALF
;

542 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_BMCR
, &
bm¸
)) {

543 
	`puts
("PHY duplex");

544 
miùhy_ªad_Áûed
;

547 i‡(
bm¸
 & 
BMCR_ANENABLE
) {

549 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_LPA
, &
™Õ¨
)) {

550 
	`puts
("PHY AN duplex");

551 
miùhy_ªad_Áûed
;

553  (
™Õ¨
 & (
LPA_10FULL
 | 
LPA_100FULL
)) ?

554 
FULL
 : 
HALF
;

557  (
bm¸
 & 
BMCR_FULLDPLX
Ë? 
FULL
 : 
HALF
;

559 
miùhy_ªad_Áûed
:

560 
	`¥ötf
("Ñead failed,ássuming half duplex\n");

561  
HALF
;

562 
	}
}

569 
	$miùhy_is_1000ba£_x
(c⁄° *
dev«me
, 
addr
)

571 #i‡
	`deföed
(
CONFIG_PHY_GIGE
)

572 
u16
 
ex§
;

574 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_ESTATUS
, &
ex§
)) {

575 
	`¥ötf
("PHYÉxtended statusÑead failed,ássumingÇo "

579  0 !(
ex§
 & (
ESTATUS_1000XF
 | 
ESTATUS_1000XH
));

583 
	}
}

585 #ifde‡
CONFIG_SYS_FAULT_ECHO_LINK_DOWN


590 
	$miùhy_lök
(c⁄° *
dev«me
, 
addr
)

592 
ªg
;

595 ()
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_BMSR
, &
ªg
);

596 i‡(
	`miùhy_ªad
(
dev«me
, 
addr
, 
MII_BMSR
, &
ªg
)) {

597 
	`puts
("MII_BMSRÑead failed,ássumingÇoÜink\n");

602 i‡((
ªg
 & 
BMSR_LSTATUS
) != 0) {

607 
	}
}

	@libethernet/src/uboot/net.h

16 #i‚de‡
__NET_H__


17 
	#__NET_H__


	)

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~"c⁄fig.h
"

22 
	~"../unim∂emíãd.h
"

23 
	~"phy.h
"

25 
	#DEBUG_LL_STATE
 0

	)

26 
	#DEBUG_DEV_PKT
 0

	)

27 
	#DEBUG_NET_PKT
 0

	)

28 
	#DEBUG_INT_STATE
 0

	)

36 #ifde‡
CONFIG_SYS_RX_ETH_BUFFER


37 
	#PKTBUFSRX
 
CONFIG_SYS_RX_ETH_BUFFER


	)

39 
	#PKTBUFSRX
 4

	)

42 
	#PKTALIGN
 
ARCH_DMA_MINALIGN


	)

45 
	sö_addr
 {

46 
__be32
 
	ms_addr
;

57 
	trxh™d_f
(
	tuch¨
 *
	tpkt
, 
	tdp‹t
,

58 
	tö_addr
 
	tsù
, 
	t•‹t
,

59 
	tÀn
);

71 
	trxh™d_icmp_f
(
	tty≥
, 
	tcode
, 
	tdp‹t
,

72 
	tö_addr
 
	tsù
, 
	t•‹t
, 
	tuch¨
 *
	tpkt
, 
	tÀn
);

77 
	tth™d_f
();

79 
	eëh_°©e_t
 {

80 
	mETH_STATE_INIT
,

81 
	mETH_STATE_PASSIVE
,

82 
	mETH_STATE_ACTIVE


85 #ifde‡
CONFIG_DM_ETH


94 
	sëh_pd©a
 {

95 
phys_addr_t
 
	mioba£
;

96 
	míëaddr
[6];

97 
	mphy_öãrÁ˚
;

98 
	mmax_•ìd
;

101 
	eëh_ªcv_Êags
 {

106 
	mETH_RECV_CHECK_DEVICE
 = 1 << 0,

135 
	sëh_›s
 {

136 (*
	m°¨t
)(
udevi˚
 *
	mdev
);

137 (*
	m£nd
)(
udevi˚
 *
	mdev
, *
	m∑ckë
, 
	mÀngth
);

138 (*
	mªcv
)(
udevi˚
 *
	mdev
, 
	mÊags
, 
uch¨
 **
	m∑ckëp
);

139 (*
	m‰ì_pkt
)(
udevi˚
 *
	mdev
, 
uch¨
 *
	m∑ckë
, 
	mÀngth
);

140 (*
	m°›
)(
udevi˚
 *
	mdev
);

141 #ifde‡
CONFIG_MCAST_TFTP


142 (*
	mmˇ°
)(
udevi˚
 *
	mdev
, c⁄° 
u8
 *
	míëaddr
, 
	mjoö
);

144 (*
	mwrôe_hwaddr
)(
udevi˚
 *
	mdev
);

145 (*
	mªad_rom_hwaddr
)(
udevi˚
 *
	mdev
);

148 
	#ëh_gë_›s
(
dev
Ë((
ëh_›s
 *)(dev)->
drivî
->
›s
)

	)

150 
udevi˚
 *
ëh_gë_dev
();

155 
udevi˚
 *
ëh_gë_dev_by_«me
(c⁄° *
dev«me
);

156 *
ëh_gë_ëhaddr
();

159 
ëh_is_a˘ive
(
udevi˚
 *
dev
);

160 
ëh_öô_°©e_⁄ly
();

161 
ëh_hÆt_°©e_⁄ly
();

164 #i‚de‡
CONFIG_DM_ETH


165 
	sëh_devi˚
 {

166 
	m«me
[16];

167 
	míëaddr
[6];

168 
phys_addr_t
 
	mioba£
;

169 
	m°©e
;

171 (*
	möô
)(
	mëh_devi˚
 *);

172 (*
	m£nd
)(
	mëh_devi˚
 *, *
	m∑ckë
, 
	mÀngth
);

173 (*
	mªcv
)(
	mëh_devi˚
 *);

174 (*
	mhÆt
)(
	mëh_devi˚
 *);

175 #ifde‡
CONFIG_MCAST_TFTP


176 (*
	mmˇ°
)(
	mëh_devi˚
 *, c⁄° 
u8
 *
	míëaddr
, u8 
	m£t
);

178 (*
	mwrôe_hwaddr
)(
	mëh_devi˚
 *);

179 
ëh_devi˚
 *
	m√xt
;

180 
	mödex
;

181 *
	m¥iv
;

184 
ëh_ªgi°î
(
ëh_devi˚
 *
dev
);

185 
ëh_uƒegi°î
(
ëh_devi˚
 *
dev
);

187 
ëh_devi˚
 *
ëh_cuºít
;

189 
__Æways_ölöe
 
ëh_devi˚
 *
	$ëh_gë_dev
()

191  
ëh_cuºít
;

192 
	}
}

193 
ëh_devi˚
 *
ëh_gë_dev_by_«me
(c⁄° *
dev«me
);

194 
ëh_devi˚
 *
ëh_gë_dev_by_ödex
(
ödex
);

197 
ölöe
 *
	$ëh_gë_ëhaddr
()

199 i‡(
ëh_cuºít
)

200  
ëh_cuºít
->
íëaddr
;

201  
NULL
;

202 
	}
}

205 
ëh_is_a˘ive
(
ëh_devi˚
 *
dev
);

207 
__Æways_ölöe
 
	$ëh_öô_°©e_⁄ly
()

209 
	`ëh_gë_dev
()->
°©e
 = 
ETH_STATE_ACTIVE
;

212 
	}
}

214 
__Æways_ölöe
 
	$ëh_hÆt_°©e_⁄ly
()

216 
	`ëh_gë_dev
()->
°©e
 = 
ETH_STATE_PASSIVE
;

217 
	}
}

228 
ëh_wrôe_hwaddr
(
ëh_devi˚
 *
dev
, c⁄° *
ba£_«me
,

229 
ëh_numbî
);

231 
usb_ëh_öôülize
(
bd_t
 *
bi
);

234 
ëh_öôülize
();

235 
ëh_åy_™Ÿhî
(
fú°_ª°¨t
);

236 
ëh_£t_cuºít
();

238 
ëh_gë_dev_ödex
();

239 
ëh_∑r£_íëaddr
(c⁄° *
addr
, 
uch¨
 *
íëaddr
);

240 
ëh_gëív_íëaddr
(c⁄° *
«me
, 
uch¨
 *
íëaddr
);

241 
ëh_£ãnv_íëaddr
(c⁄° *
«me
, c⁄° 
uch¨
 *
íëaddr
);

256 
ëh_£ãnv_íëaddr_by_ödex
(c⁄° *
ba£_«me
, 
ödex
,

257 
uch¨
 *
íëaddr
);

269 
ëh_gëív_íëaddr_by_ödex
(c⁄° *
ba£_«me
, 
ödex
,

270 
uch¨
 *
íëaddr
);

272 
ëh_öô
();

273 
ëh_£nd
(*
∑ckë
, 
Àngth
);

275 #i‡
deföed
(
CONFIG_API
Ë|| deföed(
CONFIG_EFI_LOADER
)

276 
ëh_ª˚ive
(*
∑ckë
, 
Àngth
);

277 (*
push_∑ckë
)(*
∑ckë
, 
Àngth
);

279 
	`ëh_rx
();

280 
	`ëh_hÆt
();

281 c⁄° *
	`ëh_gë_«me
();

283 #ifde‡
CONFIG_MCAST_TFTP


284 
	`ëh_mˇ°_joö
(
ö_addr
 
mˇ°_addr
, 
joö
);

285 
u32
 
	`ëhî_¸c
(
size_t
 
Àn
, c⁄° *
p
);

298 
	sëhî√t_hdr
 {

299 
u8
 
ë_de°
[6];

300 
u8
 
ë_§c
[6];

301 
u16
 
ë_¥ŸÀn
;

305 
	#ETHER_HDR_SIZE
 ((
ëhî√t_hdr
))

	)

307 
	#ETH_FCS_LEN
 4

	)

309 
	se802_hdr
 {

310 
u8
 
ë_de°
[6];

311 
u8
 
ë_§c
[6];

312 
u16
 
ë_¥ŸÀn
;

313 
u8
 
ë_dßp
;

314 
u8
 
ë_sßp
;

315 
u8
 
ë_˘l
;

316 
u8
 
ë_¢≠1
;

317 
u8
 
ë_¢≠2
;

318 
u8
 
ë_¢≠3
;

319 
u16
 
ë_¥Ÿ
;

323 
	#E802_HDR_SIZE
 ((
e802_hdr
))

	)

328 
	svœn_ëhî√t_hdr
 {

329 
u8
 
vë_de°
[6];

330 
u8
 
vë_§c
[6];

331 
u16
 
vë_vœn_ty≥
;

332 
u16
 
vë_èg
;

333 
u16
 
vë_ty≥
;

337 
	#VLAN_ETHER_HDR_SIZE
 ((
vœn_ëhî√t_hdr
))

	)

339 
	#PROT_IP
 0x0800

	)

340 
	#PROT_ARP
 0x0806

	)

341 
	#PROT_RARP
 0x8035

	)

342 
	#PROT_VLAN
 0x8100

	)

343 
	#PROT_IPV6
 0x86dd

	)

344 
	#PROT_PPP_SES
 0x8864

	)

346 
	#IPPROTO_ICMP
 1

	)

347 
	#IPPROTO_UDP
 17

	)

352 
	sù_hdr
 {

353 
u8
 
ù_hl_v
;

354 
u8
 
ù_tos
;

355 
u16
 
ù_Àn
;

356 
u16
 
ù_id
;

357 
u16
 
ù_off
;

358 
u8
 
ù_âl
;

359 
u8
 
ù_p
;

360 
u16
 
ù_sum
;

361 
ö_addr
 
ù_§c
;

362 
ö_addr
 
ù_d°
;

365 
	#IP_OFFS
 0x1ff‡

	)

366 
	#IP_FLAGS
 0xe000

	)

367 
	#IP_FLAGS_RES
 0x8000

	)

368 
	#IP_FLAGS_DFRAG
 0x4000

	)

369 
	#IP_FLAGS_MFRAG
 0x2000

	)

371 
	#IP_HDR_SIZE
 ((
ù_hdr
))

	)

376 
	sù_udp_hdr
 {

377 
u8
 
ù_hl_v
;

378 
u8
 
ù_tos
;

379 
u16
 
ù_Àn
;

380 
u16
 
ù_id
;

381 
u16
 
ù_off
;

382 
u8
 
ù_âl
;

383 
u8
 
ù_p
;

384 
u16
 
ù_sum
;

385 
ö_addr
 
ù_§c
;

386 
ö_addr
 
ù_d°
;

387 
u16
 
udp_§c
;

388 
u16
 
udp_d°
;

389 
u16
 
udp_Àn
;

390 
u16
 
udp_xsum
;

393 
	#IP_UDP_HDR_SIZE
 ((
ù_udp_hdr
))

	)

394 
	#UDP_HDR_SIZE
 (
IP_UDP_HDR_SIZE
 - 
IP_HDR_SIZE
)

	)

399 
	s¨p_hdr
 {

400 
u16
 
¨_hrd
;

401 
	#ARP_ETHER
 1

	)

402 
u16
 
¨_¥o
;

403 
u8
 
¨_h 
;

404 
	#ARP_HLEN
 6

	)

405 
u8
 
¨_∂n
;

406 
	#ARP_PLEN
 4

	)

407 
u16
 
¨_›
;

408 
	#ARPOP_REQUEST
 1

	)

409 
	#ARPOP_REPLY
 2

	)

411 
	#RARPOP_REQUEST
 3

	)

412 
	#RARPOP_REPLY
 4

	)

419 
u8
 
¨_d©a
[0];

420 
	#¨_sha
 
¨_d©a
[0]

	)

421 
	#¨_•a
 
¨_d©a
[
ARP_HLEN
]

	)

422 
	#¨_tha
 
¨_d©a
[
ARP_HLEN
 + 
ARP_PLEN
]

	)

423 
	#¨_ça
 
¨_d©a
[
ARP_HLEN
 + 
ARP_PLEN
 + ARP_HLEN]

	)

425 
u8
 
¨_sha
[];

426 
u8
 
¨_•a
[];

427 
u8
 
¨_tha
[];

428 
u8
 
¨_ça
[];

432 
	#ARP_HDR_SIZE
 (8+20Ë

	)

437 
	#ICMP_ECHO_REPLY
 0

	)

438 
	#ICMP_NOT_REACH
 3

	)

439 
	#ICMP_REDIRECT
 5

	)

440 
	#ICMP_ECHO_REQUEST
 8

	)

443 
	#ICMP_REDIR_NET
 0

	)

444 
	#ICMP_REDIR_HOST
 1

	)

447 
	#ICMP_NOT_REACH_PORT
 3

	)

449 
	sicmp_hdr
 {

450 
u8
 
ty≥
;

451 
u8
 
code
;

452 
u16
 
checksum
;

455 
u16
 
id
;

456 
u16
 
£quí˚
;

457 } 
echo
;

458 
u32
 
g©eway
;

460 
u16
 
unu£d
;

461 
u16
 
mtu
;

462 } 
‰ag
;

463 
u8
 
d©a
[0];

464 } 
un
;

467 
	#ICMP_HDR_SIZE
 ((
icmp_hdr
))

	)

468 
	#IP_ICMP_HDR_SIZE
 (
IP_HDR_SIZE
 + 
ICMP_HDR_SIZE
)

	)

477 
	#PKTSIZE
 1522

	)

478 
	#PKTSIZE_ALIGN
 1536

	)

486 
	#RINGSZ
 4

	)

487 
	#RINGSZ_LOG2
 2

	)

501 
ö_addr
 
√t_g©eway
;

502 
ö_addr
 
√t_√tmask
;

504 
ö_addr
 
√t_dns_£rvî
;

505 #i‡
	`deföed
(
CONFIG_BOOTP_DNS2
)

507 
ö_addr
 
√t_dns_£rvî2
;

509 
√t_nis_domaö
[32];

510 
√t_ho°«me
[32];

511 
√t_roŸ_∑th
[64];

513 
u8
 
√t_ëhaddr
[6];

514 
u8
 
√t_£rvî_ëhaddr
[6];

515 
ö_addr
 
√t_ù
;

516 
ö_addr
 
√t_£rvî_ù
;

517 
uch¨
 *
√t_tx_∑ckë
;

518 
uch¨
 *
√t_rx_∑ckës
[
PKTBUFSRX
];

519 
uch¨
 *
√t_rx_∑ckë
;

520 
√t_rx_∑ckë_Àn
;

521 c⁄° 
u8
 
√t_bˇ°_ëhaddr
[6];

522 c⁄° 
u8
 
√t_nuŒ_ëhaddr
[6];

524 
	#VLAN_NONE
 4095

	)

525 
	#VLAN_IDMASK
 0x0ff‡

	)

526 
ush‹t
 
√t_our_vœn
;

527 
ush‹t
 
√t_«tive_vœn
;

529 
√t_ª°¨t_wøp
;

531 
	e¥Ÿo_t
 {

532 
BOOTP
, 
RARP
, 
ARP
, 
TFTPGET
, 
DHCP
, 
PING
, 
DNS
, 
NFS
, 
CDP
, 
NETCONS
, 
SNTP
,

533 
TFTPSRV
, 
TFTPPUT
, 
LINKLOCAL


536 
√t_boŸ_fûe_«me
[1024];

538 
u32
 
√t_boŸ_fûe_size
;

540 
u32
 
√t_boŸ_fûe_ex≥˘ed_size_ö_blocks
;

542 #i‡
	`deföed
(
CONFIG_CMD_DNS
)

543 *
√t_dns_ªsﬁve
;

544 *
√t_dns_ív_v¨
;

547 #i‡
	`deföed
(
CONFIG_CMD_PING
)

548 
ö_addr
 
√t_pög_ù
;

551 #i‡
	`deföed
(
CONFIG_CMD_CDP
)

553 
ush‹t
 
cdp_«tive_vœn
;

554 
ush‹t
 
cdp_≠∂ün˚_vœn
;

559 
ölöe
 
	$is_cdp_∑ckë
(c⁄° 
uch¨
 *
ëhaddr
)

561 c⁄° 
u8
 
√t_cdp_ëhaddr
[6];

563  
	`memcmp
(
ëhaddr
, 
√t_cdp_ëhaddr
, 6) == 0;

564 
	}
}

567 #i‡
deföed
(
CONFIG_CMD_SNTP
)

568 
ö_addr
 
√t_¡p_£rvî
;

569 
√t_¡p_time_off£t
;

572 #i‡
deföed
(
CONFIG_MCAST_TFTP
)

573 
ö_addr
 
√t_mˇ°_addr
;

577 
√t_öô
();

578 
√t_lo›
(
¥Ÿo_t
);

581 
√t_°¨t_agaö
();

584 
√t_ëh_hdr_size
();

587 
√t_£t_ëhî
(
uch¨
 *
xë
, c⁄° uch¨ *
de°_ëhaddr
, 
uöt
 
¥Ÿ
);

588 
√t_upd©e_ëhî
(
ëhî√t_hdr
 *
ë
, 
uch¨
 *
addr
, 
uöt
 
¥Ÿ
);

591 
√t_£t_ù_hódî
(
uch¨
 *
pkt
, 
ö_addr
 
de°
, ö_add∏
sour˚
);

592 
√t_£t_udp_hódî
(
uch¨
 *
pkt
, 
ö_addr
 
de°
, 
dp‹t
,

593 
•‹t
, 
Àn
);

602 
compuã_ù_checksum
(c⁄° *
addr
, 
nbyãs
);

612 
add_ù_checksums
(
off£t
, 
sum
, 
√w_sum
);

623 
ù_checksum_ok
(c⁄° *
addr
, 
nbyãs
);

626 
rxh™d_f
 *
√t_gë_udp_h™dÀr
();

627 
√t_£t_udp_h™dÀr
(
rxh™d_f
 *);

628 
rxh™d_f
 *
√t_gë_¨p_h™dÀr
();

629 
√t_£t_¨p_h™dÀr
(
rxh™d_f
 *);

630 
√t_£t_icmp_h™dÀr
(
rxh™d_icmp_f
 *
f
);

631 
√t_£t_timeout_h™dÀr
(
ul⁄g
, 
th™d_f
 *);

634 
	e√t_lo›_°©e
 {

635 
	mNETLOOP_CONTINUE
,

636 
	mNETLOOP_RESTART
,

637 
	mNETLOOP_SUCCESS
,

638 
	mNETLOOP_FAIL


640 
√t_lo›_°©e
 
√t_°©e
;

642 
ölöe
 
	$√t_£t_°©e
(
√t_lo›_°©e
 
°©e
)

644 
√t_°©e
 = 
°©e
;

645 
	}
}

648 
ölöe
 
	$√t_£nd_∑ckë
(
uch¨
 *
pkt
, 
Àn
)

651 (Ë
	`ëh_£nd
(
pkt
, 
Àn
);

652 
	}
}

664 
√t_£nd_udp_∑ckë
(
uch¨
 *
ëhî
, 
ö_addr
 
de°
, 
dp‹t
,

665 
•‹t
, 
∑ylﬂd_Àn
);

668 
ëhif_¥o˚ss_ª˚ived_∑ckë
(
uch¨
 *
ö_∑ckë
, 
Àn
);

670 #ifde‡
CONFIG_NETCONSOLE


671 
nc_°¨t
();

672 
nc_öput_∑ckë
(
uch¨
 *
pkt
, 
ö_addr
 
§c_ù
, 
de°_p‹t
,

673 
§c_p‹t
, 
Àn
);

676 
__Æways_ölöe
 
	$ëh_is_⁄_dem™d_öô
()

678 #ifde‡
CONFIG_NETCONSOLE


679 
¥Ÿo_t
 
√t_lo›_œ°_¥Ÿocﬁ
;

681  
√t_lo›_œ°_¥Ÿocﬁ
 !
NETCONS
;

685 
	}
}

687 
ölöe
 
	$ëh_£t_œ°_¥Ÿocﬁ
(
¥Ÿocﬁ
)

689 #ifde‡
CONFIG_NETCONSOLE


690 
¥Ÿo_t
 
√t_lo›_œ°_¥Ÿocﬁ
;

692 
√t_lo›_œ°_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

694 
	}
}

700 
√t_auto_lﬂd
();

710 
ölöe
 
ö_addr
 
	$√t_ªad_ù
(*
‰om
)

712 
ö_addr
 
ù
;

714 
	`mem˝y
((*)&
ù
, (*)
‰om
, (ip));

715  
ù
;

716 
	}
}

719 
ölöe
 
u32
 
	$√t_ªad_u32
(
u32
 *
‰om
)

721 
u32
 
l
;

723 
	`mem˝y
((*)&
l
, (*)
‰om
, (l));

724  
l
;

725 
	}
}

728 
ölöe
 
	$√t_wrôe_ù
(*
to
, 
ö_addr
 
ù
)

730 
	`mem˝y
(
to
, (*)&
ù
, (ip));

731 
	}
}

734 
ölöe
 
	$√t_c›y_ù
(*
to
, *
‰om
)

736 
	`mem˝y
((*)
to
, 
‰om
, (
ö_addr
));

737 
	}
}

740 
ölöe
 
	$√t_c›y_u32
(
u32
 *
to
, u32 *
‰om
)

742 
	`mem˝y
((*)
to
, (*)
‰om
, (
u32
));

743 
	}
}

751 
ölöe
 
	$is_zîo_ëhaddr
(c⁄° 
u8
 *
addr
)

753  !(
addr
[0] |áddr[1] |áddr[2] |áddr[3] |áddr[4] |áddr[5]);

754 
	}
}

763 
ölöe
 
	$is_mu…iˇ°_ëhaddr
(c⁄° 
u8
 *
addr
)

765  0x01 & 
addr
[0];

766 
	}
}

774 
ölöe
 
	$is_brﬂdˇ°_ëhaddr
(c⁄° 
u8
 *
addr
)

776  (
addr
[0] &áddr[1] &áddr[2] &áddr[3] &áddr[4] &áddr[5]) ==

778 
	}
}

789 
ölöe
 
	$is_vÆid_ëhaddr
(c⁄° 
u8
 *
addr
)

793  !
	`is_mu…iˇ°_ëhaddr
(
addr
Ë&& !
	`is_zîo_ëhaddr
(addr);

794 
	}
}

803 
ölöe
 
	$√t_øndom_ëhaddr
(
uch¨
 *
addr
)

805 
i
;

806 
£ed
 = 
	`øndom
();

808 
i
 = 0; i < 6; i++)

809 
addr
[
i
] = 
	`ønd_r
(&
£ed
);

811 
addr
[0] &= 0xfe;

812 
addr
[0] |= 0x02;

813 
	}
}

816 
ù_to_°rög
(
ö_addr
 
x
, *
s
);

819 
ö_addr
 
°rög_to_ù
(c⁄° *
s
);

822 
vœn_to_°rög
(
ush‹t
 
x
, *
s
);

825 
ush‹t
 
°rög_to_vœn
(c⁄° *
s
);

828 
ush‹t
 
gëív_vœn
(*);

831 
c›y_fûíame
(*
d°
, c⁄° *
§c
, 
size
);

834 
øndom_p‹t
();

847 
upd©e_t·p
(
ul⁄g
 
addr
, *
öãrÁ˚
, *
dev°rög
);

	@libethernet/src/uboot/netdev.h

16 #i‚de‡
_NETDEV_H_


17 
	#_NETDEV_H_


	)

19 
	~"√t.h
"

30 
bﬂrd_ëh_öô
();

31 
˝u_ëh_öô
();

34 
©91emac_ªgi°î
(
bd_t
 *
bis
, 
ioba£
);

35 
au1x00_íë_öôülize
(
bd_t
*);

36 
ax88180_öôülize
(
bd_t
 *
bis
);

37 
bcm_sf2_ëh_ªgi°î
(
bd_t
 *
bis
, 
u8
 
dev_num
);

38 
bfö_EMAC_öôülize
(
bd_t
 *
bis
);

39 
ˇlxedaxgmac_öôülize
(
u32
 
id
, 
ul⁄g
 
ba£_addr
);

40 
cs8900_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

41 
davöci_emac_öôülize
();

42 
dc21x4x_öôülize
(
bd_t
 *
bis
);

43 
designw¨e_öôülize
(
ul⁄g
 
ba£_addr
, 
u32
 
öãrÁ˚
, 
ëh_devi˚
 *
dev
);

44 
dm9000_öôülize
(
bd_t
 *
bis
);

45 
d√t_ëh_öôülize
(
id
, *
ªgs
, 
phy_addr
);

46 
e1000_öôülize
(
bd_t
 *
bis
);

47 
ì¥o100_öôülize
(
bd_t
 *
bis
);

48 
íc28j60_öôülize
(
bus
, 
cs
,

49 
max_hz
, 
mode
);

50 
ï93xx_ëh_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

51 
ëh_3com_öôülize
 (
bd_t
 * 
bis
);

52 
ëhoc_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

53 
„c_öôülize
 (
bd_t
 *
bis
);

54 
„cmxc_öôülize
(
bd_t
 *
bis
);

55 
„cmxc_öôülize_mu…i
(
bd_t
 *
bis
, 
dev_id
, 
phy_id
, 
uöt32_t
 
addr
);

56 
·gmac100_öôülize
(
bd_t
 *
bôs
);

57 
·mac100_öôülize
(
bd_t
 *
bôs
);

58 
·mac110_öôülize
(
bd_t
 *
bôs
);

59 
gªth_öôülize
(
bd_t
 *
bis
);

60 
gt6426x_ëh_öôülize
(
bd_t
 *
bis
);

61 
ks8851_mŒ_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

62 
œn91c96_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

63 
Õc32xx_ëh_öôülize
(
bd_t
 *
bis
);

64 
macb_ëh_öôülize
(
id
, *
ªgs
, 
phy_addr
);

65 
mcdma„c_öôülize
(
bd_t
 *
bis
);

66 
mcf„c_öôülize
(
bd_t
 *
bis
);

67 
mpc512x_„c_öôülize
(
bd_t
 *
bis
);

68 
mpc5xxx_„c_öôülize
(
bd_t
 *
bis
);

69 
mpc82xx_scc_íë_öôülize
(
bd_t
 *
bis
);

70 
mvgbe_öôülize
(
bd_t
 *
bis
);

71 
mv√è_öôülize
(
bd_t
 *
bis
, 
ba£_addr
, 
devnum
, 
phy_addr
);

72 
«t£mi_öôülize
(
bd_t
 *
bis
);

73 
√2k_ªgi°î
();

74 
≈e_öôülize
(
bd_t
 *
bis
);

75 
ns8382x_öôülize
(
bd_t
 *
bis
);

76 
p˙ë_öôülize
(
bd_t
 *
bis
);

77 
µc_4xx_ëh_öôülize
 (
bd_t
 *
bis
);

78 
πl8139_öôülize
(
bd_t
 *
bis
);

79 
πl8169_öôülize
(
bd_t
 *
bis
);

80 
scc_öôülize
(
bd_t
 *
bis
);

81 
sh_ëh_öôülize
(
bd_t
 *
bis
);

82 
skge_öôülize
(
bd_t
 *
bis
);

83 
smc91111_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

84 
smc911x_öôülize
(
u8
 
dev_num
, 
ba£_addr
);

85 
tsi108_ëh_öôülize
(
bd_t
 *
bis
);

86 
uec_°™d¨d_öô
(
bd_t
 *
bis
);

87 
uli526x_öôülize
(
bd_t
 *
bis
);

88 
¨mada100_„c_ªgi°î
(
ba£_addr
);

89 
xûöx_axõmac_öôülize
(
bd_t
 *
bis
, 
ba£_addr
,

90 
dma_addr
);

91 
xûöx_ema˛ôe_of_öô
(c⁄° *
blob
);

92 
xûöx_ema˛ôe_öôülize
(
bd_t
 *
bis
, 
ba£_addr
,

93 
txµ
, 
rxµ
);

94 
xûöx_Œ_ãmac_ëh_öô
(
bd_t
 *
bis
, 
ba£_addr
, 
Êags
,

95 
˘æ_addr
);

96 
zynq_gem_of_öô
(c⁄° *
blob
);

97 
zynq_gem_öôülize
(
phys_addr_t
 
ba£_addr
,

98 
phy_addr
, 
u32
 
emio
);

99 
zynq_gem_h™dÀ_úq
(
úq
);

100 
zynq_£t_gem_ioba£
(
ba£_addr
);

106 #i‡
deföed
(
CONFIG_XILINX_LL_TEMAC
)

107 
	#XILINX_LL_TEMAC_M_FIFO
 0

	)

108 
	#XILINX_LL_TEMAC_M_SDMA_PLB
 (1 << 0)

	)

109 
	#XILINX_LL_TEMAC_M_SDMA_DCR
 (1 << 1)

	)

116 
ölöe
 
	$pci_ëh_öô
(
bd_t
 *
bis
)

118 
num
 = 0;

120 #ifde‡
CONFIG_PCI


122 #ifde‡
CONFIG_EEPRO100


123 
num
 +
	`ì¥o100_öôülize
(
bis
);

125 #ifde‡
CONFIG_TULIP


126 
num
 +
	`dc21x4x_öôülize
(
bis
);

128 #ifde‡
CONFIG_E1000


129 
num
 +
	`e1000_öôülize
(
bis
);

131 #ifde‡
CONFIG_PCNET


132 
num
 +
	`p˙ë_öôülize
(
bis
);

134 #ifde‡
CONFIG_NATSEMI


135 
num
 +
	`«t£mi_öôülize
(
bis
);

137 #ifde‡
CONFIG_NS8382X


138 
num
 +
	`ns8382x_öôülize
(
bis
);

140 #i‡
	`deföed
(
CONFIG_RTL8139
)

141 
num
 +
	`πl8139_öôülize
(
bis
);

143 #i‡
	`deföed
(
CONFIG_RTL8169
)

144 
num
 +
	`πl8169_öôülize
(
bis
);

146 #i‡
	`deföed
(
CONFIG_ULI526X
)

147 
num
 +
	`uli526x_öôülize
(
bis
);

151  
num
;

152 
	}
}

159 #i‡
deföed
(
CONFIG_MV88E61XX_SWITCH
)

162 
	#MV88E61XX_MAX_PORTS_NUM
 6

	)

164 
	emv88e61xx_cfg_mdù
 {

165 
	mMV88E61XX_MDIP_NOCHANGE
,

166 
	mMV88E61XX_MDIP_REVERSE


169 
	emv88e61xx_cfg_Àdöô
 {

170 
	mMV88E61XX_LED_INIT_DIS
,

171 
	mMV88E61XX_LED_INIT_EN


174 
	emv88e61xx_cfg_rgmiid
 {

175 
	mMV88E61XX_RGMII_DELAY_DIS
,

176 
	mMV88E61XX_RGMII_DELAY_EN


179 
	emv88e61xx_cfg_¥t°t
 {

180 
	mMV88E61XX_PORTSTT_DISABLED
,

181 
	mMV88E61XX_PORTSTT_BLOCKING
,

182 
	mMV88E61XX_PORTSTT_LEARNING
,

183 
	mMV88E61XX_PORTSTT_FORWARDING


186 
	smv88e61xx_c⁄fig
 {

187 *
	m«me
;

188 
u8
 
	mvœncfg
[
MV88E61XX_MAX_PORTS_NUM
];

189 
mv88e61xx_cfg_rgmiid
 
	mrgmii_dñay
;

190 
mv88e61xx_cfg_¥t°t
 
	mp‹t°©e
;

191 
mv88e61xx_cfg_Àdöô
 
	mÀd_öô
;

192 
mv88e61xx_cfg_mdù
 
	mmdù
;

193 
u32
 
	mp‹ts_íabÀd
;

194 
u8
 
	m˝up‹t
;

204 
	#MV88E61XX_VLANCFG_SWITCH
 { 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F }

	)

207 
	#MV88E61XX_VLANCFG_ROUTER
 { 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F }

	)

209 
mv88e61xx_swôch_öôülize
(
mv88e61xx_c⁄fig
 *
swc⁄fig
);

212 
mii_dev
 *
„c_gë_miibus
(
uöt32_t
 
ba£_addr
, 
dev_id
);

213 #ifde‡
CONFIG_PHYLIB


214 
	gphy_devi˚
;

215 
„c_¥obe
(
bd_t
 *
bd
, 
dev_id
, 
uöt32_t
 
ba£_addr
,

216 
mii_dev
 *
bus
, 
phy_devi˚
 *
phydev
);

221 
„cmxc_ªgi°î_mii_po°ˇŒ
(
ëh_devi˚
 *
dev
, (*
cb
)());

	@libethernet/src/uboot/phy.c

16 
	~<°dlib.h
>

17 
	~"c⁄fig.h
"

18 
	~"comm⁄.h
"

19 
	~"√t.h
"

21 
	~"miùhy.h
"

22 
	~"phy.h
"

23 
	~"îr.h
"

24 
	~<î∫o.h
>

25 
	~"bô›s.h
"

26 
	~"../unim∂emíãd.h
"

27 
	~"°rög.h
"

40 
	$gíphy_c⁄fig_advît
(
phy_devi˚
 *
phydev
)

42 
u32
 
advîti£
;

43 
ﬁdadv
, 
adv
, 
bm§
;

44 
îr
, 
ch™ged
 = 0;

47 
phydev
->
advîtisög
 &phydev->
suµ‹ãd
;

48 
advîti£
 = 
phydev
->
advîtisög
;

51 
adv
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_ADVERTISE
);

52 
ﬁdadv
 = 
adv
;

54 i‡(
adv
 < 0)

55  
adv
;

57 
adv
 &~(
ADVERTISE_ALL
 | 
ADVERTISE_100BASE4
 | 
ADVERTISE_PAUSE_CAP
 |

58 
ADVERTISE_PAUSE_ASYM
);

59 i‡(
advîti£
 & 
ADVERTISED_10ba£T_HÆf
)

60 
adv
 |
ADVERTISE_10HALF
;

61 i‡(
advîti£
 & 
ADVERTISED_10ba£T_FuŒ
)

62 
adv
 |
ADVERTISE_10FULL
;

63 i‡(
advîti£
 & 
ADVERTISED_100ba£T_HÆf
)

64 
adv
 |
ADVERTISE_100HALF
;

65 i‡(
advîti£
 & 
ADVERTISED_100ba£T_FuŒ
)

66 
adv
 |
ADVERTISE_100FULL
;

67 i‡(
advîti£
 & 
ADVERTISED_Pau£
)

68 
adv
 |
ADVERTISE_PAUSE_CAP
;

69 i‡(
advîti£
 & 
ADVERTISED_Asym_Pau£
)

70 
adv
 |
ADVERTISE_PAUSE_ASYM
;

71 i‡(
advîti£
 & 
ADVERTISED_1000ba£X_HÆf
)

72 
adv
 |
ADVERTISE_1000XHALF
;

73 i‡(
advîti£
 & 
ADVERTISED_1000ba£X_FuŒ
)

74 
adv
 |
ADVERTISE_1000XFULL
;

76 i‡(
adv
 !
ﬁdadv
) {

77 
îr
 = 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_ADVERTISE
, 
adv
);

79 i‡(
îr
 < 0)

80  
îr
;

81 
ch™ged
 = 1;

84 
bm§
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMSR
);

85 i‡(
bm§
 < 0)

86  
bm§
;

92 i‡(!(
bm§
 & 
BMSR_ESTATEN
))

93  
ch™ged
;

96 
adv
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_CTRL1000
);

97 
ﬁdadv
 = 
adv
;

99 i‡(
adv
 < 0)

100  
adv
;

102 
adv
 &~(
ADVERTISE_1000FULL
 | 
ADVERTISE_1000HALF
);

104 i‡(
phydev
->
suµ‹ãd
 & (
SUPPORTED_1000ba£T_HÆf
 |

105 
SUPPORTED_1000ba£T_FuŒ
)) {

106 i‡(
advîti£
 & 
SUPPORTED_1000ba£T_HÆf
)

107 
adv
 |
ADVERTISE_1000HALF
;

108 i‡(
advîti£
 & 
SUPPORTED_1000ba£T_FuŒ
)

109 
adv
 |
ADVERTISE_1000FULL
;

112 i‡(
adv
 !
ﬁdadv
)

113 
ch™ged
 = 1;

115 
îr
 = 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_CTRL1000
, 
adv
);

116 i‡(
îr
 < 0)

117  
îr
;

119  
ch™ged
;

120 
	}
}

130 
	$gíphy_£tup_f‹˚d
(
phy_devi˚
 *
phydev
)

132 
îr
;

133 
˘l
 = 
BMCR_ANRESTART
;

135 
phydev
->
∑u£
 =Öhydev->
asym_∑u£
 = 0;

137 i‡(
SPEED_1000
 =
phydev
->
•ìd
)

138 
˘l
 |
BMCR_SPEED1000
;

139 i‡(
SPEED_100
 =
phydev
->
•ìd
)

140 
˘l
 |
BMCR_SPEED100
;

142 i‡(
DUPLEX_FULL
 =
phydev
->
du∂ex
)

143 
˘l
 |
BMCR_FULLDPLX
;

145 
îr
 = 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
, 
˘l
);

147  
îr
;

148 
	}
}

155 
	$gíphy_ª°¨t_™eg
(
phy_devi˚
 *
phydev
)

157 
˘l
;

159 
˘l
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
);

161 i‡(
˘l
 < 0)

162  
˘l
;

164 
˘l
 |(
BMCR_ANENABLE
 | 
BMCR_ANRESTART
);

167 
˘l
 &~(
BMCR_ISOLATE
);

169 
˘l
 = 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
, ctl);

171  
˘l
;

172 
	}
}

183 
	$gíphy_c⁄fig_™eg
(
phy_devi˚
 *
phydev
)

185 
ªsu…
;

187 i‡(
AUTONEG_ENABLE
 !
phydev
->
aut⁄eg
)

188  
	`gíphy_£tup_f‹˚d
(
phydev
);

190 
ªsu…
 = 
	`gíphy_c⁄fig_advît
(
phydev
);

192 i‡(
ªsu…
 < 0)

193  
ªsu…
;

195 i‡(
ªsu…
 == 0) {

198 
˘l
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
);

200 i‡(
˘l
 < 0)

201  
˘l
;

203 i‡(!(
˘l
 & 
BMCR_ANENABLE
Ë|| (˘»& 
BMCR_ISOLATE
))

204 
ªsu…
 = 1;

209 i‡(
ªsu…
 > 0)

210 
ªsu…
 = 
	`gíphy_ª°¨t_™eg
(
phydev
);

212  
ªsu…
;

213 
	}
}

223 
	$gíphy_upd©e_lök
(
phy_devi˚
 *
phydev
)

225 
mii_ªg
;

231 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMSR
);

237 i‡(
phydev
->
lök
 && 
mii_ªg
 & 
BMSR_LSTATUS
)

240 i‡((
phydev
->
aut⁄eg
 =
AUTONEG_ENABLE
) &&

241 !(
mii_ªg
 & 
BMSR_ANEGCOMPLETE
)) {

242 
i
 = 0;

244 
	`¥ötf
("%†Waôög f‹ PHYáutÿ√gŸüti⁄Åÿcom∂ëe", 
phydev
->
dev
->
«me
);

245 
	`fÊush
(
°dout
);

246 !(
mii_ªg
 & 
BMSR_ANEGCOMPLETE
)) {

250 i‡(
i
 > 
PHY_ANEG_TIMEOUT
) {

251 
	`¥ötf
(" TIMEOUT !\n");

252 
phydev
->
lök
 = 0;

253  -
ETIMEDOUT
;

256 i‡((
i
++ % 500) == 0)

257 
	`¥ötf
(".");

259 
	`uboŸ_udñay
(1000);

260 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMSR
);

262 
	`¥ötf
(" done\n");

263 
phydev
->
lök
 = 1;

266 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMSR
);

268 i‡(
mii_ªg
 & 
BMSR_LSTATUS
)

269 
phydev
->
lök
 = 1;

271 
phydev
->
lök
 = 0;

275 
	}
}

286 
	$gíphy_∑r£_lök
(
phy_devi˚
 *
phydev
)

288 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMSR
);

291 i‡(
phydev
->
aut⁄eg
 =
AUTONEG_ENABLE
) {

292 
u32
 
Õa
 = 0;

293 
gbÕa
 = 0;

294 
u32
 
e°©us
 = 0;

297 i‡(
phydev
->
suµ‹ãd
 & (
SUPPORTED_1000ba£T_FuŒ
 |

298 
SUPPORTED_1000ba£T_HÆf
)) {

302 
gbÕa
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_STAT1000
);

303 i‡(
gbÕa
 < 0) {

304 
	`debug
("CouldÇotÑead MII_STAT1000. Ignoring gigabit capability\n");

305 
gbÕa
 = 0;

307 
gbÕa
 &
	`phy_ªad
(
phydev
,

308 
MDIO_DEVAD_NONE
, 
MII_CTRL1000
) << 2;

314 
phydev
->
•ìd
 = 
SPEED_10
;

315 
phydev
->
du∂ex
 = 
DUPLEX_HALF
;

318 i‡(
gbÕa
 & (
PHY_1000BTSR_1000FD
 | 
PHY_1000BTSR_1000HD
)) {

319 
phydev
->
•ìd
 = 
SPEED_1000
;

321 i‡(
gbÕa
 & 
PHY_1000BTSR_1000FD
)

322 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

328 
Õa
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_ADVERTISE
);

329 
Õa
 &
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_LPA
);

331 i‡(
Õa
 & (
LPA_100FULL
 | 
LPA_100HALF
)) {

332 
phydev
->
•ìd
 = 
SPEED_100
;

334 i‡(
Õa
 & 
LPA_100FULL
)

335 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

337 } i‡(
Õa
 & 
LPA_10FULL
)

338 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

348 i‡((
mii_ªg
 & 
BMSR_ESTATEN
Ë&& !(mii_ªg & 
BMSR_ERCAP
))

349 
e°©us
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
,

350 
MII_ESTATUS
);

352 i‡(
e°©us
 & (
ESTATUS_1000_XFULL
 | 
ESTATUS_1000_XHALF
 |

353 
ESTATUS_1000_TFULL
 | 
ESTATUS_1000_THALF
)) {

354 
phydev
->
•ìd
 = 
SPEED_1000
;

355 i‡(
e°©us
 & (
ESTATUS_1000_XFULL
 | 
ESTATUS_1000_TFULL
))

356 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

360 
u32
 
bm¸
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
);

362 
phydev
->
•ìd
 = 
SPEED_10
;

363 
phydev
->
du∂ex
 = 
DUPLEX_HALF
;

365 i‡(
bm¸
 & 
BMCR_FULLDPLX
)

366 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

368 i‡(
bm¸
 & 
BMCR_SPEED1000
)

369 
phydev
->
•ìd
 = 
SPEED_1000
;

370 i‡(
bm¸
 & 
BMCR_SPEED100
)

371 
phydev
->
•ìd
 = 
SPEED_100
;

375 
	}
}

377 
	$gíphy_c⁄fig
(
phy_devi˚
 *
phydev
)

379 
vÆ
;

380 
u32
 
„©uªs
;

382 
„©uªs
 = (
SUPPORTED_TP
 | 
SUPPORTED_MII


383 | 
SUPPORTED_AUI
 | 
SUPPORTED_FIBRE
 |

384 
SUPPORTED_BNC
);

387 
vÆ
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMSR
);

389 i‡(
vÆ
 < 0)

390  
vÆ
;

392 i‡(
vÆ
 & 
BMSR_ANEGCAPABLE
)

393 
„©uªs
 |
SUPPORTED_Aut⁄eg
;

395 i‡(
vÆ
 & 
BMSR_100FULL
)

396 
„©uªs
 |
SUPPORTED_100ba£T_FuŒ
;

397 i‡(
vÆ
 & 
BMSR_100HALF
)

398 
„©uªs
 |
SUPPORTED_100ba£T_HÆf
;

399 i‡(
vÆ
 & 
BMSR_10FULL
)

400 
„©uªs
 |
SUPPORTED_10ba£T_FuŒ
;

401 i‡(
vÆ
 & 
BMSR_10HALF
)

402 
„©uªs
 |
SUPPORTED_10ba£T_HÆf
;

404 i‡(
vÆ
 & 
BMSR_ESTATEN
) {

405 
vÆ
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_ESTATUS
);

407 i‡(
vÆ
 < 0)

408  
vÆ
;

410 i‡(
vÆ
 & 
ESTATUS_1000_TFULL
)

411 
„©uªs
 |
SUPPORTED_1000ba£T_FuŒ
;

412 i‡(
vÆ
 & 
ESTATUS_1000_THALF
)

413 
„©uªs
 |
SUPPORTED_1000ba£T_HÆf
;

414 i‡(
vÆ
 & 
ESTATUS_1000_XFULL
)

415 
„©uªs
 |
SUPPORTED_1000ba£X_FuŒ
;

416 i‡(
vÆ
 & 
ESTATUS_1000_XHALF
)

417 
„©uªs
 |
SUPPORTED_1000ba£X_HÆf
;

420 
phydev
->
suµ‹ãd
 &
„©uªs
;

421 
phydev
->
advîtisög
 &
„©uªs
;

423 
	`gíphy_c⁄fig_™eg
(
phydev
);

426 
	}
}

428 
	$gíphy_°¨tup
(
phy_devi˚
 *
phydev
)

430 
ªt
;

432 
ªt
 = 
	`gíphy_upd©e_lök
(
phydev
);

433 i‡(
ªt
)

434  
ªt
;

436  
	`gíphy_∑r£_lök
(
phydev
);

437 
	}
}

439 
	$gíphy_shutdown
(
phy_devi˚
 *
phydev
)

442 
	}
}

444 
phy_drivî
 
	ggíphy_drivî
 = {

445 .
uid
 = 0xffffffff,

446 .
	gmask
 = 0xffffffff,

447 .
	g«me
 = "Generic PHY",

448 .
	g„©uªs
 = 
PHY_GBIT_FEATURES
 | 
SUPPORTED_MII
 |

449 
SUPPORTED_AUI
 | 
SUPPORTED_FIBRE
 |

450 
SUPPORTED_BNC
,

451 .
	gc⁄fig
 = 
gíphy_c⁄fig
,

452 .
	g°¨tup
 = 
gíphy_°¨tup
,

453 .
	gshutdown
 = 
gíphy_shutdown
,

456 
LIST_HEAD
(
phy_drivîs
);

458 
	$phy_öô
()

460 #ifde‡
CONFIG_MV88E61XX_SWITCH


461 
	`phy_mv88e61xx_öô
();

463 #ifde‡
CONFIG_PHY_AQUANTIA


464 
	`phy_aqu™tü_öô
();

466 #ifde‡
CONFIG_PHY_ATHEROS


467 
	`phy_©hîos_öô
();

469 #ifde‡
CONFIG_PHY_BROADCOM


470 
	`phy_brﬂdcom_öô
();

472 #ifde‡
CONFIG_PHY_CORTINA


473 
	`phy_c‹töa_öô
();

475 #ifde‡
CONFIG_PHY_DAVICOM


476 
	`phy_davicom_öô
();

478 #ifde‡
CONFIG_PHY_ET1011C


479 
	`phy_ë1011c_öô
();

481 #ifde‡
CONFIG_PHY_LXT


482 
	`phy_lxt_öô
();

484 #ifde‡
CONFIG_PHY_MARVELL


485 
	`phy_m¨vñl_öô
();

487 #ifde‡
CONFIG_PHY_MICREL


488 
	`phy_mi¸ñ_öô
();

490 #ifde‡
CONFIG_PHY_NATSEMI


491 
	`phy_«t£mi_öô
();

493 #ifde‡
CONFIG_PHY_REALTEK


494 
	`phy_ªÆãk_öô
();

496 #ifde‡
CONFIG_PHY_SMSC


497 
	`phy_smsc_öô
();

499 #ifde‡
CONFIG_PHY_TERANETICS


500 
	`phy_ãø√tics_öô
();

502 #ifde‡
CONFIG_PHY_TI


503 
	`phy_ti_öô
();

505 #ifde‡
CONFIG_PHY_VITESSE


506 
	`phy_vôes£_öô
();

508 #ifde‡
CONFIG_PHY_XILINX


509 
	`phy_xûöx_öô
();

513 
	}
}

515 
	$phy_ªgi°î
(
phy_drivî
 *
drv
)

517 
	`INIT_LIST_HEAD
(&
drv
->
li°
);

518 
	`li°_add_èû
(&
drv
->
li°
, &
phy_drivîs
);

520 #ifde‡
CONFIG_NEEDS_MANUAL_RELOC


521 i‡(
drv
->
¥obe
)

522 
drv
->
¥obe
 +
gd
->
ªloc_off
;

523 i‡(
drv
->
c⁄fig
)

524 
drv
->
c⁄fig
 +
gd
->
ªloc_off
;

525 i‡(
drv
->
°¨tup
)

526 
drv
->
°¨tup
 +
gd
->
ªloc_off
;

527 i‡(
drv
->
shutdown
)

528 
drv
->
shutdown
 +
gd
->
ªloc_off
;

529 i‡(
drv
->
ªadext
)

530 
drv
->
ªadext
 +
gd
->
ªloc_off
;

531 i‡(
drv
->
wrôìxt
)

532 
drv
->
wrôìxt
 +
gd
->
ªloc_off
;

535 
	}
}

537 
	$phy_£t_suµ‹ãd
(
phy_devi˚
 *
phydev
, 
u32
 
max_•ìd
)

543 
phydev
->
suµ‹ãd
 &
PHY_DEFAULT_FEATURES
;

545 
max_•ìd
) {

547  -
ENOTSUPP
;

548 
SPEED_1000
:

549 
phydev
->
suµ‹ãd
 |
PHY_1000BT_FEATURES
;

551 
SPEED_100
:

552 
phydev
->
suµ‹ãd
 |
PHY_100BT_FEATURES
;

554 
SPEED_10
:

555 
phydev
->
suµ‹ãd
 |
PHY_10BT_FEATURES
;

559 
	}
}

561 
	$phy_¥obe
(
phy_devi˚
 *
phydev
)

563 
îr
 = 0;

565 
phydev
->
advîtisög
 =Öhydev->
suµ‹ãd
 =Öhydev->
drv
->
„©uªs
;

566 
phydev
->
mmds
 =Öhydev->
drv
->mmds;

568 i‡(
phydev
->
drv
->
¥obe
)

569 
îr
 = 
phydev
->
drv
->
	`¥obe
(phydev);

571  
îr
;

572 
	}
}

574 
phy_drivî
 *
	$gíîic_f‹_öãrÁ˚
(
phy_öãrÁ˚_t
 
öãrÁ˚
)

576 #ifde‡
CONFIG_PHYLIB_10G


577 i‡(
	`is_10g_öãrÁ˚
(
öãrÁ˚
))

578  &
gí10g_drivî
;

581  &
gíphy_drivî
;

582 
	}
}

584 
phy_drivî
 *
	$gë_phy_drivî
(
phy_devi˚
 *
phydev
,

585 
phy_öãrÁ˚_t
 
öãrÁ˚
)

587 
li°_hód
 *
íåy
;

588 
phy_id
 = 
phydev
->phy_id;

589 
phy_drivî
 *
drv
 = 
NULL
;

591 
	`li°_f‹_óch
(
íåy
, &
phy_drivîs
) {

592 
drv
 = 
	`li°_íåy
(
íåy
, 
phy_drivî
, 
li°
);

593 i‡((
drv
->
uid
 & drv->
mask
Ë=(
phy_id
 & drv->mask))

594  
drv
;

598  
	`gíîic_f‹_öãrÁ˚
(
öãrÁ˚
);

599 
	}
}

601 
phy_devi˚
 *
	$phy_devi˚_¸óã
(
mii_dev
 *
bus
, 
addr
,

602 
u32
 
phy_id
,

603 
phy_öãrÁ˚_t
 
öãrÁ˚
)

605 
phy_devi˚
 *
dev
;

609 
dev
 = 
	`mÆloc
((*dev));

610 i‡(!
dev
) {

611 
	`¥ötf
("FailedÅoállocate PHY device for %s:%d\n",

612 
bus
->
«me
, 
addr
);

613  
NULL
;

616 
	`mem£t
(
dev
, 0, (*dev));

618 
dev
->
du∂ex
 = -1;

619 
dev
->
lök
 = 0;

620 
dev
->
öãrÁ˚
 = interface;

622 
dev
->
aut⁄eg
 = 
AUTONEG_ENABLE
;

624 
dev
->
addr
 =áddr;

625 
dev
->
phy_id
 =Öhy_id;

626 
dev
->
bus
 = bus;

628 
dev
->
drv
 = 
	`gë_phy_drivî
(dev, 
öãrÁ˚
);

630 
	`phy_¥obe
(
dev
);

632 
bus
->
phym≠
[
addr
] = 
dev
;

634  
dev
;

635 
	}
}

646 
__wók
 
	$gë_phy_id
(
mii_dev
 *
bus
, 
addr
, 
devad
, 
u32
 *
phy_id
)

648 
phy_ªg
;

652 
phy_ªg
 = 
bus
->
	`ªad
(bus, 
addr
, 
devad
, 
MII_PHYSID1
);

654 i‡(
phy_ªg
 < 0)

655  -
EIO
;

657 *
phy_id
 = (
phy_ªg
 & 0xffff) << 16;

660 
phy_ªg
 = 
bus
->
	`ªad
(bus, 
addr
, 
devad
, 
MII_PHYSID2
);

662 i‡(
phy_ªg
 < 0)

663  -
EIO
;

665 *
phy_id
 |(
phy_ªg
 & 0xffff);

668 
	}
}

670 
phy_devi˚
 *
	$¸óã_phy_by_mask
(
mii_dev
 *
bus
,

671 
phy_mask
, 
devad
, 
phy_öãrÁ˚_t
 
öãrÁ˚
)

673 
u32
 
phy_id
 = 0xffffffff;

674 
phy_mask
) {

675 
addr
 = 
	`ffs
(
phy_mask
) - 1;

676 
r
 = 
	`gë_phy_id
(
bus
, 
addr
, 
devad
, &
phy_id
);

678 i‡(
r
 =0 && (
phy_id
 & 0x1fffffff) != 0x1fffffff)

679  
	`phy_devi˚_¸óã
(
bus
, 
addr
, 
phy_id
, 
öãrÁ˚
);

680 
phy_mask
 &~(1 << 
addr
);

682  
NULL
;

683 
	}
}

685 
phy_devi˚
 *
	$£¨ch_f‹_exi°ög_phy
(
mii_dev
 *
bus
,

686 
phy_mask
, 
phy_öãrÁ˚_t
 
öãrÁ˚
)

689 
phy_mask
) {

690 
addr
 = 
	`ffs
(
phy_mask
) - 1;

691 i‡(
bus
->
phym≠
[
addr
]) {

692 
bus
->
phym≠
[
addr
]->
öãrÁ˚
 = interface;

693  
bus
->
phym≠
[
addr
];

695 
phy_mask
 &~(1 << 
addr
);

697  
NULL
;

698 
	}
}

700 
phy_devi˚
 *
	$gë_phy_devi˚_by_mask
(
mii_dev
 *
bus
,

701 
phy_mask
, 
phy_öãrÁ˚_t
 
öãrÁ˚
)

703 
i
;

704 
phy_devi˚
 *
phydev
;

706 
phydev
 = 
	`£¨ch_f‹_exi°ög_phy
(
bus
, 
phy_mask
, 
öãrÁ˚
);

707 i‡(
phydev
)

708  
phydev
;

711 
i
 = 0; i < 5; i++) {

712 
phydev
 = 
	`¸óã_phy_by_mask
(
bus
, 
phy_mask
,

713 
i
 ? i : 
MDIO_DEVAD_NONE
, 
öãrÁ˚
);

714 i‡(
	`IS_ERR
(
phydev
))

715  
NULL
;

716 i‡(
phydev
)

717  
phydev
;

720 
	`debug
("\n%†PHY: ", 
bus
->
«me
);

721 
phy_mask
) {

722 
addr
 = 
	`ffs
(
phy_mask
) - 1;

723 
	`debug
("%d ", 
addr
);

724 
phy_mask
 &~(1 << 
addr
);

726 
	`debug
("not found\n");

728  
NULL
;

729 
	}
}

739 
phy_devi˚
 *
	$gë_phy_devi˚
(
mii_dev
 *
bus
, 
addr
,

740 
phy_öãrÁ˚_t
 
öãrÁ˚
)

742  
	`gë_phy_devi˚_by_mask
(
bus
, 1 << 
addr
, 
öãrÁ˚
);

743 
	}
}

745 
	$phy_ª£t
(
phy_devi˚
 *
phydev
)

747 
ªg
;

748 
timeout
 = 500;

749 
devad
 = 
MDIO_DEVAD_NONE
;

751 i‡(
phydev
->
Êags
 & 
PHY_FLAG_BROKEN_RESET
)

754 #ifde‡
CONFIG_PHYLIB_10G


756 i‡(
	`is_10g_öãrÁ˚
(
phydev
->
öãrÁ˚
)) {

757 i‡(!
phydev
->
mmds
)

758 
	`gí10g_discovî_mmds
(
phydev
);

760 
devad
 = 
	`ffs
(
phydev
->
mmds
) - 1;

764 i‡(
	`phy_wrôe
(
phydev
, 
devad
, 
MII_BMCR
, 
BMCR_RESET
) < 0) {

765 
	`debug
("PHYÑeset failed\n");

769 #ifde‡
CONFIG_PHY_RESET_DELAY


770 
	`uboŸ_udñay
(
CONFIG_PHY_RESET_DELAY
);

777 
ªg
 = 
	`phy_ªad
(
phydev
, 
devad
, 
MII_BMCR
);

778 (
ªg
 & 
BMCR_RESET
Ë&& 
timeout
--) {

779 
ªg
 = 
	`phy_ªad
(
phydev
, 
devad
, 
MII_BMCR
);

781 i‡(
ªg
 < 0) {

782 
	`debug
("PHY statusÑead failed\n");

785 
	`uboŸ_udñay
(1000);

788 i‡(
ªg
 & 
BMCR_RESET
) {

789 
	`puts
("PHYÑesetÅimed out\n");

794 
	}
}

796 
	$miùhy_ª£t
(c⁄° *
dev«me
, 
addr
)

798 
mii_dev
 *
bus
 = 
	`miùhy_gë_dev_by_«me
(
dev«me
);

799 
phy_devi˚
 *
phydev
;

806 
phydev
 = 
	`gë_phy_devi˚
(
bus
, 
addr
, 
PHY_INTERFACE_MODE_MII
);

808  
	`phy_ª£t
(
phydev
);

809 
	}
}

811 
phy_devi˚
 *
	$phy_föd_by_mask
(
mii_dev
 *
bus
, 
phy_mask
,

812 
phy_öãrÁ˚_t
 
öãrÁ˚
)

815 i‡(
bus
->
ª£t
) {

816 
bus
->
	`ª£t
(bus);

819 
	`uboŸ_udñay
(15000);

822  
	`gë_phy_devi˚_by_mask
(
bus
, 
phy_mask
, 
öãrÁ˚
);

823 
	}
}

825 #ifde‡
CONFIG_DM_ETH


826 
	$phy_c⁄√˘_dev
(
phy_devi˚
 *
phydev
, 
udevi˚
 *
dev
)

828 
	$phy_c⁄√˘_dev
(
phy_devi˚
 *
phydev
, 
ëh_devi˚
 *
dev
)

832 
	`phy_ª£t
(
phydev
);

833 i‡(
phydev
->
dev
 &&Öhydev->dev != dev) {

834 
	`¥ötf
("%s:%d is connectedÅo %s. ReconnectingÅo %s\n",

835 
phydev
->
bus
->
«me
,Öhydev->
addr
,

836 
phydev
->
dev
->
«me
, dev->name);

838 
phydev
->
dev
 = dev;

839 
	`debug
("%†c⁄√˘edÅÿ%s\n", 
dev
->
«me
, 
phydev
->
drv
->name);

840 
	}
}

842 #ifde‡
CONFIG_DM_ETH


843 
phy_devi˚
 *
	$phy_c⁄√˘
(
mii_dev
 *
bus
, 
addr
,

844 
udevi˚
 *
dev
, 
phy_öãrÁ˚_t
 
öãrÁ˚
)

846 
phy_devi˚
 *
	$phy_c⁄√˘
(
mii_dev
 *
bus
, 
addr
,

847 
ëh_devi˚
 *
dev
, 
phy_öãrÁ˚_t
 
öãrÁ˚
)

850 
phy_devi˚
 *
phydev
;

852 
phydev
 = 
	`phy_föd_by_mask
(
bus
, 1 << 
addr
, 
öãrÁ˚
);

853 i‡(
phydev
)

854 
	`phy_c⁄√˘_dev
(
phydev
, 
dev
);

856 
	`¥ötf
("CouldÇŸ gë PHY f‹ %s:ádd∏%d\n", 
bus
->
«me
, 
addr
);

857  
phydev
;

858 
	}
}

863 
	$phy_°¨tup
(
phy_devi˚
 *
phydev
)

865 i‡(
phydev
->
drv
->
°¨tup
)

866  
phydev
->
drv
->
	`°¨tup
(phydev);

869 
	}
}

871 
__wók
 
	$bﬂrd_phy_c⁄fig
(
phy_devi˚
 *
phydev
)

873 i‡(
phydev
->
drv
->
c⁄fig
)

874  
phydev
->
drv
->
	`c⁄fig
(phydev);

876 
	}
}

878 
	$phy_c⁄fig
(
phy_devi˚
 *
phydev
)

881  
	`bﬂrd_phy_c⁄fig
(
phydev
);

882 
	}
}

884 
	$phy_shutdown
(
phy_devi˚
 *
phydev
)

886 i‡(
phydev
->
drv
->
shutdown
)

887 
phydev
->
drv
->
	`shutdown
(phydev);

890 
	}
}

892 
	$phy_gë_öãrÁ˚_by_«me
(c⁄° *
°r
)

894 
i
;

896 
i
 = 0; i < 
PHY_INTERFACE_MODE_COUNT
; i++) {

897 i‡(!
	`°rcmp
(
°r
, 
phy_öãrÁ˚_°rögs
[
i
]))

898  
i
;

902 
	}
}

	@libethernet/src/uboot/phy.h

14 #i‚de‡
_PHY_H


15 
	#_PHY_H


	)

17 
	~"li°.h
"

18 
	~<°dio.h
>

19 
	~"mii.h
"

20 
	~"ëhtoﬁ.h
"

21 
	~"mdio.h
"

23 
	#PHY_MAX_ADDR
 32

	)

25 
	#PHY_FLAG_BROKEN_RESET
 (1 << 0Ë

	)

27 
	#PHY_DEFAULT_FEATURES
 (
SUPPORTED_Aut⁄eg
 | \

28 
SUPPORTED_TP
 | \

29 
SUPPORTED_MII
)

	)

31 
	#PHY_10BT_FEATURES
 (
SUPPORTED_10ba£T_HÆf
 | \

32 
SUPPORTED_10ba£T_FuŒ
)

	)

34 
	#PHY_100BT_FEATURES
 (
SUPPORTED_100ba£T_HÆf
 | \

35 
SUPPORTED_100ba£T_FuŒ
)

	)

37 
	#PHY_1000BT_FEATURES
 (
SUPPORTED_1000ba£T_HÆf
 | \

38 
SUPPORTED_1000ba£T_FuŒ
)

	)

40 
	#PHY_BASIC_FEATURES
 (
PHY_10BT_FEATURES
 | \

41 
PHY_100BT_FEATURES
 | \

42 
PHY_DEFAULT_FEATURES
)

	)

44 
	#PHY_GBIT_FEATURES
 (
PHY_BASIC_FEATURES
 | \

45 
PHY_1000BT_FEATURES
)

	)

47 
	#PHY_10G_FEATURES
 (
PHY_GBIT_FEATURES
 | \

48 
SUPPORTED_10000ba£T_FuŒ
)

	)

50 #i‚de‡
PHY_ANEG_TIMEOUT


51 
	#PHY_ANEG_TIMEOUT
 4000

	)

56 
	mPHY_INTERFACE_MODE_MII
,

57 
	mPHY_INTERFACE_MODE_GMII
,

58 
	mPHY_INTERFACE_MODE_SGMII
,

59 
	mPHY_INTERFACE_MODE_SGMII_2500
,

60 
	mPHY_INTERFACE_MODE_QSGMII
,

61 
	mPHY_INTERFACE_MODE_TBI
,

62 
	mPHY_INTERFACE_MODE_RMII
,

63 
	mPHY_INTERFACE_MODE_RGMII
,

64 
	mPHY_INTERFACE_MODE_RGMII_ID
,

65 
	mPHY_INTERFACE_MODE_RGMII_RXID
,

66 
	mPHY_INTERFACE_MODE_RGMII_TXID
,

67 
	mPHY_INTERFACE_MODE_RTBI
,

68 
	mPHY_INTERFACE_MODE_XGMII
,

69 
	mPHY_INTERFACE_MODE_NONE
,

71 
	mPHY_INTERFACE_MODE_COUNT
,

72 } 
	tphy_öãrÁ˚_t
;

74 c⁄° *
	gphy_öãrÁ˚_°rögs
[] = {

75 [
PHY_INTERFACE_MODE_MII
] = "mii",

76 [
PHY_INTERFACE_MODE_GMII
] = "gmii",

77 [
PHY_INTERFACE_MODE_SGMII
] = "sgmii",

78 [
PHY_INTERFACE_MODE_SGMII_2500
] = "sgmii-2500",

79 [
PHY_INTERFACE_MODE_QSGMII
] = "qsgmii",

80 [
PHY_INTERFACE_MODE_TBI
] = "tbi",

81 [
PHY_INTERFACE_MODE_RMII
] = "rmii",

82 [
PHY_INTERFACE_MODE_RGMII
] = "rgmii",

83 [
PHY_INTERFACE_MODE_RGMII_ID
] = "rgmii-id",

84 [
PHY_INTERFACE_MODE_RGMII_RXID
] = "rgmii-rxid",

85 [
PHY_INTERFACE_MODE_RGMII_TXID
] = "rgmii-txid",

86 [
PHY_INTERFACE_MODE_RTBI
] = "rtbi",

87 [
PHY_INTERFACE_MODE_XGMII
] = "xgmii",

88 [
PHY_INTERFACE_MODE_NONE
] = "",

91 
ölöe
 c⁄° *
	$phy_°rög_f‹_öãrÁ˚
(
phy_öãrÁ˚_t
 
i
)

94 i‡(
i
 > 
PHY_INTERFACE_MODE_NONE
)

95 
i
 = 
PHY_INTERFACE_MODE_NONE
;

97  
phy_öãrÁ˚_°rögs
[
i
];

98 
	}
}

101 
	gphy_devi˚
;

103 
	#MDIO_NAME_LEN
 32

	)

105 
	smii_dev
 {

106 
li°_hód
 
	mlök
;

107 
	m«me
[
MDIO_NAME_LEN
];

108 *
	m¥iv
;

109 (*
	mªad
)(
mii_dev
 *
	mbus
, 
	maddr
, 
	mdevad
, 
	mªg
);

110 (*
	mwrôe
)(
mii_dev
 *
	mbus
, 
	maddr
, 
	mdevad
, 
	mªg
,

111 
uöt16_t
 
	mvÆ
);

112 (*
	mª£t
)(
mii_dev
 *
	mbus
);

113 
phy_devi˚
 *
	mphym≠
[
PHY_MAX_ADDR
];

114 
u32
 
	mphy_mask
;

127 
	sphy_drivî
 {

128 *
	m«me
;

129 
	muid
;

130 
	mmask
;

131 
	mmmds
;

133 
uöt32_t
 
	m„©uªs
;

137 (*
	m¥obe
)(
phy_devi˚
 *
	mphydev
);

141 (*
	mc⁄fig
)(
phy_devi˚
 *
	mphydev
);

144 (*
	m°¨tup
)(
phy_devi˚
 *
	mphydev
);

147 (*
	mshutdown
)(
phy_devi˚
 *
	mphydev
);

149 (*
	mªadext
)(
phy_devi˚
 *
	mphydev
, 
	maddr
, 
	mdevad
, 
	mªg
);

150 (*
	mwrôìxt
)(
phy_devi˚
 *
	mphydev
, 
	maddr
, 
	mdevad
, 
	mªg
,

151 
u16
 
	mvÆ
);

152 
li°_hód
 
	mli°
;

155 
	sphy_devi˚
 {

158 
mii_dev
 *
	mbus
;

159 
phy_drivî
 *
	mdrv
;

160 *
	m¥iv
;

162 #ifde‡
CONFIG_DM_ETH


163 
udevi˚
 *
	mdev
;

165 
ëh_devi˚
 *
	mdev
;

171 
	m•ìd
;

172 
	mdu∂ex
;

175 
	mlök
;

176 
	mp‹t
;

177 
phy_öãrÁ˚_t
 
	möãrÁ˚
;

179 
uöt32_t
 
	madvîtisög
;

180 
uöt32_t
 
	msuµ‹ãd
;

181 
uöt32_t
 
	mmmds
;

183 
	maut⁄eg
;

184 
	maddr
;

185 
	m∑u£
;

186 
	masym_∑u£
;

187 
uöt32_t
 
	mphy_id
;

188 
uöt32_t
 
	mÊags
;

191 
	sfixed_lök
 {

192 
	mphy_id
;

193 
	mdu∂ex
;

194 
	mlök_•ìd
;

195 
	m∑u£
;

196 
	masym_∑u£
;

199 
ölöe
 
	$phy_ªad
(
phy_devi˚
 *
phydev
, 
devad
, 
ªgnum
)

201 
mii_dev
 *
bus
 = 
phydev
->bus;

203  
bus
->
	`ªad
(bus, 
phydev
->
addr
, 
devad
, 
ªgnum
);

204 
	}
}

206 
ölöe
 
	$phy_wrôe
(
phy_devi˚
 *
phydev
, 
devad
, 
ªgnum
,

207 
uöt16_t
 
vÆ
)

209 
mii_dev
 *
bus
 = 
phydev
->bus;

211  
bus
->
	`wrôe
(bus, 
phydev
->
addr
, 
devad
, 
ªgnum
, 
vÆ
);

212 
	}
}

214 #ifde‡
CONFIG_PHYLIB_10G


215 
phy_drivî
 
gí10g_drivî
;

218 
ölöe
 
	$is_10g_öãrÁ˚
(
phy_öãrÁ˚_t
 
öãrÁ˚
)

220  
öãrÁ˚
 =
PHY_INTERFACE_MODE_XGMII
;

221 
	}
}

225 
phy_öô
();

226 
phy_ª£t
(
phy_devi˚
 *
phydev
);

227 
phy_devi˚
 *
phy_föd_by_mask
(
mii_dev
 *
bus
, 
phy_mask
,

228 
phy_öãrÁ˚_t
 
öãrÁ˚
);

229 #ifde‡
CONFIG_DM_ETH


230 
phy_c⁄√˘_dev
(
phy_devi˚
 *
phydev
, 
udevi˚
 *
dev
);

231 
phy_devi˚
 *
phy_c⁄√˘
(
mii_dev
 *
bus
, 
addr
,

232 
udevi˚
 *
dev
,

233 
phy_öãrÁ˚_t
 
öãrÁ˚
);

235 
phy_c⁄√˘_dev
(
phy_devi˚
 *
phydev
, 
ëh_devi˚
 *
dev
);

236 
phy_devi˚
 *
phy_c⁄√˘
(
mii_dev
 *
bus
, 
addr
,

237 
ëh_devi˚
 *
dev
,

238 
phy_öãrÁ˚_t
 
öãrÁ˚
);

240 
phy_°¨tup
(
phy_devi˚
 *
phydev
);

241 
phy_c⁄fig
(
phy_devi˚
 *
phydev
);

242 
phy_shutdown
(
phy_devi˚
 *
phydev
);

243 
phy_ªgi°î
(
phy_drivî
 *
drv
);

244 
phy_£t_suµ‹ãd
(
phy_devi˚
 *
phydev
, 
u32
 
max_•ìd
);

245 
gíphy_c⁄fig_™eg
(
phy_devi˚
 *
phydev
);

246 
gíphy_ª°¨t_™eg
(
phy_devi˚
 *
phydev
);

247 
gíphy_upd©e_lök
(
phy_devi˚
 *
phydev
);

248 
gíphy_∑r£_lök
(
phy_devi˚
 *
phydev
);

249 
gíphy_c⁄fig
(
phy_devi˚
 *
phydev
);

250 
gíphy_°¨tup
(
phy_devi˚
 *
phydev
);

251 
gíphy_shutdown
(
phy_devi˚
 *
phydev
);

252 
gí10g_c⁄fig
(
phy_devi˚
 *
phydev
);

253 
gí10g_°¨tup
(
phy_devi˚
 *
phydev
);

254 
gí10g_shutdown
(
phy_devi˚
 *
phydev
);

255 
gí10g_discovî_mmds
(
phy_devi˚
 *
phydev
);

257 
phy_mv88e61xx_öô
();

258 
phy_aqu™tü_öô
();

259 
phy_©hîos_öô
();

260 
phy_brﬂdcom_öô
();

261 
phy_c‹töa_öô
();

262 
phy_davicom_öô
();

263 
phy_ë1011c_öô
();

264 
phy_lxt_öô
();

265 
phy_m¨vñl_öô
();

266 
phy_mi¸ñ_öô
();

267 
phy_«t£mi_öô
();

268 
phy_ªÆãk_öô
();

269 
phy_smsc_öô
();

270 
phy_ãø√tics_öô
();

271 
phy_ti_öô
();

272 
phy_vôes£_öô
();

273 
phy_xûöx_öô
();

275 
bﬂrd_phy_c⁄fig
(
phy_devi˚
 *
phydev
);

276 
gë_phy_id
(
mii_dev
 *
bus
, 
addr
, 
devad
, 
u32
 *
phy_id
);

284 
phy_gë_öãrÁ˚_by_«me
(c⁄° *
°r
);

291 
ölöe
 
u8
 
	$phy_öãrÁ˚_is_rgmii
(
phy_devi˚
 *
phydev
)

293  
phydev
->
öãrÁ˚
 >
PHY_INTERFACE_MODE_RGMII
 &&

294 
phydev
->
öãrÁ˚
 <
PHY_INTERFACE_MODE_RGMII_TXID
;

295 
	}
}

302 
ölöe
 
u8
 
	$phy_öãrÁ˚_is_sgmii
(
phy_devi˚
 *
phydev
)

304  
phydev
->
öãrÁ˚
 >
PHY_INTERFACE_MODE_SGMII
 &&

305 
phydev
->
öãrÁ˚
 <
PHY_INTERFACE_MODE_QSGMII
;

306 
	}
}

309 
	#PHY_UID_CS4340
 0x13e51002

	)

310 
	#PHY_UID_TN2020
 0x00a19410

	)

	@libethernet/src/uboot/realtek.c

13 
	~"comm⁄.h
"

14 
	~"bô›s.h
"

15 
	~"phy.h
"

17 
	#PHY_RTL8211x_FORCE_MASTER
 
	`BIT
(1)

	)

18 
	#PHY_RTL8211E_PINE64_GIGABIT_FIX
 
	`BIT
(2)

	)

20 
	#PHY_AUTONEGOTIATE_TIMEOUT
 5000

	)

23 
	#MIIM_RTL8211x_CTRL1000T_MSCE
 
	`BIT
(12);

	)

24 
	#MIIM_RTL8211x_CTRL1000T_MASTER
 
	`BIT
(11);

	)

27 
	#MIIM_RTL8211x_PHY_STATUS
 0x11

	)

28 
	#MIIM_RTL8211x_PHYSTAT_SPEED
 0xc000

	)

29 
	#MIIM_RTL8211x_PHYSTAT_GBIT
 0x8000

	)

30 
	#MIIM_RTL8211x_PHYSTAT_100
 0x4000

	)

31 
	#MIIM_RTL8211x_PHYSTAT_DUPLEX
 0x2000

	)

32 
	#MIIM_RTL8211x_PHYSTAT_SPDDONE
 0x0800

	)

33 
	#MIIM_RTL8211x_PHYSTAT_LINK
 0x0400

	)

36 
	#MIIM_RTL8211x_PHY_INER
 0x12

	)

37 
	#MIIM_RTL8211x_PHY_INTR_ENA
 0x9f01

	)

38 
	#MIIM_RTL8211x_PHY_INTR_DIS
 0x0000

	)

41 
	#MIIM_RTL8211x_PHY_INSR
 0x13

	)

44 
	#MIIM_RTL8211F_PHY_STATUS
 0x1a

	)

45 
	#MIIM_RTL8211F_AUTONEG_ENABLE
 0x1000

	)

46 
	#MIIM_RTL8211F_PHYSTAT_SPEED
 0x0030

	)

47 
	#MIIM_RTL8211F_PHYSTAT_GBIT
 0x0020

	)

48 
	#MIIM_RTL8211F_PHYSTAT_100
 0x0010

	)

49 
	#MIIM_RTL8211F_PHYSTAT_DUPLEX
 0x0008

	)

50 
	#MIIM_RTL8211F_PHYSTAT_SPDDONE
 0x0800

	)

51 
	#MIIM_RTL8211F_PHYSTAT_LINK
 0x0004

	)

53 
	#MIIM_RTL8211E_CONFREG
 0x1c

	)

54 
	#MIIM_RTL8211E_CONFREG_TXD
 0x0002

	)

55 
	#MIIM_RTL8211E_CONFREG_RXD
 0x0004

	)

56 
	#MIIM_RTL8211E_CONFREG_MAGIC
 0xb400

	)

58 
	#MIIM_RTL8211E_EXT_PAGE_SELECT
 0x1e

	)

60 
	#MIIM_RTL8211F_PAGE_SELECT
 0x1f

	)

61 
	#MIIM_RTL8211F_TX_DELAY
 0x100

	)

62 
	#MIIM_RTL8211F_LCR
 0x10

	)

64 
	$πl8211b_¥obe
(
phy_devi˚
 *
phydev
)

66 #ifde‡
CONFIG_RTL8211X_PHY_FORCE_MASTER


67 
phydev
->
Êags
 |
PHY_RTL8211x_FORCE_MASTER
;

71 
	}
}

73 
	$πl8211e_¥obe
(
phy_devi˚
 *
phydev
)

75 #ifde‡
CONFIG_RTL8211E_PINE64_GIGABIT_FIX


76 
phydev
->
Êags
 |
PHY_RTL8211E_PINE64_GIGABIT_FIX
;

80 
	}
}

83 
	$πl8211x_c⁄fig
(
phy_devi˚
 *
phydev
)

85 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
, 
BMCR_RESET
);

90 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211x_PHY_INER
,

91 
MIIM_RTL8211x_PHY_INTR_DIS
);

93 i‡(
phydev
->
Êags
 & 
PHY_RTL8211x_FORCE_MASTER
) {

94 
ªg
;

96 
ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_CTRL1000
);

98 
ªg
 |
MIIM_RTL8211x_CTRL1000T_MSCE
;

100 
ªg
 |
MIIM_RTL8211x_CTRL1000T_MASTER
;

101 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_CTRL1000
, 
ªg
);

103 i‡(
phydev
->
Êags
 & 
PHY_RTL8211E_PINE64_GIGABIT_FIX
) {

104 
ªg
;

106 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211F_PAGE_SELECT
,

108 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
,

109 
MIIM_RTL8211E_EXT_PAGE_SELECT
, 0xa4);

110 
ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211E_CONFREG
);

112 
ªg
 &~(
MIIM_RTL8211E_CONFREG_TXD
 | 
MIIM_RTL8211E_CONFREG_RXD
);

114 
ªg
 |
MIIM_RTL8211E_CONFREG_MAGIC
;

115 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211E_CONFREG
, 
ªg
);

116 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211F_PAGE_SELECT
,

120 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211x_PHY_INER
);

122 
	`gíphy_c⁄fig_™eg
(
phydev
);

125 
	}
}

127 
	$πl8211f_c⁄fig
(
phy_devi˚
 *
phydev
)

129 
u16
 
ªg
;

131 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MII_BMCR
, 
BMCR_RESET
);

133 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
,

134 
MIIM_RTL8211F_PAGE_SELECT
, 0xd08);

135 
ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 0x11);

138 i‡(
phydev
->
öãrÁ˚
 =
PHY_INTERFACE_MODE_RGMII_ID
 ||

139 
phydev
->
öãrÁ˚
 =
PHY_INTERFACE_MODE_RGMII_TXID
)

140 
ªg
 |
MIIM_RTL8211F_TX_DELAY
;

142 
ªg
 &~
MIIM_RTL8211F_TX_DELAY
;

144 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 0x11, 
ªg
);

146 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
,

147 
MIIM_RTL8211F_PAGE_SELECT
, 0x0);

150 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
,

151 
MIIM_RTL8211F_PAGE_SELECT
, 0xd04);

152 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 0x10, 0x617f);

153 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
,

154 
MIIM_RTL8211F_PAGE_SELECT
, 0x0);

156 
	`gíphy_c⁄fig_™eg
(
phydev
);

159 
	}
}

161 
	$πl8211x_∑r£_°©us
(
phy_devi˚
 *
phydev
)

163 
•ìd
;

164 
mii_ªg
;

166 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211x_PHY_STATUS
);

168 i‡(!(
mii_ªg
 & 
MIIM_RTL8211x_PHYSTAT_SPDDONE
)) {

169 
i
 = 0;

172 
phydev
->
lök
 = 1;

173 
	`puts
("Waiting for PHYÑealtimeÜink");

174 !(
mii_ªg
 & 
MIIM_RTL8211x_PHYSTAT_SPDDONE
)) {

176 i‡(
i
 > 
PHY_AUTONEGOTIATE_TIMEOUT
) {

177 
	`puts
(" TIMEOUT !\n");

178 
phydev
->
lök
 = 0;

182 i‡((
i
++ % 1000) == 0)

183 
	`putch¨
('.');

184 
	`uboŸ_udñay
(1000);

185 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
,

186 
MIIM_RTL8211x_PHY_STATUS
);

188 
	`puts
(" done\n");

189 
	`uboŸ_udñay
(500000);

191 i‡(
mii_ªg
 & 
MIIM_RTL8211x_PHYSTAT_LINK
)

192 
phydev
->
lök
 = 1;

194 
phydev
->
lök
 = 0;

197 i‡(
mii_ªg
 & 
MIIM_RTL8211x_PHYSTAT_DUPLEX
)

198 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

200 
phydev
->
du∂ex
 = 
DUPLEX_HALF
;

202 
•ìd
 = (
mii_ªg
 & 
MIIM_RTL8211x_PHYSTAT_SPEED
);

204 
•ìd
) {

205 
MIIM_RTL8211x_PHYSTAT_GBIT
:

206 
phydev
->
•ìd
 = 
SPEED_1000
;

208 
MIIM_RTL8211x_PHYSTAT_100
:

209 
phydev
->
•ìd
 = 
SPEED_100
;

212 
phydev
->
•ìd
 = 
SPEED_10
;

216 
	}
}

218 
	$πl8211f_∑r£_°©us
(
phy_devi˚
 *
phydev
)

220 
•ìd
;

221 
mii_ªg
;

222 
i
 = 0;

224 
	`phy_wrôe
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211F_PAGE_SELECT
, 0xa43);

225 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
, 
MIIM_RTL8211F_PHY_STATUS
);

227 
phydev
->
lök
 = 1;

228 !(
mii_ªg
 & 
MIIM_RTL8211F_PHYSTAT_LINK
)) {

229 i‡(
i
 > 
PHY_AUTONEGOTIATE_TIMEOUT
) {

230 
	`puts
(" TIMEOUT !\n");

231 
phydev
->
lök
 = 0;

235 i‡((
i
++ % 1000) == 0)

236 
	`putch¨
('.');

237 
	`uboŸ_udñay
(1000);

238 
mii_ªg
 = 
	`phy_ªad
(
phydev
, 
MDIO_DEVAD_NONE
,

239 
MIIM_RTL8211F_PHY_STATUS
);

242 i‡(
mii_ªg
 & 
MIIM_RTL8211F_PHYSTAT_DUPLEX
)

243 
phydev
->
du∂ex
 = 
DUPLEX_FULL
;

245 
phydev
->
du∂ex
 = 
DUPLEX_HALF
;

247 
•ìd
 = (
mii_ªg
 & 
MIIM_RTL8211F_PHYSTAT_SPEED
);

249 
•ìd
) {

250 
MIIM_RTL8211F_PHYSTAT_GBIT
:

251 
phydev
->
•ìd
 = 
SPEED_1000
;

253 
MIIM_RTL8211F_PHYSTAT_100
:

254 
phydev
->
•ìd
 = 
SPEED_100
;

257 
phydev
->
•ìd
 = 
SPEED_10
;

261 
	}
}

263 
	$πl8211x_°¨tup
(
phy_devi˚
 *
phydev
)

265 
ªt
;

268 
ªt
 = 
	`gíphy_upd©e_lök
(
phydev
);

269 i‡(
ªt
)

270  
ªt
;

272  
	`πl8211x_∑r£_°©us
(
phydev
);

273 
	}
}

275 
	$πl8211e_°¨tup
(
phy_devi˚
 *
phydev
)

277 
ªt
;

279 
ªt
 = 
	`gíphy_upd©e_lök
(
phydev
);

280 i‡(
ªt
)

281  
ªt
;

283  
	`gíphy_∑r£_lök
(
phydev
);

284 
	}
}

286 
	$πl8211f_°¨tup
(
phy_devi˚
 *
phydev
)

288 
ªt
;

291 
ªt
 = 
	`gíphy_upd©e_lök
(
phydev
);

292 i‡(
ªt
)

293  
ªt
;

296  
	`πl8211f_∑r£_°©us
(
phydev
);

297 
	}
}

300 
phy_drivî
 
	gRTL8211B_drivî
 = {

301 .
«me
 = "RealTek RTL8211B",

302 .
	guid
 = 0x1cc912,

303 .
	gmask
 = 0xffffff,

304 .
	g„©uªs
 = 
PHY_GBIT_FEATURES
,

305 .
	g¥obe
 = &
πl8211b_¥obe
,

306 .
	gc⁄fig
 = &
πl8211x_c⁄fig
,

307 .
	g°¨tup
 = &
πl8211x_°¨tup
,

308 .
	gshutdown
 = &
gíphy_shutdown
,

312 
phy_drivî
 
	gRTL8211E_drivî
 = {

313 .
«me
 = "RealTek RTL8211E",

314 .
	guid
 = 0x1cc915,

315 .
	gmask
 = 0xffffff,

316 .
	g„©uªs
 = 
PHY_GBIT_FEATURES
,

317 .
	g¥obe
 = &
πl8211e_¥obe
,

318 .
	gc⁄fig
 = &
πl8211x_c⁄fig
,

319 .
	g°¨tup
 = &
πl8211e_°¨tup
,

320 .
	gshutdown
 = &
gíphy_shutdown
,

324 
phy_drivî
 
	gRTL8211DN_drivî
 = {

325 .
«me
 = "RealTek RTL8211DN",

326 .
	guid
 = 0x1cc914,

327 .
	gmask
 = 0xffffff,

328 .
	g„©uªs
 = 
PHY_GBIT_FEATURES
,

329 .
	gc⁄fig
 = &
πl8211x_c⁄fig
,

330 .
	g°¨tup
 = &
πl8211x_°¨tup
,

331 .
	gshutdown
 = &
gíphy_shutdown
,

335 
phy_drivî
 
	gRTL8211F_drivî
 = {

336 .
«me
 = "RealTek RTL8211F",

337 .
	guid
 = 0x1cc916,

338 .
	gmask
 = 0xffffff,

339 .
	g„©uªs
 = 
PHY_GBIT_FEATURES
,

340 .
	gc⁄fig
 = &
πl8211f_c⁄fig
,

341 .
	g°¨tup
 = &
πl8211f_°¨tup
,

342 .
	gshutdown
 = &
gíphy_shutdown
,

345 
	$phy_ªÆãk_öô
()

347 
	`phy_ªgi°î
(&
RTL8211B_drivî
);

348 
	`phy_ªgi°î
(&
RTL8211E_drivî
);

349 
	`phy_ªgi°î
(&
RTL8211F_drivî
);

350 
	`phy_ªgi°î
(&
RTL8211DN_drivî
);

353 
	}
}

	@libethernet/src/uboot/system.h

4 #i‚de‡
__ASM_ARM_SYSTEM_H


5 
	#__ASM_ARM_SYSTEM_H


	)

7 
	~<autoc⁄f.h
>

9 #ifde‡
CONFIG_ARM64


14 
	#CR_M
 (1 << 0Ë

	)

15 
	#CR_A
 (1 << 1Ë

	)

16 
	#CR_C
 (1 << 2Ë

	)

17 
	#CR_SA
 (1 << 3Ë

	)

18 
	#CR_I
 (1 << 12Ë

	)

19 
	#CR_WXN
 (1 << 19Ë

	)

20 
	#CR_EE
 (1 << 25Ë

	)

22 
	#PGTABLE_SIZE
 (0x10000)

	)

24 
	#MMU_SECTION_SHIFT
 21

	)

25 
	#MMU_SECTION_SIZE
 (1 << 
MMU_SECTION_SHIFT
)

	)

27 #i‚de‡
__ASSEMBLY__


29 
	edˇche_›ti⁄
 {

30 
	mDCACHE_OFF
 = 0x3,

33 
	#isb
() \

34 ({
asm
 volatile( \

36 })

	)

38 
	#wfi
() \

39 ({
asm
 volatile( \

41 })

	)

43 
ölöe
 
	$cuºít_ñ
()

45 
ñ
;

46 
asm
 vﬁ©ûe("mr†%0, CuºítEL" : "Ù" (
ñ
) : : "cc");

47  
ñ
 >> 2;

48 
	}
}

50 
ölöe
 
	$gë_s˘Ã
()

52 
ñ
, 
vÆ
;

54 
ñ
 = 
	`cuºít_ñ
();

55 i‡(
ñ
 == 1)

56 
asm
 vﬁ©ûe("mr†%0, s˘Ã_ñ1" : "Ù" (
vÆ
) : : "cc");

57 i‡(
ñ
 == 2)

58 
asm
 vﬁ©ûe("mr†%0, s˘Ã_ñ2" : "Ù" (
vÆ
) : : "cc");

60 
asm
 vﬁ©ûe("mr†%0, s˘Ã_ñ3" : "Ù" (
vÆ
) : : "cc");

62  
vÆ
;

63 
	}
}

65 
ölöe
 
	$£t_s˘Ã
(
vÆ
)

67 
ñ
;

69 
ñ
 = 
	`cuºít_ñ
();

70 i‡(
ñ
 == 1)

71 
asm
 vﬁ©ûe("m§ s˘Ã_ñ1, %0" : : "r" (
vÆ
) : "cc");

72 i‡(
ñ
 == 2)

73 
asm
 vﬁ©ûe("m§ s˘Ã_ñ2, %0" : : "r" (
vÆ
) : "cc");

75 
asm
 vﬁ©ûe("m§ s˘Ã_ñ3, %0" : : "r" (
vÆ
) : "cc");

77 
asm
 volatile("isb");

78 
	}
}

80 
__asm_Êush_dˇche_Æl
();

81 
__asm_övÆid©e_dˇche_Æl
();

82 
__asm_Êush_dˇche_ønge
(
u64
 
°¨t
, u64 
íd
);

83 
__asm_övÆid©e_éb_Æl
();

84 
__asm_övÆid©e_iˇche_Æl
();

85 
__asm_Êush_l3_ˇche
();

87 
¨mv8_swôch_to_ñ2
();

88 
¨mv8_swôch_to_ñ1
();

89 
gic_öô
();

90 
gic_£nd_sgi
(
sgöo
);

91 
waô_f‹_wakeup
();

92 
¥Ÿe˘_£cuª_ªgi⁄
();

93 
smp_kick_Æl_˝us
();

95 
Êush_l3_ˇche
();

101 
	#CPU_ARCH_UNKNOWN
 0

	)

102 
	#CPU_ARCH_ARMv3
 1

	)

103 
	#CPU_ARCH_ARMv4
 2

	)

104 
	#CPU_ARCH_ARMv4T
 3

	)

105 
	#CPU_ARCH_ARMv5
 4

	)

106 
	#CPU_ARCH_ARMv5T
 5

	)

107 
	#CPU_ARCH_ARMv5TE
 6

	)

108 
	#CPU_ARCH_ARMv5TEJ
 7

	)

109 
	#CPU_ARCH_ARMv6
 8

	)

110 
	#CPU_ARCH_ARMv7
 9

	)

115 
	#CR_M
 (1 << 0Ë

	)

116 
	#CR_A
 (1 << 1Ë

	)

117 
	#CR_C
 (1 << 2Ë

	)

118 
	#CR_W
 (1 << 3Ë

	)

119 
	#CR_P
 (1 << 4Ë

	)

120 
	#CR_D
 (1 << 5Ë

	)

121 
	#CR_L
 (1 << 6Ë

	)

122 
	#CR_B
 (1 << 7Ë

	)

123 
	#CR_S
 (1 << 8Ë

	)

124 
	#CR_R
 (1 << 9Ë

	)

125 
	#CR_F
 (1 << 10Ë

	)

126 
	#CR_Z
 (1 << 11Ë

	)

127 
	#CR_I
 (1 << 12Ë

	)

128 
	#CR_V
 (1 << 13Ë

	)

129 
	#CR_RR
 (1 << 14Ë

	)

130 
	#CR_L4
 (1 << 15Ë

	)

131 
	#CR_DT
 (1 << 16)

	)

132 
	#CR_IT
 (1 << 18)

	)

133 
	#CR_ST
 (1 << 19)

	)

134 
	#CR_FI
 (1 << 21Ë

	)

135 
	#CR_U
 (1 << 22Ë

	)

136 
	#CR_XP
 (1 << 23Ë

	)

137 
	#CR_VE
 (1 << 24Ë

	)

138 
	#CR_EE
 (1 << 25Ë

	)

139 
	#CR_TRE
 (1 << 28Ë

	)

140 
	#CR_AFE
 (1 << 29Ë

	)

141 
	#CR_TE
 (1 << 30Ë

	)

143 
	#PGTABLE_SIZE
 (4096 * 4)

	)

153 
	#__asmeq
(
x
, 
y
Ë".i‚¯" x "," y " ; .î∏; .ídif\n\t"

	)

155 #i‚de‡
__ASSEMBLY__


186 
ßve_boŸ_∑øms_ªt
();

188 
	#n›
(Ë
__asm__
 
	`__vﬁ©ûe__
("mov\å0,r0\t@Ç›\n\t");

	)

190 #ifde‡
CONFIG_ARCH_ARM_V7A


191 
	#wfi
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("wfi" : : : "mem‹y")

	)

193 
	#wfi
()

	)

196 
ölöe
 
	$gë_¸
()

198 
vÆ
;

199 
asm
 vﬁ©ûe("mr¯p15, 0, %0, c1, c0, 0 @ gë CR" : "Ù" (
vÆ
) : : "cc");

200  
vÆ
;

201 
	}
}

203 
ölöe
 
	$£t_¸
(
vÆ
)

205 
asm
 volatile("mcrÖ15, 0, %0, c1, c0, 0 @ set CR"

206 : : "r" (
vÆ
) : "cc");

207 
	`isb
();

208 
	}
}

210 
ölöe
 
	$gë_da¸
()

212 
vÆ
;

213 
	`asm
("mr¯p15, 0, %0, c3, c0, 0 @ gë DACR" : "Ù" (
vÆ
) : : "cc");

214  
vÆ
;

215 
	}
}

217 
ölöe
 
	$£t_da¸
(
vÆ
)

219 
asm
 volatile("mcrÖ15, 0, %0, c3, c0, 0 @ set DACR"

220 : : "r" (
vÆ
) : "cc");

221 
	`isb
();

222 
	}
}

224 #ifde‡
CONFIG_ARCH_ARM_V7A


226 
	#TTB_SECT_NS_MASK
 (1 << 19)

	)

227 
	#TTB_SECT_NG_MASK
 (1 << 17)

	)

228 
	#TTB_SECT_S_MASK
 (1 << 16)

	)

230 
	#TTB_SECT_TEX
(
x
Ë((x & 0x7Ë<< 12)

	)

231 
	#TTB_SECT_DOMAIN
(
x
Ë((x & 0xfË<< 5)

	)

232 
	#TTB_SECT_XN_MASK
 (1 << 4)

	)

233 
	#TTB_SECT_C_MASK
 (1 << 3)

	)

234 
	#TTB_SECT_B_MASK
 (1 << 2)

	)

235 
	#TTB_SECT
 (2 << 0)

	)

238 
	edˇche_›ti⁄
 {

239 
	mDCACHE_OFF
 = 
TTB_SECT_S_MASK
 | 
TTB_SECT_DOMAIN
(0) |

240 
TTB_SECT_XN_MASK
 | 
TTB_SECT
,

241 
	mDCACHE_WRITETHROUGH
 = 
DCACHE_OFF
 | 
TTB_SECT_C_MASK
,

242 
	mDCACHE_WRITEBACK
 = 
DCACHE_WRITETHROUGH
 | 
TTB_SECT_B_MASK
,

243 
	mDCACHE_WRITEALLOC
 = 
DCACHE_WRITEBACK
 | 
TTB_SECT_TEX
(1),

248 
	edˇche_›ti⁄
 {

249 
	mDCACHE_OFF
 = 0x12,

250 
	mDCACHE_WRITETHROUGH
 = 0x1a,

251 
	mDCACHE_WRITEBACK
 = 0x1e,

252 
	mDCACHE_WRITEALLOC
 = 0x16,

258 
	mMMU_SECTION_SHIFT
 = 20,

259 
	mMMU_SECTION_SIZE
 = 1 << 
MMU_SECTION_SHIFT
,

262 #ifde‡
CONFIG_ARCH_ARM_V7A


264 
	#TTBR0_BASE_ADDR_MASK
 0xFFFFC000

	)

265 
	#TTBR0_RGN_NC
 (0 << 3)

	)

266 
	#TTBR0_RGN_WBWA
 (1 << 3)

	)

267 
	#TTBR0_RGN_WT
 (2 << 3)

	)

268 
	#TTBR0_RGN_WB
 (3 << 3)

	)

270 
	#TTBR0_IRGN_NC
 (0 << 0 | 0 << 6)

	)

271 
	#TTBR0_IRGN_WBWA
 (0 << 0 | 1 << 6)

	)

272 
	#TTBR0_IRGN_WT
 (1 << 0 | 0 << 6)

	)

273 
	#TTBR0_IRGN_WB
 (1 << 0 | 1 << 6)

	)

282 
mmu_∑ge_èbÀ_Êush
(
°¨t
, 
°›
);

286 
	#¨ch_Æign_°ack
(
x
Ë(x)

	)

291 #i‚de‡
__ASSEMBLY__


299 
mmu_£t_ªgi⁄_dˇche_behaviour
(
phys_addr_t
 
°¨t
, 
size_t
 
size
,

300 
dˇche_›ti⁄
 
›ti⁄
);

302 #ifde‡
CONFIG_SYS_NONCACHED_MEMORY


303 
n⁄ˇched_öô
();

304 
phys_addr_t
 
n⁄ˇched_Æloc
(
size_t
 
size
, size_à
Æign
);

	@libethernet/src/unimplemented.c

12 
	~<°dio.h
>

13 
	~<°döt.h
>

14 
	~<˘y≥.h
>

16 
	~"unim∂emíãd.h
"

18 
uöt64_t
 
	guboŸ_time°amp_‰eq
 = 0;

20 
	$uboŸ_timî_öô
()

22 
uboŸ_time°amp_‰eq
 = 
	`time°amp_gë_‰eq
();

23 
	}
}

25 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
,

26 
ba£
)

28 
ªsu…
 = 0;

29 
vÆue
;

31 i‡(*
˝
 == '0') {

32 
˝
++;

33 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

34 
ba£
 = 16;

35 
˝
++;

38 i‡(!
ba£
)

39 
ba£
 = 8;

42 i‡(!
ba£
)

43 
ba£
 = 10;

45 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝-'0' : (
	`i¶owî
(*cp)

46 ? 
	`touµî
(*
˝
Ë: *˝)-'A'+10Ë< 
ba£
) {

47 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

48 
˝
++;

51 i‡(
ídp
)

52 *
ídp
 = (*)
˝
;

54  
ªsu…
;

55 
	}
}

	@libethernet/src/unimplemented.h

12 #¥agm®
⁄˚


14 
	~<°ddef.h
>

15 
	~<°dio.h
>

16 
	~<°döt.h
>

17 
	~<°rög.h
>

18 
	~<ëhî√t/ëhî√t.h
>

19 
	~<˛ock/time°amp.h
>

20 
	~<utûs/utû.h
>

26 
ëhif_dma_›s_t
 *
uboŸ_gë_dma_›s
();

28 
uboŸ_¥o˚ss_ª˚ived_∑ckë
(
uöt8_t
 *
ö_∑ckë
, 
Àn
);

30 
uöt64_t
 
uboŸ_time°amp_‰eq
;

32 
uboŸ_timî_öô
();

34 
ölöe
 
	$uboŸ_udñay
(
uöt32_t
 
us
)

36 
	`udñay
(
us
, 
uboŸ_time°amp_‰eq
);

37 
	}
}

39 
ölöe
 
uöt64_t
 
	$uboŸ_gë_timî
(
uöt64_t
 
ba£
) {

40  
	`time°amp_ms
(
uboŸ_time°amp_‰eq
Ë- 
ba£
;

41 
	}
}

43 
ölöe
 
ëhif_dma_addr_t
 
	$uboŸ_dma_mÆloc
(
uöt32_t
 
size
, uöt32_à
Æign
)

45  
	`uboŸ_gë_dma_›s
()->
	`dma_mÆloc
(
size
, 
Æign
);

46 
	}
}

48 
ölöe
 
uöçå_t
 
	$uboŸ_dma_phys_to_vút
(
uöçå_t
 
phys
)

50  
	`uboŸ_gë_dma_›s
()->
	`dma_phys_to_vút
(
phys
);

51 
	}
}

53 
ölöe
 
uöt32_t
 
	$uboŸ_Êush_dˇche_ønge
(
°¨t
, 
°›
)

55  
	`uboŸ_gë_dma_›s
()->
	`Êush_dˇche_ønge
(
°¨t
, 
°›
-start);

56 
	}
}

58 
ölöe
 
uöt32_t
 
	$uboŸ_övÆid©e_dˇche_ønge
(
°¨t
, 
°›
)

60  
	`uboŸ_gë_dma_›s
()->
	`övÆid©e_dˇche_ønge
(
°¨t
, 
°›
-start);

61 
	}
}

67 
	#CONFIG_SYS_CACHELINE_SIZE
 64

	)

68 
	#ARCH_DMA_MINALIGN
 
CONFIG_SYS_CACHELINE_SIZE


	)

70 
	#max
(
a
,
b
) \

71 ({ 
	`__ty≥of__
 (
a
Ë
_a
 = (a); \

72 
	`__ty≥of__
 (
b
Ë
_b
 = (b); \

73 
_a
 > 
_b
 ? _®: _b; })

	)

75 #i‚de‡
RESOURCE


76 
	#RESOURCE
(
m≠≥r
, 
id
Ë
	`ps_io_m≠
(m≠≥r, (
uöçå_t
Ëid##
_PADDR
, id##
_SIZE
, 0, 
PS_MEM_NORMAL
)

	)

77 
	#UNRESOURCE
(
m≠≥r
, 
id
, 
addr
Ë
	`ps_io_unm≠
(m≠≥r,áddr, id##
_SIZE
)

	)

80 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

81 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

83 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

84 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

86 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

87 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

88 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

89 
	#__Æüs
(
symbﬁ
Ë
	`__©åibuã__
((
	`Æüs
(#symbﬁ)))

	)

90 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

92 
	#MAX_PKT_SIZE
 1536

	)

94 
	#BITS_PER_LONG
 32

	)

96 
	#ENOTSUPP
 524

	)

98 
sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
);

100 #ifde‡
CONFIG_PHYS_64BIT


101 
	tphys_addr_t
;

102 
	tphys_size_t
;

105 
	tphys_addr_t
;

106 
	tphys_size_t
;

109 
uöt64_t
 
	tu64
;

110 
uöt32_t
 
	tu32
;

111 
uöt16_t
 
	tu16
;

112 
uöt8_t
 
	tu8
;

114 
öt64_t
 
	ts64
;

115 
öt32_t
 
	ts32
;

116 
öt16_t
 
	ts16
;

117 
öt8_t
 
	ts8
;

119 
	tul⁄g
;

120 
	tush‹t
;

121 
	tuöt
;

122 
	tuch¨
;

124 
u64
 
	t__u64
;

125 
u32
 
	t__u32
;

126 
u16
 
	t__u16
;

127 
u8
 
	t__u8
;

129 
	#__bôwi£


	)

130 
	#__f‹˚


	)

132 
s64
 
	t__bôwi£
 
	t__À64
;

133 
s32
 
	t__bôwi£
 
	t__À32
;

134 
s16
 
	t__bôwi£
 
	t__À16
;

135 
s8
 
	t__bôwi£
 
	t__À8
;

137 
s64
 
	t__bôwi£
 
	t__be64
;

138 
s32
 
	t__bôwi£
 
	t__be32
;

139 
s16
 
	t__bôwi£
 
	t__be16
;

140 
s8
 
	t__bôwi£
 
	t__be8
;

142 
	t__bôwi£
 
	tgÂ_t
;

144 
	#gpio_öô
()

	)

145 
	#WATCHDOG_RESET
()

	)

147 
	sbd_öfo
 {

148 
	mbi_mem°¨t
;

149 
phys_size_t
 
	mbi_memsize
;

150 
	mbi_Êash°¨t
;

151 
	mbi_Êashsize
;

152 
	mbi_Êashoff£t
;

153 
	mbi_§am°¨t
;

154 
	mbi_§amsize
;

155 #ifde‡
CONFIG_AVR32


156 
	mbi_phy_id
[4];

157 
	mbi_bﬂrd_numbî
;

159 #ifde‡
CONFIG_ARM


160 
	mbi_¨m_‰eq
;

161 
	mbi_d•_‰eq
;

162 
	mbi_ddr_‰eq
;

164 #i‡
deföed
(
CONFIG_5xx
Ë|| deföed(
CONFIG_8xx
Ë|| deföed(
CONFIG_MPC8260
) \

165 || 
deföed
(
CONFIG_E500
Ë|| deföed(
CONFIG_MPC86xx
)

166 
	mbi_immr_ba£
;

168 #i‡
deföed
(
CONFIG_MPC5xxx
Ë|| deföed(
CONFIG_M68K
)

169 
	mbi_mb¨_ba£
;

171 #i‡
deföed
(
CONFIG_MPC83xx
)

172 
	mbi_immrb¨
;

174 
	mbi_boŸÊags
;

175 
	mbi_ù_addr
;

176 
	mbi_íëaddr
[6];

177 
	mbi_ëh•ìd
;

178 
	mbi_öt‰eq
;

179 
	mbi_bus‰eq
;

180 #i‡
deföed
(
CONFIG_CPM2
)

181 
	mbi_˝m‰eq
;

182 
	mbi_brg‰eq
;

183 
	mbi_scc‰eq
;

184 
	mbi_vco
;

186 #i‡
deföed
(
CONFIG_MPC512X
)

187 
	mbi_ùs‰eq
;

189 #i‡
deföed
(
CONFIG_MPC5xxx
Ë|| deföed(
CONFIG_M68K
)

190 
	mbi_ùb‰eq
;

191 
	mbi_pci‰eq
;

193 #i‡
deföed
(
CONFIG_EXTRA_CLOCK
)

194 
	mbi_öp‰eq
;

195 
	mbi_vco‰eq
;

196 
	mbi_Êb‰eq
;

198 #i‡
deföed
(
CONFIG_405
) || \

199 
deföed
(
CONFIG_405GP
) || \

200 
deföed
(
CONFIG_405EP
) || \

201 
deföed
(
CONFIG_405EZ
) || \

202 
deföed
(
CONFIG_405EX
) || \

203 
deföed
(
CONFIG_440
)

204 
	mbi_s_vîsi⁄
[4];

205 
	mbi_r_vîsi⁄
[32];

206 
	mbi_¥oc‰eq
;

207 
	mbi_∂b_bus‰eq
;

208 
	mbi_pci_bus‰eq
;

209 
	mbi_pci_íëaddr
[6];

212 #ifde‡
CONFIG_HAS_ETH1


213 
	mbi_íë1addr
[6];

215 #ifde‡
CONFIG_HAS_ETH2


216 
	mbi_íë2addr
[6];

218 #ifde‡
CONFIG_HAS_ETH3


219 
	mbi_íë3addr
[6];

221 #ifde‡
CONFIG_HAS_ETH4


222 
	mbi_íë4addr
[6];

224 #ifde‡
CONFIG_HAS_ETH5


225 
	mbi_íë5addr
[6];

228 #i‡
deföed
(
CONFIG_405GP
Ë|| deföed(
CONFIG_405EP
) || \

229 
deföed
(
CONFIG_405EZ
Ë|| deföed(
CONFIG_440GX
) || \

230 
deföed
(
CONFIG_440EP
Ë|| deföed(
CONFIG_440GR
) || \

231 
deföed
(
CONFIG_440EPX
Ë|| deföed(
CONFIG_440GRX
) || \

232 
deföed
(
CONFIG_460EX
Ë|| deföed(
CONFIG_460GT
)

233 
	mbi_›b‰eq
;

234 
	mbi_iic_Á°
[2];

236 #i‡
deföed
(
CONFIG_4xx
)

237 #i‡
deföed
(
CONFIG_440GX
) || \

238 
deföed
(
CONFIG_460EX
Ë|| deföed(
CONFIG_460GT
)

239 
	mbi_phynum
[4];

240 
	mbi_phymode
[4];

241 #ñi‡
deföed
(
CONFIG_405EP
Ë|| deföed(
CONFIG_405EX
Ë|| deföed(
CONFIG_440
)

242 
	mbi_phynum
[2];

243 
	mbi_phymode
[2];

245 
	mbi_phynum
[1];

246 
	mbi_phymode
[1];

249 
ul⁄g
 
	mbi_¨ch_numbî
;

250 
ul⁄g
 
	mbi_boŸ_∑øms
;

251 #ifde‡
CONFIG_NR_DRAM_BANKS


253 
phys_addr_t
 
	m°¨t
;

254 
phys_size_t
 
	msize
;

255 } 
	mbi_døm
[
CONFIG_NR_DRAM_BANKS
];

257 } 
	tbd_t
;

	@libsel4cspace/include/cspace/bitfield.h

12 #¥agm®
⁄˚


14 
	~<°rög.h
>

15 
	~<°ddef.h
>

16 
	~<°dboﬁ.h
>

17 
	~<utûs/utû.h
>

19 
	#WORD_BITS
 ((Ë* 8u)

	)

20 
	#WORD_INDEX
(
bô
Ë((bôË/ 
WORD_BITS
)

	)

21 
	#BIT_INDEX
(
bô
Ë((bôË% 
WORD_BITS
)

	)

26 
ölöe
 
	$bf_£t_bô
(*
bôs
, 
bô
)

28 
bôs
[
	`WORD_INDEX
(
bô
)] |(
	`BIT
(
	`BIT_INDEX
(bit)));

29 
	}
}

32 
ölöe
 
	$bf_˛r_bô
(*
bôs
, 
bô
)

34 
bôs
[
	`WORD_INDEX
(
bô
)] &~(
	`BIT
(
	`BIT_INDEX
(bit)));

35 
	}
}

37 
ölöe
 
boﬁ
 
	$bf_gë_bô
(*
bôs
, 
bô
)

39  (
boﬁ
Ë!!(
bôs
[
	`WORD_INDEX
(
bô
)] & (
	`BIT
(
	`BIT_INDEX
(bit))));

40 
	}
}

42 
ölöe
 
	$bf_fú°_‰ì
(
size_t
 
w‹ds
, 
bôs
[words])

45 
i
 = 0;

46 ; 
i
 < 
w‹ds
 && 
bôs
[i] =
ULONG_MAX
; i++);

48 
bô
 = 
i
 * 
WORD_BITS
;

51 
vÆ
 = ~
bôs
[
i
];

53 
	`as£π
(
vÆ
 != 0);

55 i‡(
i
 < 
w‹ds
) {

56 
bô
 +(
	`CTZL
(
vÆ
));

58  
bô
;

59 
	}
}

	@libsel4cspace/include/cspace/cspace.h

26 #¥agm®
⁄˚


28 
	~<utûs/utû.h
>

29 
	~<°döt.h
>

30 
	~<£l4/£l4.h
>

31 
	~<aos/°ªº‹.h
>

32 
	~<°dlib.h
>

33 
	~<c•a˚/bôfõld.h
>

37 
	#MAPPING_SLOTS
 3u

	)

38 
	#WATERMARK_SLOTS
 (
MAPPING_SLOTS
 + 1)

	)

41 
	#CNODE_SIZE_BITS
 12u

	)

43 
	#CNODE_SLOT_BITS
(
x
Ë(x - 
£L4_SlŸBôs
)

	)

45 
	#CNODE_SLOTS
(
x
Ë(
	`BIT
(
	`CNODE_SLOT_BITS
(x)))

	)

48 
	#BITFIELD_SIZE
(
x
Ë(
	`CNODE_SLOTS
(xË/ 
£L4_W‹dBôs
)

	)

50 
	#BOT_LVL_NODES
(
x
Ë
	`BYTES_TO_4K_PAGES
((
bŸ_lvl_t
Ë* 
	`CNODE_SLOTS
(x))

	)

55 
	#NODE_INDEX
(
˝å
Ë((˝åË/ (
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
)Ë/ 
BOT_LVL_PER_NODE
)

	)

57 
	#CNODE_INDEX
(
˝å
Ë((˝åË/ (
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
)Ë% 
BOT_LVL_PER_NODE
)

	)

59 
	#TOP_LVL_INDEX
(
˝å
Ë((˝åË>> 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
))

	)

61 
	#BOT_LVL_INDEX
(
˝å
Ë((˝åË& 
	`MASK
(
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
)))

	)

66 
	mbf
[
BITFIELD_SIZE
(
CNODE_SIZE_BITS
)];

68 *
	mu¡y≥d
;

69 } 
	tPACKED
 
	tbŸ_lvl_t
;

72 
	#BOT_LVL_PER_NODE
 ((
PAGE_SIZE_4K
 - (
£L4_W‹d
Ë* 3Ë/ (
bŸ_lvl_t
))

	)

75 
£L4_W‹d
 
	mn_˙odes
;

77 *
	mu¡y≥d
;

79 
£L4_CPå
 
	m‰ame
;

81 
bŸ_lvl_t
 
	m˙odes
[
BOT_LVL_PER_NODE
];

82 } 
	tALIGN
(
	tPAGE_SIZE_4K
Ë
	tPACKED
 
	tbŸ_lvl_node_t
 ;

84 
	`°©ic_as£π
((
bŸ_lvl_node_t
Ë<
PAGE_SIZE_4K
, "botÜevelÇode size is correct");

95 * (*
	tc•a˚_m≠_‰ame_‚
)(*
	tcookõ
, 
	t£L4_CPå
 
	t‰ame
, seL4_CPå 
	t‰ì_¶Ÿs
[], 
	t£L4_W‹d
 *
	tu£d
);

100 * (*
	tc•a˚_Æloc_4k_ut_‚
)(*
	tcookõ
, 
	t£L4_CPå
 *
	tˇp
);

104 (*
	tc•a˚_‰ì_4k_ut_‚
)(*
	tcookõ
, *
	tu¡y≥d
);

109 
c•a˚_m≠_‰ame_‚
 
m≠_‰ame
;

110 
c•a˚_Æloc_4k_ut_‚
 
Æloc_4k_ut
;

111 
c•a˚_‰ì_4k_ut_‚
 
‰ì_4k_ut
;

112 *
cookõ
;

113 } 
	tc•a˚_Æloc_t
;

118 
c•a˚
 
	tc•a˚_t
;

119 
	sc•a˚
 {

121 
£L4_CPå
 
roŸ_˙ode
;

123 
boﬁ
 
two_Àvñ
;

125 
t›_lvl_size_bôs
;

132 *
t›_bf
;

135 
bŸ_lvl_node_t
 **
bŸ_lvl_nodes
;

138 
n_bŸ_lvl_nodes
;

141 *
u¡y≥d
;

144 
c•a˚_t
 *
boŸ°øp
;

148 
c•a˚_Æloc_t
 
Æloc
;

151 
£L4_CPå
 
w©îm¨k
[
WATERMARK_SLOTS
];

155 
CSPACE_NOERROR
 = 0,

156 
CSPACE_ERROR
 = -1

157 } 
	tc•a˚_îr_t
;

169 
	`c•a˚_¸óã_two_Àvñ
(
c•a˚_t
 *
boŸ°øp
, c•a˚_à*
èrgë
, 
c•a˚_Æloc_t
 
c•a˚_Æloc
);

180 
	`c•a˚_¸óã_⁄e_Àvñ
(
c•a˚_t
 *
boŸ°øp
, c•a˚_à*
èrgë
);

196 
	`c•a˚_de°roy
(
c•a˚_t
 *
c
);

208 
£L4_CPå
 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚_t
 *
c
);

221 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚_t
 *
c
, 
£L4_CPå
 
¶Ÿ
);

235 
ölöe
 
£L4_Eº‹
 
	$c•a˚_c›y
(
c•a˚_t
 *
de°
, 
£L4_CPå
 
de°_˝å
, c•a˚_à*
§c
, seL4_CPå 
§c_˝å
, 
£L4_C≠Rights_t
 
rights
)

237  
	`£L4_CNode_C›y
(
de°
->
roŸ_˙ode
, 
de°_˝å
, 
£L4_W‹dBôs
,

238 
§c
->
roŸ_˙ode
, 
§c_˝å
, 
£L4_W‹dBôs
, 
rights
);

239 
	}
}

248 
ölöe
 
£L4_Eº‹
 
	$c•a˚_dñëe
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
˝å
)

250  
	`£L4_CNode_Dñëe
(
c•a˚
->
roŸ_˙ode
, 
˝å
, 
£L4_W‹dBôs
);

251 
	}
}

265 
ölöe
 
£L4_Eº‹
 
	$c•a˚_möt
(
c•a˚_t
 *
de°
, 
£L4_CPå
 
de°_˝å
, c•a˚_à*
§c
, seL4_CPå 
§c_˝å
, 
£L4_C≠Rights_t
 
rights
, 
£L4_W‹d
 
badge
)

267  
	`£L4_CNode_Möt
(
de°
->
roŸ_˙ode
, 
de°_˝å
, 
£L4_W‹dBôs
,

268 
§c
->
roŸ_˙ode
, 
§c_˝å
, 
£L4_W‹dBôs
, 
rights
, 
badge
);

269 
	}
}

282 
ölöe
 
£L4_Eº‹
 
	$c•a˚_move
(
c•a˚_t
 *
de°
, 
£L4_CPå
 
de°_˝å
, c•a˚_à*
§c
, seL4_CPå 
§c_˝å
)

284  
	`£L4_CNode_Move
(
de°
->
roŸ_˙ode
, 
de°_˝å
, 
£L4_W‹dBôs
, 
§c
->roŸ_˙ode, 
§c_˝å
, seL4_WordBits);

285 
	}
}

297 
ölöe
 
£L4_Eº‹
 
	$c•a˚_muèã
(
c•a˚_t
 *
de°
, 
£L4_CPå
 
de°_˝å
, c•a˚_à*
§c
, seL4_CPå 
§c_ˇp
, 
£L4_W‹d
 
badge
)

299  
	`£L4_CNode_Muèã
(
de°
->
roŸ_˙ode
, 
de°_˝å
, 
£L4_W‹dBôs
,

300 
§c
->
roŸ_˙ode
, 
§c_ˇp
, 
£L4_W‹dBôs
, 
badge
);

301 
	}
}

310 
ölöe
 
£L4_Eº‹
 
	$c•a˚_ªvoke
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
˝å
)

312  
	`£L4_CNode_Revoke
(
c•a˚
->
roŸ_˙ode
, 
˝å
, 
£L4_W‹dBôs
);

314 
	}
}

328 
ölöe
 
£L4_Eº‹
 
	$c•a˚_ßve_ª∂y_ˇp
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
˝å
)

330  
	`£L4_CNode_SaveCÆÀr
(
c•a˚
->
roŸ_˙ode
, 
˝å
, 
£L4_W‹dBôs
);

331 
	}
}

342 
ölöe
 
£L4_Eº‹
 
	$c•a˚_úq_c⁄åﬁ_gë
(
c•a˚_t
 *
de°
, 
£L4_CPå
 
˝å
, 
£L4_IRQC⁄åﬁ
 
úq_ˇp
, 
úq
, 
Àvñ
)

344  
	`£L4_IRQC⁄åﬁ_GëTriggî
(
úq_ˇp
, 
úq
, 
Àvñ
, 
de°
->
roŸ_˙ode
, 
˝å
, 
£L4_W‹dBôs
);

345 
	}
}

367 
£L4_Eº‹
 
c•a˚_u¡y≥d_ªty≥
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
ut
, seL4_CPå 
èrgë
,

368 
£L4_W‹d
 
ty≥
, 
size_t
 
size_bôs
);

	@libsel4cspace/src/cspace.c

12 
	~<autoc⁄f.h
>

13 
	~<utûs/utû.h
>

14 
	~<c•a˚/c•a˚.h
>

15 
	~<aos/£l4_zf_logif.h
>

16 
	~<£l4/£l4.h
>

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<as£π.h
>

22 
ölöe
 *
	$Æloc_4k_u¡y≥d
(
c•a˚_Æloc_t
 *
Æloc
, 
£L4_CPå
 *
de°
)

24 
	`as£π
(
Æloc
);

25 
	`as£π
(
Æloc
->
Æloc_4k_ut
);

26  
Æloc
->
	`Æloc_4k_ut
◊Œoc->
cookõ
, 
de°
);

27 
	}
}

29 
ölöe
 
	$‰ì_4k_u¡y≥d
(
c•a˚_Æloc_t
 *
Æloc
, *
u¡y≥d
)

31 
	`as£π
(
Æloc
);

32 
	`as£π
(
Æloc
->
‰ì_4k_ut
);

33 
Æloc
->
	`‰ì_4k_ut
◊Œoc->
cookõ
, 
u¡y≥d
);

34 
	}
}

36 
ölöe
 *
	$m≠_‰ame
(
c•a˚_Æloc_t
 *
Æloc
, 
£L4_CPå
 
‰ame
, seL4_CPå 
‰ì_¶Ÿs
[
MAPPING_SLOTS
],

37 
£L4_W‹d
 *
u£d
)

39 
	`as£π
(
Æloc
);

40 
	`as£π
(
Æloc
->
m≠_‰ame
);

41  
Æloc
->
	`m≠_‰ame
◊Œoc->
cookõ
, 
‰ame
, 
‰ì_¶Ÿs
, 
u£d
);

42 
	}
}

44 *
	$ªty≥_hñ≥r
(
c•a˚_t
 *
c•a˚
, 
£L4_W‹d
 
ty≥
, 
£L4_CPå
 
˝å
)

46 
£L4_CPå
 
ut_˝å
;

47 *
u¡y≥d
 = 
	`Æloc_4k_u¡y≥d
(&
c•a˚
->
Æloc
, &
ut_˝å
);

48 i‡(
u¡y≥d
 =
NULL
) {

49 
	`ZF_LOGE
("untyped is NULL");

50  
NULL
;

56 
size_t
 
size
 = 
£L4_PageBôs
;

57 i‡(
ty≥
 =
£L4_C≠TabÀObje˘
) {

58 
size
 = 
	`CNODE_SLOT_BITS
(size);

62 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut_˝å
, 
˝å
, 
ty≥
, 
size
);

63 i‡(
îr
 !
£L4_NoEº‹
) {

64 
	`ZF_LOGE
("errorÑetyping");

65 
	`‰ì_4k_u¡y≥d
(&
c•a˚
->
Æloc
, 
u¡y≥d
);

66  
NULL
;

69  
u¡y≥d
;

70 
	}
}

72 
	$ªfûl_w©îm¨k
(
c•a˚_t
 *
c•a˚
, 
£L4_W‹d
 *
u£d
)

74 
i
 = 0; i < 
WATERMARK_SLOTS
; i++) {

75 i‡(*
u£d
 & 
	`BIT
(
i
)) {

76 
c•a˚
->
w©îm¨k
[
i
] = 
	`c•a˚_Æloc_¶Ÿ
(cspace);

77 
	`ZF_LOGW_IF
(
c•a˚
->
w©îm¨k
[
i
] =
£L4_C≠NuŒ
, "Cspace full in watermark function");

81 
	}
}

83 
	$öô_bŸ_lvl_node
(
c•a˚_t
 *
c•a˚
, 
node
, *
u¡y≥d
, 
£L4_CPå
 
‰ame
)

85 
	`mem£t
(
c•a˚
->
bŸ_lvl_nodes
[
node
], 0, 
PAGE_SIZE_4K
);

88 
c•a˚
->
n_bŸ_lvl_nodes
++;

89 
	`mem£t
(
c•a˚
->
bŸ_lvl_nodes
[
node
], 0, (
bŸ_lvl_node_t
));

90 
c•a˚
->
bŸ_lvl_nodes
[
node
]->
n_˙odes
 = 0;

91 
c•a˚
->
bŸ_lvl_nodes
[
node
]->
u¡y≥d
 = untyped;

92 
c•a˚
->
bŸ_lvl_nodes
[
node
]->
‰ame
 = frame;

93 
	}
}

95 
boﬁ
 
	$ísuª_Àvñs
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
˝å
, 
n_¶Ÿs
, 
£L4_W‹d
 *
u£d
)

98 i‡(!
c•a˚
->
two_Àvñ
) {

100  
åue
;

103 
£L4_W‹d
 
node
 = 
	`NODE_INDEX
(
˝å
);

105 i‡(
c•a˚
->
n_bŸ_lvl_nodes
 <
node
) {

107 
£L4_CPå
 
‰ame
 = 
c•a˚
->
w©îm¨k
[
MAPPING_SLOTS
];

108 *
u£d
 |
	`BIT
(
MAPPING_SLOTS
);

109 *
u¡y≥d
 = 
	`ªty≥_hñ≥r
(
c•a˚
, 
£L4_ARM_SmÆlPageObje˘
, 
‰ame
);

110 i‡(
u¡y≥d
 =
NULL
) {

111 
	`ZF_LOGE
("FailedÅoÑetype");

112  
Ál£
;

115 
c•a˚
->
bŸ_lvl_nodes
[
node
] = 
	`m≠_‰ame
(&c•a˚->
Æloc
, 
‰ame
, c•a˚->
w©îm¨k
, 
u£d
);

116 i‡(
c•a˚
->
bŸ_lvl_nodes
[
node
] =
NULL
) {

117 
	`ZF_LOGE
("botÜvlÇodeállocation failed");

118 
	`c•a˚_dñëe
(
c•a˚
, 
‰ame
);

119 *
u£d
 &~
	`BIT
(
MAPPING_SLOTS
);

120 
	`‰ì_4k_u¡y≥d
(&
c•a˚
->
Æloc
, 
u¡y≥d
);

121  
Ál£
;

124 
	`öô_bŸ_lvl_node
(
c•a˚
, 
node
, 
u¡y≥d
, 
‰ame
);

127 
	`as£π
(
c•a˚
->
bŸ_lvl_nodes
[
node
] !
NULL
);

128 
£L4_W‹d
 
˙ode
 = 
	`CNODE_INDEX
(
˝å
);

129 i‡(
c•a˚
->
bŸ_lvl_nodes
[
node
]->
n_˙odes
 <
˙ode
) {

131 
£L4_CPå
 
ut_˝å
;

132 
c•a˚
->
bŸ_lvl_nodes
[
node
]->
˙odes
[
˙ode
].
u¡y≥d
 = 
	`Æloc_4k_u¡y≥d
(&c•a˚->
Æloc
, &
ut_˝å
);

133 i‡(
c•a˚
->
bŸ_lvl_nodes
[
node
]->
˙odes
[
˙ode
].
u¡y≥d
 =
NULL
) {

134 
	`ZF_LOGE
("FailedÅoálloc 2ndÜevel cnode");

135  
Ál£
;

138 
£L4_Eº‹
 
îr
 = 
	`£L4_U¡y≥d_Rëy≥
(
ut_˝å
, 
£L4_C≠TabÀObje˘
, 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
),

139 
c•a˚
->
roŸ_˙ode
, 0, 0, 
	`TOP_LVL_INDEX
(
˝å
), 1);

140 i‡(
îr
) {

141 
	`ZF_LOGE_IFERR
(
îr
, "FailedÅoÑetype 2ndÜvl cnode");

142 
	`‰ì_4k_u¡y≥d
(&
c•a˚
->
Æloc
, c•a˚->
bŸ_lvl_nodes
[
node
]->
˙odes
[
˙ode
].
u¡y≥d
);

143  
Ál£
;

145 
c•a˚
->
bŸ_lvl_nodes
[
node
]->
n_˙odes
++;

148  
åue
;

149 
	}
}

152 
	$c•a˚_¸óã
(
c•a˚_t
 *
c•a˚
, c•a˚_à*
èrgë
, 
boﬁ
 
two_Àvñ
, 
c•a˚_Æloc_t
 
c•a˚_Æloc
)

154 
	`mem£t
(
èrgë
, 0, (
c•a˚_t
));

155 
èrgë
->
two_Àvñ
 =Åwo_level;

157 
èrgë
->
boŸ°øp
 = 
c•a˚
;

158 
èrgë
->
Æloc
 = 
c•a˚_Æloc
;

159 
èrgë
->
t›_lvl_size_bôs
 = 
CNODE_SIZE_BITS
;

161 
èrgë
->
t›_bf
 = 
	`ˇŒoc
(1, (
£L4_W‹d
Ë* 
	`BITFIELD_SIZE
—¨gë->
t›_lvl_size_bôs
));

162 i‡(
èrgë
->
t›_bf
 =
NULL
) {

163 
	`ZF_LOGE
("Malloc out of memory");

164  
CSPACE_ERROR
;

168 i‡(
èrgë
->
two_Àvñ
) {

169 
èrgë
->
bŸ_lvl_nodes
 = 
	`ˇŒoc
(
	`BOT_LVL_NODES
(
CNODE_SIZE_BITS
), (
bŸ_lvl_node_t
));

170 i‡(
èrgë
->
bŸ_lvl_nodes
 =
NULL
) {

171 
	`c•a˚_de°roy
(
èrgë
);

172 
	`ZF_LOGE
("Malloc out of memory");

173  
CSPACE_ERROR
;

178 
	`ZF_LOGD
("CreateÅopÜevel cspace");

179 
£L4_CPå
 
tmp
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

180 i‡(
tmp
 =
£L4_C≠NuŒ
) {

181 
	`ZF_LOGE
("FailedÅoálloc slot");

182 
	`c•a˚_de°roy
(
èrgë
);

183  
CSPACE_ERROR
;

187 
èrgë
->
u¡y≥d
 = 
	`ªty≥_hñ≥r
(
c•a˚
, 
£L4_C≠TabÀObje˘
, 
tmp
);

188 i‡(
èrgë
->
u¡y≥d
 =
NULL
) {

189 
	`ZF_LOGE
("FailedÅoÑetype");

190 
	`c•a˚_de°roy
(
èrgë
);

191  
CSPACE_ERROR
;

196 
£L4_W‹d
 
dïth
 = 
£L4_W‹dBôs
 - (
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
Ë* (
èrgë
->
two_Àvñ
 ? 2 : 1));

197 
£L4_W‹d
 
gu¨d
 = 
	`£L4_CNode_C≠D©a_√w
(0, 
dïth
).
w‹ds
[0];

198 
èrgë
->
roŸ_˙ode
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

199 i‡(
c•a˚
->
roŸ_˙ode
 =
£L4_C≠NuŒ
) {

200 
	`ZF_LOGE
("FailedÅoálloc slot");

201 
	`c•a˚_‰ì_¶Ÿ
(
èrgë
->
boŸ°øp
, 
tmp
);

202 
	`c•a˚_de°roy
(
èrgë
);

203  
CSPACE_ERROR
;

206 
£L4_Eº‹
 
îr
 = 
	`c•a˚_möt
(
c•a˚
, 
èrgë
->
roŸ_˙ode
, c•a˚, 
tmp
, 
£L4_AŒRights
, 
gu¨d
);

207 i‡(
îr
) {

208 
	`ZF_LOGE
("FailedÅo mintÑoot cnode cptr");

209 
	`c•a˚_de°roy
(
èrgë
);

210  
CSPACE_ERROR
;

213 
	`c•a˚_dñëe
(
c•a˚
, 
tmp
);

214 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
tmp
);

218 
£L4_W‹d
 
bŸ_lvl_node
 = 0;

219 i‡(
èrgë
->
two_Àvñ
) {

221 
bŸ_lvl_node
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

222 i‡(
bŸ_lvl_node
 =
£L4_C≠NuŒ
) {

223 
	`ZF_LOGE
("FailedÅoálloc slot");

224 
	`c•a˚_de°roy
(
èrgë
);

225  
CSPACE_ERROR
;

228 *
u¡y≥d
 = 
	`ªty≥_hñ≥r
(
c•a˚
, 
£L4_ARM_SmÆlPageObje˘
, 
bŸ_lvl_node
);

229 i‡(
u¡y≥d
 !
NULL
) {

230 
£L4_W‹d
 
u£d
 = 0;

231 
èrgë
->
bŸ_lvl_nodes
[0] = 
	`m≠_‰ame
(&
c•a˚
->
Æloc
, 
bŸ_lvl_node
, c•a˚->
w©îm¨k
, &
u£d
);

232 
	`ªfûl_w©îm¨k
(
c•a˚
, &
u£d
);

235 i‡(
èrgë
->
bŸ_lvl_nodes
[0] =
NULL
 || 
u¡y≥d
 == NULL) {

236 
	`c•a˚_de°roy
(
èrgë
);

237 
	`c•a˚_dñëe
(
c•a˚
, 
bŸ_lvl_node
);

238 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
bŸ_lvl_node
);

239  
CSPACE_ERROR
;

242 
	`öô_bŸ_lvl_node
(
èrgë
, 0, 
u¡y≥d
, 
bŸ_lvl_node
);

246 
£L4_CPå
 
nuŒ
 = 
	`c•a˚_Æloc_¶Ÿ
(
èrgë
);

247 
	`as£π
(
nuŒ
 =
£L4_C≠NuŒ
);

249 i‡(
èrgë
->
two_Àvñ
) {

251 
£L4_W‹d
 
mask
 = 
	`MASK
(
WATERMARK_SLOTS
);

252 
	`ªfûl_w©îm¨k
(
èrgë
, &
mask
);

255 
£L4_CPå
 
¶Ÿ
 = 
	`c•a˚_Æloc_¶Ÿ
(
èrgë
);

256 
	`as£π
(
¶Ÿ
 !
£L4_C≠NuŒ
);

257 
£L4_Eº‹
 
îr
 = 
	`c•a˚_move
(
èrgë
, 
¶Ÿ
, 
c•a˚
, 
bŸ_lvl_node
);

258 
	`as£π
(
îr
 =
£L4_NoEº‹
);

259 
èrgë
->
bŸ_lvl_nodes
[0]->
‰ame
 = 
¶Ÿ
;

260 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
bŸ_lvl_node
);

263 
	`ZF_LOGD
("Finished creatingÇew cspace");

264  
CSPACE_NOERROR
;

265 
	}
}

267 
	$c•a˚_¸óã_two_Àvñ
(
c•a˚_t
 *
boŸ°øp
, c•a˚_à*
èrgë
, 
c•a˚_Æloc_t
 
Æloc
)

269  
	`c•a˚_¸óã
(
boŸ°øp
, 
èrgë
, 
åue
, 
Æloc
);

270 
	}
}

272 
	$c•a˚_¸óã_⁄e_Àvñ
(
c•a˚_t
 *
boŸ°øp
, c•a˚_à*
èrgë
)

274 
c•a˚_Æloc_t
 
em±y
 = {};

275  
	`c•a˚_¸óã
(
boŸ°øp
, 
èrgë
, 
Ál£
, 
em±y
);

276 
	}
}

278 
	$c•a˚_de°roy
(
c•a˚_t
 *
c•a˚
)

280 i‡(
c•a˚
->
boŸ°øp
 =
NULL
) {

281 
	`ZF_LOGF
("CannotÅeardown bootstrap cspace");

286 
£L4_CPå
 
œ°
 = 0;

287 
i
 = 0; i < 
c•a˚
->
n_bŸ_lvl_nodes
; i++) {

288 
j
 = 0; j < 
c•a˚
->
bŸ_lvl_nodes
[
i
]->
n_˙odes
; j++) {

289 
œ°
 = 
i
 * 
BOT_LVL_PER_NODE
 + 
j
;

290 
	`‰ì_4k_u¡y≥d
(&
c•a˚
->
Æloc
, c•a˚->
bŸ_lvl_nodes
[
i
]->
˙odes
[
j
].
u¡y≥d
);

293 
	`‰ì_4k_u¡y≥d
(&
c•a˚
->
Æloc
, c•a˚->
bŸ_lvl_nodes
[
i
]->
u¡y≥d
);

294 
	`c•a˚_dñëe
(
c•a˚
, c•a˚->
bŸ_lvl_nodes
[
i
]->
‰ame
);

298 
i
 = 0; 
c•a˚
->
two_Àvñ
 && i <
œ°
; i++) {

299 
	`£L4_CNode_Dñëe
(
c•a˚
->
roŸ_˙ode
, 
i
, 
£L4_W‹dBôs
 - (
CNODE_SIZE_BITS
 - 
£L4_SlŸBôs
));

303 i‡(
c•a˚
->
roŸ_˙ode
 !
£L4_C≠NuŒ
) {

305 
	`c•a˚_dñëe
(
c•a˚
->
boŸ°øp
, c•a˚->
roŸ_˙ode
);

306 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
->
boŸ°øp
, c•a˚->
roŸ_˙ode
);

310 i‡(
c•a˚
->
u¡y≥d
) {

311 
	`‰ì_4k_u¡y≥d
(&
c•a˚
->
boŸ°øp
->
Æloc
, c•a˚->
u¡y≥d
);

314 i‡(
c•a˚
->
bŸ_lvl_nodes
) {

315 
	`‰ì
(
c•a˚
->
bŸ_lvl_nodes
);

318 i‡(
c•a˚
->
t›_bf
) {

319 
	`‰ì
(
c•a˚
->
t›_bf
);

321 
	}
}

323 
£L4_CPå
 
	$c•a˚_Æloc_¶Ÿ
(
c•a˚_t
 *
c•a˚
)

325 
	`as£π
(
c•a˚
 !
NULL
);

326 
£L4_W‹d
 
t›_ödex
 = 
	`bf_fú°_‰ì
(
	`BITFIELD_SIZE
(
c•a˚
->
t›_lvl_size_bôs
), c•a˚->
t›_bf
);

327 i‡(
t›_ödex
 > 
	`CNODE_SLOTS
(
c•a˚
->
t›_lvl_size_bôs
)) {

328 
	`ZF_LOGE
("Cspace is full!\n");

329  
£L4_C≠NuŒ
;

332 
£L4_CPå
 
˝å
;

333 i‡(
c•a˚
->
two_Àvñ
) {

334 
£L4_W‹d
 
u£d
 = 0;

336 
˝å
 = 
t›_ödex
 << 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
);

339 i‡(
c•a˚
->
n_bŸ_lvl_nodes
 <
	`NODE_INDEX
(
˝å
) ||

340 
c•a˚
->
bŸ_lvl_nodes
[
	`NODE_INDEX
(
˝å
)]->
n_˙odes
 <
	`CNODE_INDEX
(cptr)) {

341 i‡(!
	`ísuª_Àvñs
(
c•a˚
, 
˝å
, 
MAPPING_SLOTS
, &
u£d
)) {

342  
£L4_C≠NuŒ
;

347 
bŸ_lvl_t
 *
bŸ_lvl
 = &
c•a˚
->
bŸ_lvl_nodes
[
	`NODE_INDEX
(
˝å
)]->
˙odes
[
	`CNODE_INDEX
(cptr)];

348 
£L4_W‹d
 
bŸ_ödex
 = 
	`bf_fú°_‰ì
(
	`BITFIELD_SIZE
(
CNODE_SIZE_BITS
), 
bŸ_lvl
->
bf
);

349 i‡(
bŸ_ödex
 =
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
)) {

350 
	`ZF_LOGE
("Cspace is full!\n");

351  
£L4_C≠NuŒ
;

354 
	`bf_£t_bô
(
bŸ_lvl
->
bf
, 
bŸ_ödex
);

355 i‡(
bŸ_ödex
 =
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
) - 1) {

357 
	`bf_£t_bô
(
c•a˚
->
t›_bf
, 
t›_ödex
);

360 
˝å
 +
bŸ_ödex
;

363 
	`ªfûl_w©îm¨k
(
c•a˚
, &
u£d
);

365 
˝å
 = 
t›_ödex
;

366 
	`bf_£t_bô
(
c•a˚
->
t›_bf
, 
˝å
);

368  
˝å
;

369 
	}
}

371 
	$c•a˚_‰ì_¶Ÿ
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
˝å
)

373 i‡(!
c•a˚
->
two_Àvñ
) {

374 i‡(
˝å
 > 
	`CNODE_SLOTS
(
c•a˚
->
t›_lvl_size_bôs
)) {

375 
	`ZF_LOGE
("AttemptingÅo delete slot greaterÅhan cspace bounds");

378 
	`bf_˛r_bô
(
c•a˚
->
t›_bf
, 
˝å
);

380 i‡(
˝å
 > 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
 + 
c•a˚
->
t›_lvl_size_bôs
)) {

381 
	`ZF_LOGE
("AttemptingÅo delete slot greaterÅhan cspace bounds");

384 
	`bf_˛r_bô
(
c•a˚
->
t›_bf
, 
	`TOP_LVL_INDEX
(
˝å
));

385 
£L4_W‹d
 
node
 = 
	`NODE_INDEX
(
˝å
);

386 i‡(
c•a˚
->
n_bŸ_lvl_nodes
 > 
node
) {

387 
£L4_W‹d
 
˙ode
 = 
	`CNODE_INDEX
(
˝å
);

388 i‡(
c•a˚
->
bŸ_lvl_nodes
[
node
]->
n_˙odes
 > 
˙ode
) {

389 
	`bf_˛r_bô
(
c•a˚
->
bŸ_lvl_nodes
[
node
]->
˙odes
[
˙ode
].
bf
, 
	`BOT_LVL_INDEX
(
˝å
));

391 
	`ZF_LOGE
("Aâem±ögÅÿ‰ì u«Œoˇãd c±∏%lx", 
˝å
);

394 
	`ZF_LOGE
("Aâem±ögÅÿ‰ì u«Œoˇãd c±∏%lx!", 
˝å
);

397 
	}
}

399 
£L4_Eº‹
 
	$c•a˚_u¡y≥d_ªty≥
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
ut
, seL4_CPå 
èrgë
,

400 
£L4_W‹d
 
ty≥
, 
size_t
 
size_bôs
)

403 i‡(
c•a˚
->
two_Àvñ
) {

405 
£L4_CPå
 
˙ode
 = 
èrgë
 >> 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
);

406  
	`£L4_U¡y≥d_Rëy≥
(
ut
, 
ty≥
, 
size_bôs
, 
c•a˚
->
roŸ_˙ode
, 
˙ode
,

407 
£L4_W‹dBôs
 - 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
),

408 
èrgë
 % 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
), 1);

411  
	`£L4_U¡y≥d_Rëy≥
(
ut
, 
ty≥
, 
size_bôs
, 
c•a˚
->
roŸ_˙ode
, 0, 0, 
èrgë
, 1);

414 
	}
}

	@libserial/include/serial/serial.h

12 
£rül
 *
£rül_öô
();

13 
£rül_£nd
(
£rül
 *£rül, *
d©a
, 
Àn
);

14 
£rül_ªgi°î_h™dÀr
(
£rül
 *£rül, (*
h™dÀr
Ë(£rü»*£rül, 
c
));

	@libserial/src/serial.c

12 
	~<autoc⁄f.h
>

13 
	~<as£π.h
>

14 
	~<°ddef.h
>

15 
	~<°rög.h
>

16 
	~<utûs/utû.h
>

17 
	~<£rül/£rül.h
>

18 #unde‡
PACKED


19 
	~<pico_sockë.h
>

20 
	~<pico_ùv4.h
>

22 
	#AOS18_PORT
 (26718)

	)

23 
	#MAX_PAYLOAD_SIZE
 1024

	)

25 
	s£rül
 {

26 
pico_ù4
 
	möaddr_™y
;

27 
pico_sockë
 *
	mpico_sockë
;

28 (*
	mh™dÀr
)(
£rül
 *
	m£rül
, 
	mc
);

29 
uöt32_t
 
	m≥î
;

30 
uöt16_t
 
	mp‹t
;

33 
	gbuf
[
MAX_PAYLOAD_SIZE
];

34 
£rül
 
	g£rül
 = {};

36 
	$£rül_ªcv_h™dÀr
(
uöt16_t
 
ev
, 
pico_sockë
 *
s
)

38 i‡(
ev
 =
PICO_SOCK_EV_RD
) {

39 
ªad
 = 0;

41 
ªad
 = 
	`pico_sockë_ªcv‰om
(
£rül
.
pico_sockë
, 
buf
, 
MAX_PAYLOAD_SIZE
, &£rül.
≥î
, &£rül.
p‹t
);

42 
i
 = 0; i < 
ªad
; i++) {

43 
£rül
.
	`h™dÀr
(&£rül, 
buf
[
i
]);

45 } 
ªad
 > 0);

46 } i‡(
ev
 =
PICO_SOCK_EV_ERR
) {

47 
	`ZF_LOGE
("PicoÑecvÉrror");

49 
	}
}

51 
£rül
 *
	$£rül_öô
()

53 i‡(
£rül
.
pico_sockë
 !
NULL
) {

54 
	`ZF_LOGE
("Serialálready initialised!");

55  
NULL
;

58 
£rül
.
pico_sockë
 = 
	`pico_sockë_›í
(
PICO_PROTO_IPV4
, 
PICO_PROTO_UDP
, &
£rül_ªcv_h™dÀr
);

59 i‡(!
£rül
.
pico_sockë
) {

60 
	`ZF_LOGE
("serial connection failed");

61  
NULL
;

64 
uöt16_t
 
p‹t_be
 = 
	`sh‹t_be
(
AOS18_PORT
);

65 
îr
 = 
	`pico_sockë_böd
(
£rül
.
pico_sockë
, &£rül.
öaddr_™y
, &
p‹t_be
);

66 i‡(
îr
) {

67  
NULL
;

71 
	`pico_°rög_to_ùv4
(
CONFIG_SOS_GATEWAY
, &
£rül
.
≥î
);

72 
£rül
.
p‹t
 = 
p‹t_be
;

74  &
£rül
;

75 
	}
}

77 
	$£rül_£nd
(
£rül
 *£rül, *
d©a
, 
Àn
)

79 
	`as£π
(
£rül
->
pico_sockë
 !
NULL
);

80 
tŸÆ_£¡
 = 0;

81 
tŸÆ_£¡
 < 
Àn
) {

82 
£¡
 = 
	`pico_sockë_£ndto
(
£rül
->
pico_sockë
, 
d©a
, 
Àn
, &£rül->
≥î
, sîül->
p‹t
);

83 i‡(
£¡
 == -1) {

84 
	`ZF_LOGE
("Pico send failed");

87 
tŸÆ_£¡
 +
£¡
;

89  
Àn
;

90 
	}
}

93 
	$£rül_ªgi°î_h™dÀr
(
£rül
 *serial,

94 (*
h™dÀr
)(
£rül
 *£rül, 
c
))

96 
£rül
->
h™dÀr
 = handler;

98 
	}
}

	@libsosapi/include/sos.h

14 #i‚de‡
_SOS_H


15 
	#_SOS_H


	)

17 
	~<°dio.h
>

18 
	~<°döt.h
>

19 
	~<£l4/£l4.h
>

24 
	#SOS_IPC_EP_CAP
 (0x1)

	)

25 
	#TIMER_IPC_EP_CAP
 (0x2)

	)

28 
	#PROCESS_MAX_FILES
 16

	)

29 
	#MAX_IO_BUF
 0x1000

	)

30 
	#N_NAME
 32

	)

33 
	#FM_EXEC
 1

	)

34 
	#FM_WRITE
 2

	)

35 
	#FM_READ
 4

	)

36 
	tfmode_t
;

39 
	#ST_FILE
 1

	)

40 
	#ST_SPECIAL
 2

	)

41 
	t°_ty≥_t
;

45 
°_ty≥_t
 
	m°_ty≥
;

46 
fmode_t
 
	m°_fmode
;

47 
	m°_size
;

48 
	m°_˘ime
;

49 
	m°_©ime
;

50 } 
	tsos_°©_t
;

52 
	tpid_t
;

55 
pid_t
 
	mpid
;

56 
	msize
;

57 
	m°ime
;

58 
	mcomm™d
[
N_NAME
];

59 } 
	tsos_¥o˚ss_t
;

63 
sos_sys_›í
(c⁄° *
∑th
, 
fmode_t
 
mode
);

73 
sos_sys_˛o£
(
fûe
);

77 
sos_sys_ªad
(
fûe
, *
buf
, 
size_t
 
nbyã
);

84 
sos_sys_wrôe
(
fûe
, c⁄° *
buf
, 
size_t
 
nbyã
);

90 
sos_gëdúít
(
pos
, *
«me
, 
size_t
 
nbyã
);

96 
sos_°©
(c⁄° *
∑th
, 
sos_°©_t
 *
buf
);

101 
pid_t
 
sos_¥o˚ss_¸óã
(c⁄° *
∑th
);

107 
sos_¥o˚ss_dñëe
(
pid_t
 
pid
);

112 
pid_t
 
sos_my_id
();

115 
sos_¥o˚ss_°©us
(
sos_¥o˚ss_t
 *
¥o˚s£s
, 
max
);

120 
pid_t
 
sos_¥o˚ss_waô
’id_à
pid
);

125 
öt64_t
 
sos_sys_time_°amp
();

129 
sos_sys_u¶ìp
(
m£c
);

140 
sos_sh¨e_vm
(*
adr
, 
size_t
 
size
, 
wrôabÀ
);

	@libsosapi/include/syscalls.h

12 #¥agm®
⁄˚


14 
	~<°d¨g.h
>

19 
soßpi_öô_sysˇŒ_èbÀ
();

22 
sys_£t_tid_addªss
(
va_li°
 
≠
);

23 
sys_exô
(
va_li°
 
≠
);

24 
sys_π_sig¥ocmask
(
va_li°
 
≠
);

25 
sys_gëtid
(
va_li°
 
≠
);

26 
sys_gëpid
(
va_li°
 
≠
);

27 
sys_tgkûl
(
va_li°
 
≠
);

28 
sys_exô_group
(
va_li°
 
≠
);

29 
sys_›í©
(
va_li°
 
≠
);

30 
sys_˛o£
(
va_li°
 
≠
);

31 
sys_ªadv
(
va_li°
 
≠
);

32 
sys_ªad
(
va_li°
 
≠
);

33 
sys_io˘l
(
va_li°
 
≠
);

34 
sys_brk
(
va_li°
 
≠
);

35 
sys_mm≠
(
va_li°
 
≠
);

36 
sys_wrôev
(
va_li°
 
≠
);

	@libsosapi/include/ttyout.h

12 #i‚de‡
_TTYOUT_H


13 
	#_TTYOUT_H


	)

15 
	~<°dio.h
>

19 
	#SYSCALL_ENDPOINT_SLOT
 (1)

	)

22 
âyout_öô
();

23 
size_t
 
sos_wrôe
(*
d©a
, size_à
cou¡
);

24 
size_t
 
sos_ªad
(*
d©a
, size_à
cou¡
);

	@libsosapi/src/sos.c

12 
	~<°d¨g.h
>

13 
	~<as£π.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<sos.h
>

18 
	~<£l4/£l4.h
>

20 
	$sos_sys_›í
(c⁄° *
∑th
, 
fmode_t
 
mode
)

22 
	`as£π
(!"YouÇeedÅo implementÅhis");

24 
	}
}

26 
	$sos_sys_˛o£
(
fûe
) {

27 
	`as£π
(!"YouÇeedÅo implementÅhis");

29 
	}
}

31 
	$sos_sys_ªad
(
fûe
, *
buf
, 
size_t
 
nbyã
)

33 
	`as£π
(!"YouÇeedÅo implementÅhis");

35 
	}
}

37 
	$sos_sys_wrôe
(
fûe
, c⁄° *
buf
, 
size_t
 
nbyã
)

39 
	`as£π
(!"YouÇeedÅo implementÅhis");

41 
	}
}

43 
	$sos_gëdúít
(
pos
, *
«me
, 
size_t
 
nbyã
)

45 
	`as£π
(!"YouÇeedÅo implementÅhis");

47 
	}
}

49 
	$sos_°©
(c⁄° *
∑th
, 
sos_°©_t
 *
buf
)

51 
	`as£π
(!"YouÇeedÅo implementÅhis");

53 
	}
}

55 
pid_t
 
	$sos_¥o˚ss_¸óã
(c⁄° *
∑th
)

57 
	`as£π
(!"YouÇeedÅo implementÅhis");

59 
	}
}

61 
	$sos_¥o˚ss_dñëe
(
pid_t
 
pid
)

63 
	`as£π
(!"YouÇeedÅo implementÅhis");

65 
	}
}

67 
pid_t
 
	$sos_my_id
()

69 
	`as£π
(!"YouÇeedÅo implementÅhis");

72 
	}
}

74 
	$sos_¥o˚ss_°©us
(
sos_¥o˚ss_t
 *
¥o˚s£s
, 
max
)

76 
	`as£π
(!"YouÇeedÅo implementÅhis");

78 
	}
}

80 
pid_t
 
	$sos_¥o˚ss_waô
(
pid_t
 
pid
)

82 
	`as£π
(!"YouÇeedÅo implementÅhis");

85 
	}
}

87 
	$sos_sys_u¶ìp
(
m£c
)

89 
	`as£π
(!"YouÇeedÅo implementÅhis");

90 
	}
}

92 
öt64_t
 
	$sos_sys_time_°amp
()

94 
	`as£π
(!"YouÇeedÅo implementÅhis");

96 
	}
}

	@libsosapi/src/sys_exit.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<£l4/£l4.h
>

15 
	~"sos.h
"

18 
	$soßpi_ab‹t
()

20 
	`sos_¥o˚ss_dñëe
(
	`sos_my_id
());

22 
	}
}

25 
	$sys_π_sig¥ocmask
(
va_li°
 
≠
)

29 
	}
}

32 
	$sys_gëtid
(
va_li°
 
≠
)

36 
	}
}

39 
	$sys_gëpid
(
va_li°
 
≠
)

43 
	}
}

46 
	$sys_exô
(
va_li°
 
≠
)

48 
	`soßpi_ab‹t
();

50 
	}
}

53 
	$sys_exô_group
(
va_li°
 
≠
)

55 
	`soßpi_ab‹t
();

57 
	}
}

60 
	$sys_tgkûl
(
va_li°
 
≠
)

62 
	`soßpi_ab‹t
();

64 
	}
}

	@libsosapi/src/sys_morecore.c

12 
	~<autoc⁄f.h
>

13 
	~<utûs/utû.h
>

14 
	~<°dio.h
>

15 
	~<°döt.h
>

16 
	~<°d¨g.h
>

17 
	~<sys/mm™.h
>

18 
	~<î∫o.h
>

19 
	~<as£π.h
>

27 
	#MORECORE_AREA_BYTE_SIZE
 0x100000

	)

28 
	gm‹ec‹e_¨ó
[
MORECORE_AREA_BYTE_SIZE
];

31 
uöçå_t
 
	gm‹ec‹e_ba£
 = (uöçå_tË&
m‹ec‹e_¨ó
;

32 
uöçå_t
 
	gm‹ec‹e_t›
 = (uöçå_tË&
m‹ec‹e_¨ó
[
MORECORE_AREA_BYTE_SIZE
];

38 
	$sys_brk
(
va_li°
 
≠
)

41 
uöçå_t
 
ªt
;

42 
uöçå_t
 
√wbrk
 = 
	`va_¨g
(
≠
, uintptr_t);

45 i‡(!
√wbrk
) {

46 
ªt
 = 
m‹ec‹e_ba£
;

47 } i‡(
√wbrk
 < 
m‹ec‹e_t›
 &&Çewbrk > (
uöçå_t
)&
m‹ec‹e_¨ó
[0]) {

48 
ªt
 = 
m‹ec‹e_ba£
 = 
√wbrk
;

50 
ªt
 = 0;

53  
ªt
;

54 
	}
}

58 
	$sys_mm≠
(
va_li°
 
≠
)

60 *
addr
 = 
	`va_¨g
(
≠
, *);

61 
size_t
 
Àngth
 = 
	`va_¨g
(
≠
, size_t);

62 
¥Ÿ
 = 
	`va_¨g
(
≠
, );

63 
Êags
 = 
	`va_¨g
(
≠
, );

64 
fd
 = 
	`va_¨g
(
≠
, );

65 
off_t
 
off£t
 = 
	`va_¨g
(
≠
, off_t);

67 i‡(
Êags
 & 
MAP_ANONYMOUS
) {

69 i‡(
Àngth
 > 
m‹ec‹e_t›
 - 
m‹ec‹e_ba£
) {

70  -
ENOMEM
;

73 
m‹ec‹e_t›
 -
Àngth
;

74  
m‹ec‹e_t›
;

76 
	`ZF_LOGF
("not implemented");

77  -
ENOMEM
;

78 
	}
}

	@libsosapi/src/sys_stdio.c

12 
	~<autoc⁄f.h
>

13 
	~<as£π.h
>

14 
	~<î∫o.h
>

15 
	~<f˙é.h
>

16 
	~<limôs.h
>

17 
	~<°d¨g.h
>

18 
	~<°rög.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<sos.h
>

23 
	~<utûs/©åibuã.h
>

24 
	~<£l4/£l4.h
>

26 
	~<sys/ªsour˚.h
>

27 
	~<sys/mm™.h
>

28 
	~<sys/uio.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sysˇŒ.h
>

32 
	~"âyout.h
"

34 
	#STDIN_FD
 0

	)

35 
	#STDOUT_FD
 1

	)

36 
	#STDERR_FD
 2

	)

39 
	$sys_wrôev
(
va_li°
 
≠
)

41 
fûdes
 = 
	`va_¨g
(
≠
, );

42 
iovec
 *
iov
 = 
	`va_¨g
(
≠
, iovec *);

43 
iov˙t
 = 
	`va_¨g
(
≠
, );

45 
sum
 = 0;

46 
ssize_t
 
ªt
 = 0;

49 i‡(
iov˙t
 <0 || iov˙à> 
IOV_MAX
) {

50  -
EINVAL
;

55 
i
 = 0; i < 
iov˙t
; i++) {

56 
sum
 +()
iov
[
i
].
iov_Àn
;

57 i‡(
sum
 > 
SSIZE_MAX
) {

58  -
EINVAL
;

63 i‡(!
sum
) {

68 i‡(
fûdes
 =
STDOUT_FD
 || fûde†=
STDERR_FD
) {

69 
i
 = 0; i < 
iov˙t
; i++) {

70 
ªt
 +
	`sos_wrôe
(
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

73 
i
 = 0; i < 
iov˙t
; i++) {

74 
ªt
 +
	`sos_sys_wrôe
(
fûdes
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

78  
ªt
;

79 
	}
}

81 
	$sys_ªadv
(
va_li°
 
≠
)

83 
fd
 = 
	`va_¨g
(
≠
, );

84 
iovec
 *
iov
 = 
	`va_¨g
(
≠
, iovec*);

85 
iov˙t
 = 
	`va_¨g
(
≠
, );

86 
i
;

87 
ªad
;

89 
ªad
 = 0;

90 
i
 = 0; i < 
iov˙t
; i++) {

91 
ªad
 +
	`sos_sys_ªad
(
fd
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

93  
ªad
;

94 
	}
}

96 
	$sys_ªad
(
va_li°
 
≠
)

98 
fd
 = 
	`va_¨g
(
≠
, );

99 *
buf
 = 
	`va_¨g
(
≠
, *);

100 
size_t
 
cou¡
 = 
	`va_¨g
(
≠
, size_t);

102 
iovec
 
iov
 = {.
iov_ba£
 = 
buf
, .
iov_Àn
 = 
cou¡
 };

103  
	`ªadv
(
fd
, &
iov
, 1);

104 
	}
}

106 
	$sys_wrôe
(
va_li°
 
≠
)

108 
fd
 = 
	`va_¨g
(
≠
, );

109 *
buf
 = 
	`va_¨g
(
≠
, *);

110 
size_t
 
cou¡
 = 
	`va_¨g
(
≠
, size_t);

112 
iovec
 
iov
 = {.
iov_ba£
 = 
buf
, .
iov_Àn
 = 
cou¡
 };

113  
	`wrôev
(
fd
, &
iov
, 1);

114 
	}
}

116 
	$sys_io˘l
(
va_li°
 
≠
)

118 
fd
 = 
	`va_¨g
(
≠
, );

119 
ªque°
 = 
	`va_¨g
(
≠
, );

120 ()
ªque°
;

123 i‡(
fd
 =
STDOUT_FD
) {

126 
	`as£π
(!"not implemented");

128 
	}
}

130 
	$sos_sys_›í_wøµî
(c⁄° *
∑th«me
, 
Êags
)

132 
fd
 = 
	`sos_sys_›í
(
∑th«me
, 
Êags
);

133 i‡(
fd
 =
STDIN_FD
 || fd =
STDOUT_FD
 || fd =
STDERR_FD
) {

144 
	`as£π
(!"muslc isÇow goingÅo be very confused");

145  -
ENOMEM
;

148  
fd
;

149 
	}
}

151 
	$sys_›í©
(
va_li°
 
≠
)

153 
dúfd
 = 
	`va_¨g
(
≠
, );

154 c⁄° *
∑th«me
 = 
	`va_¨g
(
≠
, const *);

155 
Êags
 = 
	`va_¨g
(
≠
, );

156 
UNUSED
 
mode_t
 
mode
 = 
	`va_¨g
(
≠
, mode_t);

158 
Êags
 &~
O_LARGEFILE
;

161  
	`sos_sys_›í_wøµî
(
∑th«me
, 
Êags
);

162 
	}
}

164 
	$sys_˛o£
(
va_li°
 
≠
)

166 
fd
 = 
	`va_¨g
(
≠
, );

167  
	`sos_sys_˛o£
(
fd
);

168 
	}
}

	@libsosapi/src/sys_thread.c

12 
	~<°dio.h
>

13 
	~<bôs/î∫o.h
>

15 
	$sys_£t_tid_addªss
(
va_li°
 
≠
)

17  -
ENOSYS
;

18 
	}
}

	@libsosapi/src/sys_time.c

12 
	~<autoc⁄f.h
>

13 
	~<as£π.h
>

14 
	~<î∫o.h
>

15 
	~<f˙é.h
>

16 
	~<limôs.h
>

17 
	~<°d¨g.h
>

18 
	~<°rög.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<time.h
>

23 
	~<sos.h
>

24 
	~<utûs/time.h
>

26 
	~<£l4/£l4.h
>

28 
	$sys_«no¶ìp
(
va_li°
 
≠
)

30 
time•ec
 *
ªq
 = 
	`va_¨g
(
≠
, timespec*);

32 
mûlis
 = 
ªq
->
tv_£c
 * 
MS_IN_S
;

33 
mûlis
 +
ªq
->
tv_n£c
 / 
NS_IN_MS
;

34 
	`sos_sys_u¶ìp
(
mûlis
);

36 
	}
}

38 
	$sys_˛ock_gëtime
(
va_li°
 
≠
)

40 
˛ockid_t
 
˛k_id
 = 
	`va_¨g
(
≠
, clockid_t);

41 
time•ec
 *
ªs
 = 
	`va_¨g
(
≠
, timespec*);

42 i‡(
˛k_id
 !
CLOCK_REALTIME
) {

43  -
EINVAL
;

45 
öt64_t
 
mi¸os
 = 
	`sos_sys_time_°amp
();

46 
ªs
->
tv_£c
 = 
mi¸os
 / 
US_IN_S
;

47 
ªs
->
tv_n£c
 = (
mi¸os
 % 
US_IN_S
Ë* 
NS_IN_US
;

49 
	}
}

	@libsosapi/src/vsyscall.c

12 
	~<°dio.h
>

13 
	~<utûs/utû.h
>

14 
	~<aos/vsysˇŒ.h
>

15 
	~<sysˇŒs.h
>

17 
	$soßpi_öô_sysˇŒ_èbÀ
()

19 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_exô
, 
sys_exô
);

20 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_π_sig¥ocmask
, 
sys_π_sig¥ocmask
);

21 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gëtid
, 
sys_gëtid
);

22 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gëpid
, 
sys_gëpid
);

23 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_tgkûl
, 
sys_tgkûl
);

24 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_exô_group
, 
sys_exô_group
);

25 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_˛o£
, 
sys_˛o£
);

26 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_ªadv
, 
sys_ªadv
);

27 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_ªad
, 
sys_ªad
);

28 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_io˘l
, 
sys_io˘l
);

29 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_›í©
, 
sys_›í©
);

30 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_brk
, 
sys_brk
);

31 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_wrôev
, 
sys_wrôev
);

32 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_£t_tid_addªss
, 
sys_£t_tid_addªss
);

33 
	}
}

	@sos/src/backtrace.h

12 #¥agm®
⁄˚


14 
	~<°dio.h
>

15 
	~"sys/execöfo.h
"

17 
ölöe
 
	$¥öt_backåa˚
()

19 *
¨øy
[10] = {
NULL
};

20 
size
 = 0;

22 
size
 = 
	`backåa˚
(
¨øy
, 10);

23 i‡(
size
) {

24 
	`¥ötf
("Backtracing stack PCs: \n");

25 
i
 = 0; i < 
size
; i++) {

26 
	`¥ötf
("%p\n", 
¨øy
[
i
]);

29 
	}
}

	@sos/src/bootstrap.c

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

18 
	~<autoc⁄f.h
>

19 
	~<utûs/utû.h
>

20 
	~<c•a˚/c•a˚.h
>

21 
	~<aos/£l4_zf_logif.h
>

23 
	~"m≠pög.h
"

24 
	~"boŸ°øp.h
"

25 
	~"ut.h
"

26 
	~"dma.h
"

27 
	~"vmem_œyout.h
"

30 
	#INITIAL_TASK_CNODE_SIZE_BITS
 18u

	)

36 vﬁ©ûê
uöçå_t
 
	m√xt_‰ì_vaddr
;

38 
£L4_CPå
 
	mv•a˚
;

39 } 
	tboŸ°øp_c•a˚_t
;

42 
boŸ°øp_c•a˚_t
 
	gboŸ°øp_d©a
;

43 
bŸ_lvl_node_t
 *
	gbŸ_lvl_nodes
[(
CNODE_SLOTS
(
INITIAL_TASK_CNODE_SIZE_BITS
)Ë/ 
BOT_LVL_PER_NODE
];

44 
	gt›_bf
[
BITFIELD_SIZE
(
INITIAL_TASK_CNODE_SIZE_BITS
)];

48 
size_t
 
	gboŸ_öfo_avaû_byãs
[
CONFIG_MAX_NUM_BOOTINFO_UNTYPED_CAPS
];

51 
size_t
 
	$ˇlcuœã_ut_ˇps
(c⁄° 
£L4_BoŸInfo
 *
bi
, 
size_t
 
size_bôs
)

53 
size_t
 
n_ˇps
 = 0;

54 
size_t
 
i
 = 0; i < 
bi
->
u¡y≥d
.
íd
 - bi->u¡y≥d.
°¨t
; i++) {

55 
boŸ_öfo_avaû_byãs
[
i
] = 
	`BIT
(
bi
->
u¡y≥dLi°
[i].
sizeBôs
);

56 i‡(
bi
->
u¡y≥dLi°
[
i
].
sizeBôs
 >
size_bôs
) {

57 
n_ˇps
 +
	`BIT
(
bi
->
u¡y≥dLi°
[
i
].
sizeBôs
 - 
size_bôs
);

59 
	`ZF_LOGW
("UntypedÅoo smallÅo break into size_bits");

62  
n_ˇps
;

63 
	}
}

65 
uöçå_t
 
	$∑ddr_‰om_avaû_byãs
(c⁄° 
£L4_BoŸInfo
 *
bi
, 
i
, 
size_t
 
size_bôs
)

68 
size_t
 
èkí
 = 
	`BIT
(
bi
->
u¡y≥dLi°
[
i
].
sizeBôs
Ë- 
boŸ_öfo_avaû_byãs
[i];

70 
èkí
 = 
	`ROUND_UP
—akí, 
	`BIT
(
size_bôs
));

71  
bi
->
u¡y≥dLi°
[
i
].
∑ddr
 + 
èkí
;

73 
	}
}

76 
£L4_CPå
 
	$°ól_u¡y≥d
(c⁄° 
£L4_BoŸInfo
 *
bi
, 
size_t
 
size_bôs
, 
uöçå_t
 *
∑ddr
)

79 
	`as£π
(
size_bôs
 >
£L4_PageBôs
);

80 
	`as£π
(
size_bôs
 <
£L4_MaxU¡y≥dBôs
);

82 
	`ZF_LOGD
("lookög f‹ u¡y≥d %zu i¿size", 
size_bôs
);

83 
size_t
 
i
 = 0; i < 
bi
->
u¡y≥d
.
íd
 - bi->u¡y≥d.
°¨t
; i++) {

84 i‡(
boŸ_öfo_avaû_byãs
[
i
] >
	`BIT
(
size_bôs
)) {

85 i‡(
∑ddr
) {

86 *
∑ddr
 = 
	`∑ddr_‰om_avaû_byãs
(
bi
, 
i
, 
size_bôs
);

89 
boŸ_öfo_avaû_byãs
[
i
] -
	`BIT
(
size_bôs
);

90  
i
 + 
bi
->
u¡y≥d
.
°¨t
;

93  
£L4_C≠NuŒ
;

94 
	}
}

97 
ut_ªgi⁄_t
 
	$föd_mem‹y_bounds
(c⁄° 
£L4_BoŸInfo
 *
bi
)

99 
ut_ªgi⁄_t
 
mem‹y
 = {

100 .
°¨t
 = 
UINTPTR_MAX
,

101 .
íd
 = 0

104 
size_t
 
i
 = 0; i < 
bi
->
u¡y≥d
.
íd
 - bi->u¡y≥d.
°¨t
; i++) {

105 
mem‹y
.
°¨t
 = 
	`MIN
(mem‹y.°¨t, 
bi
->
u¡y≥dLi°
[
i
].
∑ddr
);

106 
£L4_W‹d
 
íd
 = 
bi
->
u¡y≥dLi°
[
i
].
∑ddr
 + 
	`BIT
(bi->u¡y≥dLi°[i].
sizeBôs
);

107 
mem‹y
.
íd
 = 
	`MAX
(end, memory.end);

110 
	`ZF_LOGD
("Found mem‹y %∞<--> %p", (*Ë
mem‹y
.
°¨t
, (*Ëmem‹y.
íd
);

111 
	`as£π
(
mem‹y
.
íd
 > mem‹y.
°¨t
);

112  
mem‹y
;

113 
	}
}

115 
ölöe
 *
	$Æloc_vaddr
(
îr
)

117 *
ªs
 = 
NULL
;

118 i‡(!
îr
) {

119 
ªs
 = (*Ë
boŸ°øp_d©a
.
√xt_‰ì_vaddr
;

120 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
 +
PAGE_SIZE_4K
;

122  
ªs
;

123 
	}
}

125 *
	$boŸ°øp_m≠_‰ame
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
ˇp
)

127 
îr
 = 
	`m≠_‰ame
(
c•a˚
, 
ˇp
, 
boŸ°øp_d©a
.
v•a˚
, boŸ°øp_d©a.
√xt_‰ì_vaddr
,

128 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

129  
	`Æloc_vaddr
(
îr
);

130 
	}
}

133 *
	$boŸ°øp_c•a˚_m≠_‰ame
(*
cookõ
, 
£L4_CPå
 
ˇp
, seL4_CPå 
‰ì_¶Ÿs
[
MAPPING_SLOTS
],

134 
£L4_W‹d
 *
u£d
)

136 
£L4_Eº‹
 
îr
 = 
	`m≠_‰ame_c•a˚
((
c•a˚_t
 *Ë
cookõ
, 
ˇp
, 
boŸ°øp_d©a
.
v•a˚
, boŸ°øp_d©a.
√xt_‰ì_vaddr
,

137 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
, 
‰ì_¶Ÿs
, 
u£d
);

138  
	`Æloc_vaddr
(
îr
);

139 
	}
}

142 *
	$boŸ°øp_c•a˚_Æloc_4k_ut
(
UNUSED
 *
cookõ
, 
£L4_CPå
 *
ˇp
)

144 
ut_t
 *
u¡y≥d
 = 
	`ut_Æloc_4k_u¡y≥d
(
NULL
);

145 *
ˇp
 = 
u¡y≥d
->cap;

146  
u¡y≥d
;

147 
	}
}

149 
	$boŸ°øp_c•a˚_‰ì_4k_ut
(
UNUSED
 *
cookõ
, *
u¡y≥d
)

151 
	`ut_‰ì
(
u¡y≥d
, 
£L4_PageBôs
);

152 
	}
}

154 
	$sos_boŸ°øp
(
c•a˚_t
 *
c•a˚
, c⁄° 
£L4_BoŸInfo
 *
bi
)

157 
	`mem£t
(
c•a˚
, 0, (
c•a˚_t
));

158 
	`mem£t
(&
boŸ°øp_d©a
, 0, (
boŸ°øp_c•a˚_t
));

161 
c•a˚
->
boŸ°øp
 = 
NULL
;

163 
£L4_W‹d
 
îr
;

166 
	`as£π
((
bi
->
em±y
.
íd
 - bi->em±y.
°¨t
) >= 2);

167 
£L4_CPå
 
Àvñ1_˝å
 = 
bi
->
em±y
.
°¨t
;

169 
£L4_CPå
 
boŸ_˝å
 = 0;

172 
size_t
 
n_¶Ÿs
 = 
bi
->
em±y
.
°¨t
 - 1;

175 
ut_ªgi⁄_t
 
mem‹y
 = 
	`föd_mem‹y_bounds
(
bi
);

176 
size_t
 
ut_∑ges
 = 
	`ut_∑ges_f‹_ªgi⁄
(
mem‹y
);

177 
	`ZF_LOGD
("Nìd %zuÖage†f‹ uàèbÀ", 
ut_∑ges
);

178 
n_¶Ÿs
 +
ut_∑ges
;

180 
size_t
 
size
 = (
ut_∑ges
Ë* 
PAGE_SIZE_4K
;

183 
size_t
 
n_±s
 = (
ut_∑ges
 >> 
£L4_PageTabÀIndexBôs
) + 1;

184 
size
 +(
n_±s
 * 
	`BIT
(
£L4_PageTabÀBôs
));

185 
n_¶Ÿs
 +
n_±s
;

188 
size
 +(
	`BIT
(
£L4_PUDBôs
));

189 
size
 +(
	`BIT
(
£L4_PageDúBôs
));

190 
n_¶Ÿs
 += 2;

193 
n_¶Ÿs
++;

200 
n_¶Ÿs
 +
	`ˇlcuœã_ut_ˇps
(
bi
, 
£L4_PageBôs
);

203 
n_¶Ÿs
 -
	`BIT
(
SOS_DMA_SIZE_BITS
 - 
£L4_PageBôs
);

206 
size_t
 
n_˙odes
 = 
n_¶Ÿs
 / 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
) + 2;

207 
	`ZF_LOGD
("%zu slŸ†√eded, %zu cnodes", 
n_¶Ÿs
, 
n_˙odes
);

208 
size
 +(
n_˙odes
 * 
	`BIT
(
CNODE_SIZE_BITS
)Ë+ BIT(
INITIAL_TASK_CNODE_SIZE_BITS
);

211 
	`ZF_LOGF_IF
(
n_˙odes
 > 
	`CNODE_SLOTS
(
INITIAL_TASK_CNODE_SIZE_BITS
), "Insufficient slots %lu for"

212 "bŸtomÜevñ cnode†%lu", 
	`CNODE_SLOTS
(
INITIAL_TASK_CNODE_SIZE_BITS
), 
n_˙odes
);

216 
£L4_CPå
 
ut_˝å
 = 
	`°ól_u¡y≥d
(
bi
, 
	`BYTES_TO_SIZE_BITS
(
size
Ë+ 1, 
NULL
);

217 
	`ZF_LOGF_IF
(
ut_˝å
 =
£L4_C≠NuŒ
, "CouldÇot find memoryÅo boostrap cspace");

220 
c•a˚
->
roŸ_˙ode
 = 
£L4_C≠InôThªadCNode
;

222 
îr
 = 
	`£L4_U¡y≥d_Rëy≥
(
ut_˝å
, 
£L4_C≠TabÀObje˘
, 
	`CNODE_SLOT_BITS
(
INITIAL_TASK_CNODE_SIZE_BITS
),

223 
£L4_C≠InôThªadCNode
, 0, 0, 
Àvñ1_˝å
, 1);

224 
	`ZF_LOGF_IFERR
(
îr
, "AllocatingÇewÑoot cnode");

227 
size_t
 
chunk
 = 0;

228 
size_t
 
tŸÆ
 = 
n_˙odes
;ÅŸÆ > 0;ÅŸÆ -
chunk
) {

229 
chunk
 = 
	`MIN
((
size_t
Ë
CONFIG_RETYPE_FAN_OUT_LIMIT
, 
tŸÆ
);

230 
îr
 = 
	`£L4_U¡y≥d_Rëy≥
(
ut_˝å
, 
£L4_C≠TabÀObje˘
, 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
),

231 
Àvñ1_˝å
, 0, 0, 
n_˙odes
 - 
tŸÆ
, 
chunk
);

232 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅoállocate 2ndÜevel cnodes");

234 
£L4_W‹d
 
dïth
 = 
	`CNODE_SLOT_BITS
(
INITIAL_TASK_CNODE_SIZE_BITS
) +

235 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
);

238 
îr
 = 
	`£L4_CNode_C›y
(
Àvñ1_˝å
, 
boŸ_˝å
, 
dïth
,

239 
£L4_C≠InôThªadCNode
, seL4_C≠InôThªadCNode, 
£L4_W‹dBôs
, 
£L4_AŒRights
);

240 
	`ZF_LOGF_IFERR
(
îr
, "Making copy ofÑootÅask's initial cnode cap");

243 
£L4_W‹d
 
gu¨d
 = 
	`£L4_CNode_C≠D©a_√w
(0, 
£L4_W‹dBôs
 - 
dïth
).
w‹ds
[0];

244 
îr
 = 
	`£L4_CNode_Möt
(
Àvñ1_˝å
, 
£L4_C≠InôThªadCNode
, 
dïth
,

245 
£L4_C≠InôThªadCNode
, 
Àvñ1_˝å
, 
£L4_W‹dBôs
, 
£L4_AŒRights
, 
gu¨d
);

246 
	`ZF_LOGF_IFERR
(
îr
, "MakingÇew capÅoÇew cspace");

249 
îr
 = 
	`£L4_TCB_SëS∑˚
(
£L4_C≠InôThªadTCB
, 0, 
Àvñ1_˝å
, 
gu¨d
,

250 
£L4_C≠InôThªadVS∑˚
, 
£L4_NûD©a
);

251 
	`ZF_LOGF_IFERR
(
îr
, "Replacing intial cnode withÇew cspace");

258 
£L4_CPå
 
i
 = 1; i < 
bi
->
em±y
.
°¨t
; i++) {

259 
i
) {

261 
£L4_C≠InôThªadCNode
:

263 
£L4_C≠IOP‹tC⁄åﬁ
:

264 
£L4_C≠IOS∑˚
:

267 
	`ZF_LOGV
("c•a˚: movög c≠ %lu boŸ ->Çew c•a˚", 
i
);

268 
îr
 = 
	`£L4_CNode_Move
(
£L4_C≠InôThªadCNode
,

269 
i
,

270 
£L4_W‹dBôs
,

271 
boŸ_˝å
,

272 
i
,

273 
£L4_W‹dBôs
);

274 
	`ZF_LOGF_IFERR
(
îr
, "C›yög inôü»öôü»˙odêˇ∞%∞tÿ√w c•a˚", (*Ë
i
);

280 
îr
 = 
	`£L4_CNode_Dñëe
(
£L4_C≠InôThªadCNode
,

281 
boŸ_˝å
,

282 
£L4_W‹dBôs
);

283 
	`ZF_LOGF_IFERR
(
îr
, "DeletingÑootÅask's original cnode cap");

289 
c•a˚
->
two_Àvñ
 = 
åue
;

292 
£L4_CPå
 
fú°_‰ì_¶Ÿ
 = 
bi
->
em±y
.
°¨t
;

293 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut_˝å
, 
fú°_‰ì_¶Ÿ
, 
£L4_ARM_PageUµîDúe˘‹yObje˘
, 
£L4_PageBôs
);

294 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo createÖage upper directory");

297 
îr
 = 
	`£L4_ARM_PageUµîDúe˘‹y_M≠
(
fú°_‰ì_¶Ÿ
, 
£L4_C≠InôThªadVS∑˚
, 
SOS_UT_TABLE
,

298 
£L4_ARM_DeÁu…_VMAâribuãs
);

299 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo mapÖage upper directory");

300 
fú°_‰ì_¶Ÿ
++;

303 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut_˝å
, 
fú°_‰ì_¶Ÿ
, 
£L4_ARM_PageDúe˘‹yObje˘
, 
£L4_PageBôs
);

304 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo createÖage directory");

306 
îr
 = 
	`£L4_ARM_PageDúe˘‹y_M≠
(
fú°_‰ì_¶Ÿ
, 
£L4_C≠InôThªadVS∑˚
, 
SOS_UT_TABLE
,

307 
£L4_ARM_DeÁu…_VMAâribuãs
);

308 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo mapÖage directory");

309 
fú°_‰ì_¶Ÿ
++;

312 
size_t
 
i
 = 0; i < (
ut_∑ges
 >> 
£L4_PageTabÀIndexBôs
) + 1; i++) {

313 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut_˝å
, 
fú°_‰ì_¶Ÿ
, 
£L4_ARM_PageTabÀObje˘
, 
£L4_PageBôs
);

314 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo createÖageÅable");

316 
£L4_W‹d
 
vaddr
 = 
SOS_UT_TABLE
 + 
i
 * (
	`BIT
(
£L4_PageTabÀIndexBôs
 + 
£L4_PageBôs
));

317 
	`ZF_LOGV
("M≠pögÖagêèbÀáà%p", (*Ë
vaddr
);

318 
îr
 = 
	`£L4_ARM_PageTabÀ_M≠
(
fú°_‰ì_¶Ÿ
, 
£L4_C≠InôThªadVS∑˚
, 
vaddr
,

319 
£L4_ARM_DeÁu…_VMAâribuãs
);

320 
	`ZF_LOGF_IFERR
(
îr
, "FaûedÅÿm≠ÖagêèbÀáà%p", (*Ë
vaddr
);

321 
fú°_‰ì_¶Ÿ
++;

324 
boŸ°øp_d©a
.
v•a˚
 = 
£L4_C≠InôThªadVS∑˚
;

325 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
 = 
SOS_UT_TABLE
;

328 
size_t
 
¶Ÿs_≥r_˙ode
 = 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
);

329 
size_t
 
i
 = 0; i < 
ut_∑ges
; i++) {

331 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut_˝å
, 
fú°_‰ì_¶Ÿ
, 
£L4_ARM_SmÆlPageObje˘
, 
£L4_PageBôs
);

332 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅoállocateÖage for utÅable");

334 
îr
 = 
	`£L4_ARM_Page_M≠
(
fú°_‰ì_¶Ÿ
, 
£L4_C≠InôThªadVS∑˚
, 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
,

335 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

336 
	`ZF_LOGF_IFERR
(
îr
, "FaûedÅÿm≠Öagê© %p", (*Ë
boŸ°øp_d©a
.
√xt_‰ì_vaddr
);

337 
fú°_‰ì_¶Ÿ
++;

338 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
 +
PAGE_SIZE_4K
;

342 
uöçå_t
 
dma_∑ddr
;

343 
£L4_CPå
 
dma_ut
 = 
	`°ól_u¡y≥d
(
bi
, 
SOS_DMA_SIZE_BITS
, &
dma_∑ddr
);

344 
	`ZF_LOGF_IF
(
dma_ut
 =
£L4_C≠NuŒ
, "CouldÇot find DMA memory");

346 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
dma_ut
, 
fú°_‰ì_¶Ÿ
, 
£L4_ARM_L¨gePageObje˘
, 
SOS_DMA_SIZE_BITS
);

347 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅoÑetype dma untyped");

348 
£L4_CPå
 
dma_˝å
 = 
fú°_‰ì_¶Ÿ
;

349 
fú°_‰ì_¶Ÿ
++;

352 
	`ut_öô
((*Ë
SOS_UT_TABLE
, 
mem‹y
);

355 
size_t
 
i
 = 0; i < 
bi
->
u¡y≥d
.
íd
 - bi->u¡y≥d.
°¨t
; i++) {

356 
size_t
 
n_ˇps
 = 
boŸ_öfo_avaû_byãs
[
i
] / 
PAGE_SIZE_4K
;

357 
£L4_W‹d
 
∑ddr
 = 
	`∑ddr_‰om_avaû_byãs
(
bi
, 
i
, 
£L4_PageBôs
);

358 i‡(
n_ˇps
 > 0) {

359 
	`ut_add_u¡y≥d_ønge
(
∑ddr
, 
fú°_‰ì_¶Ÿ
, 
n_ˇps
, 
bi
->
u¡y≥dLi°
[
i
].
isDevi˚
);

361 
n_ˇps
 > 0) {

362 
£L4_CPå
 
˙ode
 = 
fú°_‰ì_¶Ÿ
 / 
¶Ÿs_≥r_˙ode
;

365 
ªty≥
 = 
	`MIN
((
size_t
Ë
CONFIG_RETYPE_FAN_OUT_LIMIT
, MIN(
n_ˇps
, 
¶Ÿs_≥r_˙ode
 - (
fú°_‰ì_¶Ÿ
 % slots_per_cnode)));

366 
îr
 = 
	`£L4_U¡y≥d_Rëy≥
(
bi
->
u¡y≥d
.
°¨t
 + 
i
, 
£L4_U¡y≥dObje˘
, 
£L4_PageBôs
,

367 
£L4_C≠InôThªadCNode
, 
˙ode
,

368 
£L4_W‹dBôs
 - 
	`CNODE_SLOT_BITS
(
CNODE_SIZE_BITS
),

369 
fú°_‰ì_¶Ÿ
 % 
¶Ÿs_≥r_˙ode
, 
ªty≥
);

370 
fú°_‰ì_¶Ÿ
 +
ªty≥
;

371 
n_ˇps
 -
ªty≥
;

372 
	`ZF_LOGF_IFERR
(
îr
, "FailedÑetype untyped");

377 
c•a˚
->
t›_lvl_size_bôs
 = 
INITIAL_TASK_CNODE_SIZE_BITS
;

378 
c•a˚
->
t›_bf
 =Åop_bf;

379 
c•a˚
->
n_bŸ_lvl_nodes
 = 0;

380 
c•a˚
->
bŸ_lvl_nodes
 = bot_lvl_nodes;

381 
c•a˚
->
Æloc
 = (
c•a˚_Æloc_t
) {

382 .
m≠_‰ame
 = 
boŸ°øp_c•a˚_m≠_‰ame
,

383 .
Æloc_4k_ut
 = 
boŸ°øp_c•a˚_Æloc_4k_ut
,

384 .
‰ì_4k_ut
 = 
boŸ°øp_c•a˚_‰ì_4k_ut
,

385 .
cookõ
 = 
c•a˚


389 
size_t
 
n_bŸ_lvl
 = 
	`MAX
((
fú°_‰ì_¶Ÿ
 / 
¶Ÿs_≥r_˙ode
 + 1), 
n_˙odes
Ë/ 
BOT_LVL_PER_NODE
 + 1;

390 
size_t
 
i
 = 0; i < 
n_bŸ_lvl
; i++) {

391 
	`ZF_LOGD
("AŒoˇtögÇodê%zu f‹ c•a˚ book kìpög", 
i
);

392 
£L4_W‹d
 
∑ddr
;

393 
ut_t
 *
ut
 = 
	`ut_Æloc_4k_u¡y≥d
(&
∑ddr
);

394 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut
->
ˇp
, 
fú°_‰ì_¶Ÿ
,

395 
£L4_ARM_SmÆlPageObje˘
, 
£L4_PageBôs
);

396 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅoÑetype initial cspace frame");

398 
îr
 = 
	`£L4_ARM_Page_M≠
(
fú°_‰ì_¶Ÿ
, 
£L4_C≠InôThªadVS∑˚
, 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
,

399 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

400 
	`ZF_LOGF_IFERR
(
îr
, "FaûedÅÿm≠Öagê© %p", (*Ë
boŸ°øp_d©a
.
√xt_‰ì_vaddr
);

401 
c•a˚
->
bŸ_lvl_nodes
[
i
] = (*Ë
boŸ°øp_d©a
.
√xt_‰ì_vaddr
;

402 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
 +
PAGE_SIZE_4K
;

404 
	`mem£t
(
c•a˚
->
bŸ_lvl_nodes
[
i
], 0, 
PAGE_SIZE_4K
);

405 
c•a˚
->
bŸ_lvl_nodes
[
i
]->
u¡y≥d
 = 
ut
;

406 
c•a˚
->
bŸ_lvl_nodes
[
i
]->
‰ame
 = 
fú°_‰ì_¶Ÿ
;

407 
c•a˚
->
n_bŸ_lvl_nodes
++;

408 
fú°_‰ì_¶Ÿ
++;

412 
uöçå_t
 
dma_vaddr
 = 
	`ALIGN_UP
(
boŸ°øp_d©a
.
√xt_‰ì_vaddr
 + 
PAGE_SIZE_4K
, 
	`BIT
(
£L4_L¨gePageBôs
));

413 
îr
 = 
	`dma_öô
(
c•a˚
, 
£L4_C≠InôThªadVS∑˚
, 
dma_˝å
, 
dma_∑ddr
, 
dma_vaddr
);

414 
	`ZF_LOGF_IF
(
îr
, "FailedÅo initialise DMA");

415 
boŸ°øp_d©a
.
√xt_‰ì_vaddr
 = 
dma_vaddr
 + 
	`BIT
(
£L4_L¨gePageBôs
Ë+ 
PAGE_SIZE_4K
;

418 
£L4_CPå
 
i
 = 0; i < 
	`ALIGN_DOWN
(
fú°_‰ì_¶Ÿ
, 
¶Ÿs_≥r_˙ode
); i += slots_per_cnode) {

420 
bŸ_lvl_node_t
 *
bŸ_lvl_node
 = 
c•a˚
->
bŸ_lvl_nodes
[
	`NODE_INDEX
(
i
)];

421 
	`as£π
(
bŸ_lvl_node
 !
NULL
);

422 
bŸ_lvl_node
->
n_˙odes
++;

423 
size_t
 
i
 = 0; i < 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
Ë/ 
£L4_W‹dBôs
; i++) {

424 
bŸ_lvl_node
->
˙odes
[
	`CNODE_INDEX
(
i
)].
bf
[i] = 
UINTPTR_MAX
;

427 
	`bf_£t_bô
(
c•a˚
->
t›_bf
, 
	`TOP_LVL_INDEX
(
i
));

431 
bŸ_lvl_node_t
 *
bŸ_lvl_node
 = 
c•a˚
->
bŸ_lvl_nodes
[
fú°_‰ì_¶Ÿ
 / 
¶Ÿs_≥r_˙ode
 / 
BOT_LVL_PER_NODE
];

432 
bŸ_lvl_node
->
n_˙odes
++;

434 
£L4_CPå
 
i
 = 
	`ALIGN_DOWN
(
fú°_‰ì_¶Ÿ
, 
¶Ÿs_≥r_˙ode
); i < first_free_slot; i++) {

435 
	`bf_£t_bô
(
bŸ_lvl_node
->
˙odes
[
	`CNODE_INDEX
(
i
)].
bf
, 
	`BOT_LVL_INDEX
(i));

440 
size_t
 
i
 = (
fú°_‰ì_¶Ÿ
 / 
¶Ÿs_≥r_˙ode
 + 1); i < 
n_˙odes
; i++) {

441 
c•a˚
->
bŸ_lvl_nodes
[
i
 / 
BOT_LVL_PER_NODE
]->
n_˙odes
++;

445 
size_t
 
i
 = 0; i < 
WATERMARK_SLOTS
; i++) {

446 
c•a˚
->
w©îm¨k
[
i
] = 
	`c•a˚_Æloc_¶Ÿ
(cspace);

447 
	`ZF_LOGF_IF
(
c•a˚
->
w©îm¨k
[
i
] =
£L4_C≠NuŒ
, "FailedÅoállocate watermark cslot");

450 
	`ZF_LOGD
("cspace:ÑootÅasks cspace bootstrapped");

451 
	}
}

	@sos/src/bootstrap.h

12 #¥agm®
⁄˚


14 
	~<utûs/utû.h
>

15 
	~<£l4/£l4.h
>

20 
sos_boŸ°øp
(
c•a˚_t
 *
c•a˚
, c⁄° 
£L4_BoŸInfo
 *
bi
);

27 *
boŸ°øp_m≠_‰ame
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
ˇp
);

30 *
boŸ°øp_c•a˚_m≠_‰ame
(*
cookõ
, 
£L4_CPå
 
ˇp
, seL4_CPå 
‰ì_¶Ÿs
[
MAPPING_SLOTS
], 
£L4_W‹d
 *
u£d
);

31 *
boŸ°øp_c•a˚_Æloc_4k_ut
(*
cookõ
, 
£L4_CPå
 *
ˇp
);

32 
boŸ°øp_c•a˚_‰ì_4k_ut
(*
cookõ
, *
u¡y≥d
);

	@sos/src/dma.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<as£π.h
>

20 
	~<°rög.h
>

22 
	~<£l4/ty≥s.h
>

23 
	~<c•a˚/c•a˚.h
>

24 
	~"dma.h
"

25 
	~"m≠pög.h
"

26 
	~"ut.h
"

27 
	~"vmem_œyout.h
"

29 
	#DMA_ALIGN_BITS
 7

	)

30 
	#DMA_ALIGN
(
a
Ë
	`ROUND_UP
(◊), 
DMA_ALIGN_BITS
)

	)

34 
uöçå_t
 
	mv°¨t
;

36 
uöçå_t
 
	mp°¨t
;

38 
uöçå_t
 
	m≤ext
;

40 
uöçå_t
 
	m≥nd
;

42 
£L4_CPå
 
	mˇp
;

44 
£L4_CPå
 
	mv•a˚
;

45 } 
	tdma_t
;

48 
dma_t
 
	gdma
;

50 
uöçå_t
 
	$sos_dma_phys_to_vút
(
uöçå_t
 
phys
)

52  
dma
.
v°¨t
 + (
phys
 - dma.
p°¨t
);

53 
	}
}

55 
uöçå_t
 
	$sos_dma_vút_to_phys
(
uöçå_t
 
vaddr
)

57  
dma
.
p°¨t
 + (
vaddr
 - dma.
v°¨t
);

58 
	}
}

60 
	$dma_öô
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
v•a˚
, seL4_CPå 
ut
, 
uöçå_t
 
p°¨t
, uöçå_à
v°¨t
)

62 i‡(
ut
 =
£L4_C≠NuŒ
 || 
v•a˚
 =£L4_C≠NuŒ || 
c•a˚
 =
NULL
 || 
p°¨t
 == 0) {

66 
dma
.
p°¨t
 =Östart;

67 
dma
.
v°¨t
 = vstart;

68 
dma
.
≥nd
 = dma.
p°¨t
 + 
	`BIT
(
£L4_L¨gePageBôs
);

69 
dma
.
≤ext
 = dma.
p°¨t
;

70 
dma
.
v•a˚
 = vspace;

73 
uöçå_t
 
vaddr
 = 
	`sos_dma_phys_to_vút
(
dma
.
p°¨t
);

74 
	`ZF_LOGI
("DMA inôüli£d %∞<--> %p\n", (*Ë
vaddr
, (*Ë
	`sos_dma_phys_to_vút
(
dma
.
≥nd
));

75  
	`m≠_‰ame
(
NULL
, 
ut
, 
dma
.
v•a˚
, 
vaddr
, 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

76 
	}
}

78 
dma_addr_t
 
	$sos_dma_mÆloc
(
size_t
 
size
, 
Æign
)

80 
dma_addr_t
 
addr
 = {0, 0};

82 
dma
.
≤ext
 = 
	`DMA_ALIGN
(dma.pnext);

85 
dma
.
≤ext
 = 
	`ROUND_UP
(dma.≤ext, 
Æign
);

87 i‡(
dma
.
≤ext
 + 
size
 >dma.
≥nd
) {

88 
	`ZF_LOGE
("Out of DMA memory");

89  
addr
;

92 
addr
.
vaddr
 = 
	`sos_dma_phys_to_vút
(
dma
.
≤ext
);

93 
addr
.
∑ddr
 = 
dma
.
≤ext
;

96 
dma
.
≤ext
 +
size
;

97 
	`ZF_LOGD
("DMA: 0x%x\n", (
uöçå_t
Ë
addr
.
vaddr
);

100 
	`sos_dma_ˇche_˛ón_övÆid©e
(
addr
.
vaddr
, 
size
);

101  
addr
;

102 
	}
}

104 
£L4_Eº‹
 
	$sos_dma_ˇche_övÆid©e
(
uöçå_t
 
addr
, 
size_t
 
size
)

106  
	`£L4_ARM_PageGlobÆDúe˘‹y_InvÆid©e_D©a
(
dma
.
v•a˚
, 
addr
,ádd∏+ 
size
);

107 
	}
}

109 
£L4_Eº‹
 
	$sos_dma_ˇche_˛ón
(
uöçå_t
 
addr
, 
size_t
 
size
)

111  
	`£L4_ARM_PageGlobÆDúe˘‹y_CÀ™_D©a
(
dma
.
v•a˚
, 
addr
,ádd∏+ 
size
);

112 
	}
}

114 
£L4_Eº‹
 
	$sos_dma_ˇche_˛ón_övÆid©e
(
uöçå_t
 
addr
, 
size_t
 
size
)

116  
	`£L4_ARM_PageGlobÆDúe˘‹y_CÀ™InvÆid©e_D©a
(
dma
.
v•a˚
, 
addr
,ádd∏+ 
size
);

117 
	}
}

	@sos/src/dma.h

12 
	~<c•a˚/c•a˚.h
>

15 
uöçå_t
 
	mvaddr
;

16 
uöçå_t
 
	m∑ddr
;

17 } 
	tdma_addr_t
;

30 
dma_öô
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
v•a˚
, seL4_CPå 
ut
, 
uöçå_t
 
p°¨t
, uöçå_à
v°¨t
);

39 
dma_addr_t
 
sos_dma_mÆloc
(
size_t
 
size
, 
Æign
);

46 
uöçå_t
 
sos_dma_phys_to_vút
(uöçå_à
phys
);

53 
uöçå_t
 
sos_dma_vút_to_phys
(uöçå_à
vút
);

60 
£L4_Eº‹
 
sos_dma_ˇche_övÆid©e
(
uöçå_t
 
addr
, 
size_t
 
size
);

61 
£L4_Eº‹
 
sos_dma_ˇche_˛ón
(
uöçå_t
 
addr
, 
size_t
 
size
);

62 
£L4_Eº‹
 
sos_dma_ˇche_˛ón_övÆid©e
(
uöçå_t
 
addr
, 
size_t
 
size
);

	@sos/src/drivers/uart.c

12 
	~<utûs/utû.h
>

14 
	~"../m≠pög.h
"

15 
	~"u¨t.h
"

17 
	#UART_PADDR
 0xc81004c0

	)

20 
uöt32_t
 
	mwfifo
;

21 
uöt32_t
 
	mrfifo
;

22 
uöt32_t
 
	mc⁄åﬁ
;

23 
uöt32_t
 
	m°©us
;

24 
uöt32_t
 
	mmisc
;

25 
uöt32_t
 
	mªg5
;

26 } *
	gu¨t
;

28 
	#UART_STATUS_TX_FIFO_FULL
 
	`BIT
(21)

	)

29 
	#UART_CONTROL_TX_ENABLE
 
	`BIT
(12)

	)

31 
	$u¨t_öô
(
c•a˚_t
 *
c•a˚
)

34 *
u¨t_vaddr
 = 
	`sos_m≠_devi˚
(
c•a˚
, 
	`PAGE_ALIGN_4K
(
UART_PADDR
), 
PAGE_SIZE_4K
);

35 
	`ZF_LOGF_IF
(
u¨t_vaddr
 =
NULL
, "FailedÅo map uart");

37 
u¨t
 = 
u¨t_vaddr
 + (
UART_PADDR
 & 
	`MASK
((
size_t
Ë
£L4_PageBôs
));

40 
u¨t
->
c⁄åﬁ
 |
UART_CONTROL_TX_ENABLE
;

41 
	}
}

43 
	$u¨t_putch¨
(
c
)

46 
u¨t
->
°©us
 & 
UART_STATUS_TX_FIFO_FULL
);

47 
u¨t
->
wfifo
 = 
c
;

49 i‡(
c
 == '\n') {

50 
	`u¨t_putch¨
('\r');

52 
	}
}

	@sos/src/drivers/uart.h

12 
	~<c•a˚/c•a˚.h
>

16 
u¨t_öô
(
c•a˚_t
 *
c•a˚
);

18 
u¨t_putch¨
(
c
);

	@sos/src/elf.c

12 
	~<utûs/utû.h
>

13 
	~<°dboﬁ.h
>

14 
	~<£l4/£l4.h
>

15 
	~<ñf/ñf.h
>

16 
	~<°rög.h
>

17 
	~<as£π.h
>

18 
	~<c•a˚/c•a˚.h
>

20 
	~"vmem_œyout.h
"

21 
	~"ut.h
"

22 
	~"m≠pög.h
"

23 
	~"ñÊﬂd.h
"

28 
ölöe
 
£L4_C≠Rights_t
 
	$gë_£l4_rights_‰om_ñf
(
≥rmissi⁄s
)

30 
boﬁ
 
ˇnRód
 = 
≥rmissi⁄s
 & 
PF_R
 ||Öîmissi⁄†& 
PF_X
;

31 
boﬁ
 
ˇnWrôe
 = 
≥rmissi⁄s
 & 
PF_W
;

33 i‡(!
ˇnRód
 && !
ˇnWrôe
) {

34  
£L4_AŒRights
;

37  
	`£L4_C≠Rights_√w
(
Ál£
, 
ˇnRód
, 
ˇnWrôe
);

38 
	}
}

74 
	$lﬂd_£gmít_öto_v•a˚
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
lﬂdî
, seL4_CPå 
lﬂdì
,

75 *
§c
, 
size_t
 
£gmít_size
,

76 
size_t
 
fûe_size
, 
uöçå_t
 
d°
, 
£L4_C≠Rights_t
 
≥rmissi⁄s
)

78 
	`as£π
(
fûe_size
 <
£gmít_size
);

81 
pos
 = 0;

82 
£L4_Eº‹
 
îr
 = 
£L4_NoEº‹
;

83 
pos
 < 
£gmít_size
) {

84 
uöçå_t
 
lﬂdì_vaddr
 = (
	`ROUND_DOWN
(
d°
, 
PAGE_SIZE_4K
));

85 
uöçå_t
 
lﬂdî_vaddr
 = 
	`ROUND_DOWN
(
SOS_ELF_VMEM
 + 
d°
, 
PAGE_SIZE_4K
);

88 
£L4_CPå
 
lﬂdì_‰ame
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

89 i‡(
lﬂdì_‰ame
 =
£L4_C≠NuŒ
) {

90 
	`ZF_LOGD
("FailedÅoálloc slot");

95 
ut_t
 *
ut
 = 
	`ut_Æloc_4k_u¡y≥d
(
NULL
);

96 i‡(
ut
 =
NULL
) {

97 
	`ZF_LOGD
("FailedÅoálloc untyped");

102 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut
->
ˇp
, 
lﬂdì_‰ame
, 
£L4_ARM_SmÆlPageObje˘
, 
£L4_PageBôs
);

103 i‡(
îr
 !
£L4_NoEº‹
) {

104 
	`ZF_LOGD
("FailedÅo untypedÑeypte");

109 
îr
 = 
	`m≠_‰ame
(
c•a˚
, 
lﬂdì_‰ame
, 
lﬂdì
, 
lﬂdì_vaddr
, 
≥rmissi⁄s
,

110 
£L4_ARM_DeÁu…_VMAâribuãs
);

119 
boﬁ
 
Æªady_m≠≥d
 = (
îr
 =
£L4_DñëeFú°
);

121 i‡(
Æªady_m≠≥d
) {

122 
	`c•a˚_dñëe
(
c•a˚
, 
lﬂdì_‰ame
);

123 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
lﬂdì_‰ame
);

124 
	`ut_‰ì
(
ut
, 
£L4_PageBôs
);

125 } i‡(
îr
 !
£L4_NoEº‹
) {

126 
	`ZF_LOGE
("FaûedÅÿm≠ i¡ÿlﬂdìáà%p,Éº‹ %u", (*Ë
lﬂdì_vaddr
, 
îr
);

131 
£L4_CPå
 
lﬂdî_‰ame
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

132 i‡(
lﬂdî_‰ame
 =
£L4_C≠NuŒ
) {

133 
	`ZF_LOGD
("FailedÅoálloc slot");

138 
îr
 = 
	`c•a˚_c›y
(
c•a˚
, 
lﬂdî_‰ame
, c•a˚, 
lﬂdì_‰ame
, 
£L4_AŒRights
);

139 i‡(
îr
 !
£L4_NoEº‹
) {

140 
	`ZF_LOGD
("FaûedÅÿc›y fømêˇp, c±∏%lx", 
lﬂdî_‰ame
);

145 
îr
 = 
	`m≠_‰ame
(
c•a˚
, 
lﬂdî_‰ame
, 
lﬂdî
, 
lﬂdî_vaddr
, 
£L4_AŒRights
,

146 
£L4_ARM_DeÁu…_VMAâribuãs
);

147 i‡(
îr
) {

148 
	`ZF_LOGD
("FaûedÅÿm≠ i¡ÿlﬂdîáà%p", (*Ë
lﬂdî_vaddr
);

154 
size_t
 
nbyãs
 = 
PAGE_SIZE_4K
 - (
d°
 % PAGE_SIZE_4K);

155 i‡(
pos
 < 
fûe_size
) {

156 
	`mem˝y
((*Ë(
lﬂdî_vaddr
 + (
d°
 % 
PAGE_SIZE_4K
)), 
§c
, 
	`MIN
(
nbyãs
, 
fûe_size
 - 
pos
));

162 
	`£L4_ARM_PageGlobÆDúe˘‹y_Unify_In°ru˘i⁄
(
lﬂdî
, 
lﬂdî_vaddr
,Üﬂdî_vadd∏+ 
PAGE_SIZE_4K
);

163 
	`£L4_ARM_PageGlobÆDúe˘‹y_Unify_In°ru˘i⁄
(
lﬂdì
, 
lﬂdì_vaddr
,Üﬂdì_vadd∏+ 
PAGE_SIZE_4K
);

165 
pos
 +
nbyãs
;

166 
d°
 +
nbyãs
;

167 
§c
 +
nbyãs
;

170 
	}
}

172 
	$ñf_lﬂd
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
lﬂdî_v•a˚
, seL4_CPå 
lﬂdì_v•a˚
, *
ñf_fûe
)

176 i‡(
ñf_fûe
 =
NULL
 || 
	`ñf_checkFûe
(elf_file)) {

177 
	`ZF_LOGE
("InvalidÉlf file");

181 
num_hódîs
 = 
	`ñf_gëNumProgømHódîs
(
ñf_fûe
);

182 
i
 = 0; i < 
num_hódîs
; i++) {

185 i‡(
	`ñf_gëProgømHódîTy≥
(
ñf_fûe
, 
i
Ë!
PT_LOAD
) {

190 *
sour˚_addr
 = 
ñf_fûe
 + 
	`ñf_gëProgømHódîOff£t
”lf_fûe, 
i
);

191 
size_t
 
fûe_size
 = 
	`ñf_gëProgømHódîFûeSize
(
ñf_fûe
, 
i
);

192 
size_t
 
£gmít_size
 = 
	`ñf_gëProgømHódîMem‹ySize
(
ñf_fûe
, 
i
);

193 
uöçå_t
 
vaddr
 = 
	`ñf_gëProgømHódîVaddr
(
ñf_fûe
, 
i
);

194 
£L4_W‹d
 
Êags
 = 
	`ñf_gëProgømHódîFœgs
(
ñf_fûe
, 
i
);

197 
	`ZF_LOGD
(" * Lﬂdög segmíà%p-->%p\n", (*Ë
vaddr
, (*)(vadd∏+ 
£gmít_size
));

198 
îr
 = 
	`lﬂd_£gmít_öto_v•a˚
(
c•a˚
, 
lﬂdî_v•a˚
, 
lﬂdì_v•a˚
,

199 
sour˚_addr
, 
£gmít_size
, 
fûe_size
, 
vaddr
,

200 
	`gë_£l4_rights_‰om_ñf
(
Êags
));

201 i‡(
îr
) {

202 
	`ZF_LOGE
("ElfÜoading failed!");

208 
	}
}

	@sos/src/elfload.h

12 #¥agm®
⁄˚


14 
	~<£l4/£l4.h
>

15 
	~<c•a˚/c•a˚.h
>

16 
	~<ñf/ñf.h
>

17 
	~<ñf.h
>

19 
ñf_lﬂd
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
lﬂdî_v•a˚
, seL4_CPå 
lﬂdì_v•a˚
, *
ñf_fûe
);

	@sos/src/main.c

12 
	~<autoc⁄f.h
>

13 
	~<utûs/utû.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<as£π.h
>

17 
	~<°rög.h
>

19 
	~<c•a˚/c•a˚.h
>

20 
	~<aos/£l4_zf_logif.h
>

21 
	~<aos/debug.h
>

23 
	~<˛ock/˛ock.h
>

24 
	~<˝io/˝io.h
>

25 
	~<ñf/ñf.h
>

26 
	~<£rül/£rül.h
>

28 
	~"boŸ°øp.h
"

29 
	~"√tw‹k.h
"

30 
	~"drivîs/u¨t.h
"

31 
	~"ut.h
"

32 
	~"vmem_œyout.h
"

33 
	~"m≠pög.h
"

34 
	~"ñÊﬂd.h
"

35 
	~"sysˇŒs.h
"

36 
	~"ã°s.h
"

38 
	~<aos/vsysˇŒ.h
>

44 
	#IRQ_EP_BADGE
 
	`BIT
(
£L4_BadgeBôs
 - 1)

	)

47 
	#IRQ_BADGE_NETWORK
 
	`BIT
(0)

	)

49 
	#TTY_NAME
 "ây_ã°"

	)

50 
	#TTY_PRIORITY
 (0)

	)

51 
	#TTY_EP_BADGE
 (101)

	)

56 
	#SOS_SYSCALL0
 0

	)

60 
_˝io_¨chive
[];

61 
__eh_‰ame_°¨t
[];

63 (
__ªgi°î_‰ame
)(*);

66 
c•a˚_t
 
c•a˚
;

70 
ut_t
 *
tcb_ut
;

71 
£L4_CPå
 
tcb
;

72 
ut_t
 *
v•a˚_ut
;

73 
£L4_CPå
 
v•a˚
;

75 
ut_t
 *
ùc_buf„r_ut
;

76 
£L4_CPå
 
ùc_buf„r
;

78 
c•a˚_t
 
c•a˚
;

80 
ut_t
 *
°ack_ut
;

81 
£L4_CPå
 
°ack
;

82 } 
ây_ã°_¥o˚ss
;

84 
	$h™dÀ_sysˇŒ
(
UNUSED
 
£L4_W‹d
 
badge
, UNUSED 
num_¨gs
)

88 
£L4_CPå
 
ª∂y
 = 
	`c•a˚_Æloc_¶Ÿ
(&
c•a˚
);

91 
£L4_W‹d
 
sysˇŒ_numbî
 = 
	`£L4_GëMR
(0);

100 
£L4_Eº‹
 
îr
 = 
	`c•a˚_ßve_ª∂y_ˇp
(&
c•a˚
, 
ª∂y
);

101 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo saveÑeply");

104 
sysˇŒ_numbî
) {

105 
SOS_SYSCALL0
:

106 
	`ZF_LOGV
("syscall:ÅhreadÉxample made syscall 0!\n");

108 
£L4_MesßgeInfo_t
 
ª∂y_msg
 = 
	`£L4_MesßgeInfo_√w
(0, 0, 0, 1);

110 
	`£L4_SëMR
(0, 0);

112 
	`£L4_Síd
(
ª∂y
, 
ª∂y_msg
);

115 
	`c•a˚_‰ì_¶Ÿ
(&
c•a˚
, 
ª∂y
);

119 
	`ZF_LOGE
("Unknow¿sysˇŒ %lu\n", 
sysˇŒ_numbî
);

122 
	}
}

124 
NORETURN
 
	$sysˇŒ_lo›
(
£L4_CPå
 
ï
)

128 
£L4_W‹d
 
badge
 = 0;

131 
£L4_MesßgeInfo_t
 
mesßge
 = 
	`£L4_Recv
(
ï
, &
badge
);

134 
£L4_W‹d
 
œbñ
 = 
	`£L4_MesßgeInfo_gë_œbñ
(
mesßge
);

136 i‡(
badge
 & 
IRQ_EP_BADGE
) {

139 i‡(
badge
 & 
IRQ_BADGE_NETWORK
) {

140 
	`√tw‹k_úq
();

142 } i‡(
œbñ
 =
£L4_Fau…_NuŒFau…
) {

145 
	`h™dÀ_sysˇŒ
(
badge
, 
	`£L4_MesßgeInfo_gë_Àngth
(
mesßge
) - 1);

148 
	`debug_¥öt_Áu…
(
mesßge
, 
TTY_NAME
);

150 
	`debug_dump_ªgi°îs
(
ây_ã°_¥o˚ss
.
tcb
);

152 
	`ZF_LOGF
("The SOS skeleton doesÇot know howÅo handle faults!");

155 
	}
}

158 
ut_t
 *
	$Æloc_ªty≥
(
£L4_CPå
 *
˝å
, 
£L4_W‹d
 
ty≥
, 
size_t
 
size_bôs
)

161 
ut_t
 *
ut
 = 
	`ut_Æloc
(
size_bôs
, &
c•a˚
);

162 i‡(
ut
 =
NULL
) {

163 
	`ZF_LOGE
("Nÿmem‹y f‹ obje˘ o‡sizê%zu", 
size_bôs
);

164  
NULL
;

168 *
˝å
 = 
	`c•a˚_Æloc_¶Ÿ
(&
c•a˚
);

169 i‡(*
˝å
 =
£L4_C≠NuŒ
) {

170 
	`ut_‰ì
(
ut
, 
size_bôs
);

171 
	`ZF_LOGE
("FailedÅoállocate slot");

172  
NULL
;

176 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(&
c•a˚
, 
ut
->
ˇp
, *
˝å
, 
ty≥
, 
size_bôs
);

177 
	`ZF_LOGE_IFERR
(
îr
, "FailedÑetype untyped");

178 i‡(
îr
 !
£L4_NoEº‹
) {

179 
	`ut_‰ì
(
ut
, 
size_bôs
);

180 
	`c•a˚_‰ì_¶Ÿ
(&
c•a˚
, *
˝å
);

181  
NULL
;

184  
ut
;

185 
	}
}

187 
	$°ack_wrôe
(
£L4_W‹d
 *
m≠≥d_°ack
, 
ödex
, 
uöçå_t
 
vÆ
)

189 
m≠≥d_°ack
[
ödex
] = 
vÆ
;

190  
ödex
 - 1;

191 
	}
}

195 
uöçå_t
 
	$öô_¥o˚ss_°ack
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
loˇl_v•a˚
, *
ñf_fûe
)

198 
ây_ã°_¥o˚ss
.
°ack_ut
 = 
	`Æloc_ªty≥
(&ây_ã°_¥o˚ss.
°ack
, 
£L4_ARM_SmÆlPageObje˘
, 
£L4_PageBôs
);

199 i‡(
ây_ã°_¥o˚ss
.
°ack_ut
 =
NULL
) {

200 
	`ZF_LOGE
("FailedÅoállocate stack");

205 
uöçå_t
 
°ack_t›
 = 
PROCESS_STACK_TOP
;

206 
uöçå_t
 
°ack_bŸtom
 = 
PROCESS_STACK_TOP
 - 
PAGE_SIZE_4K
;

208 *
loˇl_°ack_t›
 = (
£L4_W‹d
 *Ë
SOS_SCRATCH
;

209 
uöçå_t
 
loˇl_°ack_bŸtom
 = 
SOS_SCRATCH
 - 
PAGE_SIZE_4K
;

212 
uöçå_t
 
sysöfo
 = *((uöçå_à*Ë
	`ñf_gëSe˘i⁄Named
(
ñf_fûe
, "__vsysˇŒ", 
NULL
));

213 i‡(
sysöfo
 == 0) {

214 
	`ZF_LOGE
("couldÇot find syscallÅable for cÜibrary");

219 
£L4_Eº‹
 
îr
 = 
	`m≠_‰ame
(
c•a˚
, 
ây_ã°_¥o˚ss
.
°ack
,Åty_ã°_¥o˚ss.
v•a˚
, 
°ack_bŸtom
,

220 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

221 i‡(
îr
 != 0) {

222 
	`ZF_LOGE
("UnableÅo map stack for userápp");

227 
£L4_CPå
 
loˇl_°ack_˝å
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

228 i‡(
loˇl_°ack_˝å
 =
£L4_C≠NuŒ
) {

229 
	`ZF_LOGE
("FailedÅoálloc slot for stack");

234 
îr
 = 
	`c•a˚_c›y
(
c•a˚
, 
loˇl_°ack_˝å
, c•a˚, 
ây_ã°_¥o˚ss
.
°ack
, 
£L4_AŒRights
);

235 i‡(
îr
 !
£L4_NoEº‹
) {

236 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
loˇl_°ack_˝å
);

237 
	`ZF_LOGE
("FailedÅo copy cap");

242 
îr
 = 
	`m≠_‰ame
(
c•a˚
, 
loˇl_°ack_˝å
, 
loˇl_v•a˚
, 
loˇl_°ack_bŸtom
, 
£L4_AŒRights
,

243 
£L4_ARM_DeÁu…_VMAâribuãs
);

244 i‡(
îr
 !
£L4_NoEº‹
) {

245 
	`c•a˚_dñëe
(
c•a˚
, 
loˇl_°ack_˝å
);

246 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
loˇl_°ack_˝å
);

250 
ödex
 = -2;

253 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 0);

254 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 0);

257 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 
PAGE_SIZE_4K
);

258 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 
AT_PAGESZ
);

260 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 
sysöfo
);

261 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 
AT_SYSINFO
);

264 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 0);

269 
ödex
 = 
	`°ack_wrôe
(
loˇl_°ack_t›
, index, 0);

274 
	`°ack_wrôe
(
loˇl_°ack_t›
, 
ödex
, 0);

277 
°ack_t›
 +(
ödex
 * (
£L4_W‹d
));

281 
	`as£π
(
ödex
 % 2 == 0);

282 
	`as£π
(
°ack_t›
 % ((
£L4_W‹d
) * 2) == 0);

285 
îr
 = 
	`£L4_ARM_Page_Unm≠
(
loˇl_°ack_˝å
);

286 
	`as£π
(
îr
 =
£L4_NoEº‹
);

289 
îr
 = 
	`c•a˚_dñëe
(
c•a˚
, 
loˇl_°ack_˝å
);

290 
	`as£π
(
îr
 =
£L4_NoEº‹
);

293 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
loˇl_°ack_˝å
);

295  
°ack_t›
;

296 
	}
}

304 
boﬁ
 
	$°¨t_fú°_¥o˚ss
(* 
≠p_«me
, 
£L4_CPå
 
ï
)

307 
ây_ã°_¥o˚ss
.
v•a˚_ut
 = 
	`Æloc_ªty≥
(&ây_ã°_¥o˚ss.
v•a˚
, 
£L4_ARM_PageGlobÆDúe˘‹yObje˘
,

308 
£L4_PGDBôs
);

309 i‡(
ây_ã°_¥o˚ss
.
v•a˚_ut
 =
NULL
) {

310  
Ál£
;

314 
£L4_W‹d
 
îr
 = 
	`£L4_ARM_ASIDPoﬁ_Assign
(
£L4_C≠InôThªadASIDPoﬁ
, 
ây_ã°_¥o˚ss
.
v•a˚
);

315 i‡(
îr
 !
£L4_NoEº‹
) {

316 
	`ZF_LOGE
("FailedÅoássignásidÖool");

317  
Ál£
;

321 
îr
 = 
	`c•a˚_¸óã_⁄e_Àvñ
(&
c•a˚
, &
ây_ã°_¥o˚ss
.cspace);

322 i‡(
îr
 !
CSPACE_NOERROR
) {

323 
	`ZF_LOGE
("FailedÅo create cspace");

324  
Ál£
;

328 
ây_ã°_¥o˚ss
.
ùc_buf„r_ut
 = 
	`Æloc_ªty≥
(&ây_ã°_¥o˚ss.
ùc_buf„r
, 
£L4_ARM_SmÆlPageObje˘
,

329 
£L4_PageBôs
);

330 i‡(
ây_ã°_¥o˚ss
.
ùc_buf„r_ut
 =
NULL
) {

331 
	`ZF_LOGE
("FailedÅoálloc ipc buffer ut");

332  
Ál£
;

338 
£L4_CPå
 
u£r_ï
 = 
	`c•a˚_Æloc_¶Ÿ
(&
ây_ã°_¥o˚ss
.
c•a˚
);

339 i‡(
u£r_ï
 =
£L4_C≠NuŒ
) {

340 
	`ZF_LOGE
("FailedÅoálloc userÉp slot");

341  
Ál£
;

345 
îr
 = 
	`c•a˚_möt
(&
ây_ã°_¥o˚ss
.
c•a˚
, 
u£r_ï
, &c•a˚, 
ï
, 
£L4_AŒRights
, 
TTY_EP_BADGE
);

346 i‡(
îr
) {

347 
	`ZF_LOGE
("FailedÅo mint userÉp");

348  
Ál£
;

352 
ây_ã°_¥o˚ss
.
tcb_ut
 = 
	`Æloc_ªty≥
(&ây_ã°_¥o˚ss.
tcb
, 
£L4_TCBObje˘
, 
£L4_TCBBôs
);

353 i‡(
ây_ã°_¥o˚ss
.
tcb_ut
 =
NULL
) {

354 
	`ZF_LOGE
("FailedÅoállocÅcb ut");

355  
Ál£
;

359 
îr
 = 
	`£L4_TCB_C⁄figuª
(
ây_ã°_¥o˚ss
.
tcb
, 
u£r_ï
,

360 
ây_ã°_¥o˚ss
.
c•a˚
.
roŸ_˙ode
, 
£L4_NûD©a
,

361 
ây_ã°_¥o˚ss
.
v•a˚
, 
£L4_NûD©a
, 
PROCESS_IPC_BUFFER
,

362 
ây_ã°_¥o˚ss
.
ùc_buf„r
);

363 i‡(
îr
 !
£L4_NoEº‹
) {

364 
	`ZF_LOGE
("UnableÅo configureÇew TCB");

365  
Ál£
;

369 
îr
 = 
	`£L4_TCB_SëPri‹ôy
(
ây_ã°_¥o˚ss
.
tcb
, 
£L4_C≠InôThªadTCB
, 
TTY_PRIORITY
);

370 i‡(
îr
 !
£L4_NoEº‹
) {

371 
	`ZF_LOGE
("UnableÅo setÖriority ofÇew TCB");

372  
Ál£
;

376 
	`NAME_THREAD
(
ây_ã°_¥o˚ss
.
tcb
, 
≠p_«me
);

379 
	`ZF_LOGI
–"\nSèπög \"%s\"...\n", 
≠p_«me
);

380 
ñf_size
;

381 * 
ñf_ba£
 = 
	`˝io_gë_fûe
(
_˝io_¨chive
, 
≠p_«me
, &
ñf_size
);

382 i‡(
ñf_ba£
 =
NULL
) {

383 
	`ZF_LOGE
("U«bÀÅÿloˇã cpiÿhódî f‹ %s", 
≠p_«me
);

384  
Ál£
;

388 
£L4_W‹d
 
•
 = 
	`öô_¥o˚ss_°ack
(&
c•a˚
, 
£L4_C≠InôThªadVS∑˚
, 
ñf_ba£
);

391 
îr
 = 
	`ñf_lﬂd
(&
c•a˚
, 
£L4_C≠InôThªadVS∑˚
, 
ây_ã°_¥o˚ss
.
v•a˚
, 
ñf_ba£
);

392 i‡(
îr
) {

393 
	`ZF_LOGE
("FailedÅoÜoadÉlf image");

394  
Ál£
;

398 
îr
 = 
	`m≠_‰ame
(&
c•a˚
, 
ây_ã°_¥o˚ss
.
ùc_buf„r
,Åty_ã°_¥o˚ss.
v•a˚
, 
PROCESS_IPC_BUFFER
,

399 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

400 i‡(
îr
 != 0) {

401 
	`ZF_LOGE
("UnableÅo map IPC buffer for userápp");

402  
Ál£
;

406 
£L4_U£rC⁄ãxt
 
c⁄ãxt
 = {

407 .
pc
 = 
	`ñf_gëE¡ryPoöt
(
ñf_ba£
),

408 .
•
 = sp,

410 
	`¥ötf
("SèπögÅtyã°áà%p\n", (*Ë
c⁄ãxt
.
pc
);

411 
îr
 = 
	`£L4_TCB_WrôeRegi°îs
(
ây_ã°_¥o˚ss
.
tcb
, 1, 0, 2, &
c⁄ãxt
);

412 
	`ZF_LOGE_IF
(
îr
, "FailedÅo writeÑegisters");

413  
îr
 =
£L4_NoEº‹
;

414 
	}
}

420 
	$sos_ùc_öô
(
£L4_CPå
* 
ùc_ï
, seL4_CPå* 
¡‚
)

423 
ut_t
 *
ut
 = 
	`Æloc_ªty≥
(
¡‚
, 
£L4_NŸifiˇti⁄Obje˘
, 
£L4_NŸifiˇti⁄Bôs
);

424 
	`ZF_LOGF_IF
(!
ut
, "No memory forÇotification object");

427 
£L4_Eº‹
 
îr
 = 
	`£L4_TCB_BödNŸifiˇti⁄
(
£L4_C≠InôThªadTCB
, *
¡‚
);

428 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo bindÇotification objectÅo TCB");

431 
ut
 = 
	`Æloc_ªty≥
(
ùc_ï
, 
£L4_EndpoötObje˘
, 
£L4_EndpoötBôs
);

432 
	`ZF_LOGF_IF
(!
ut
, "No memory forÉndpoint");

433 
	}
}

435 
ölöe
 
£L4_CPå
 
	$badge_úq_ï
(
£L4_CPå
 
ï
, 
£L4_W‹d
 
badge
)

438 
£L4_CPå
 
badged_ˇp
 = 
	`c•a˚_Æloc_¶Ÿ
(&
c•a˚
);

439 
	`ZF_LOGF_IF
(
badged_ˇp
 =
£L4_C≠NuŒ
, "FailedÅoállocate slot");

442 
£L4_Eº‹
 
îr
 = 
	`c•a˚_möt
(&
c•a˚
, 
badged_ˇp
, &c•a˚, 
ï
, 
£L4_AŒRights
, 
badge
 | 
IRQ_EP_BADGE
);

443 
	`ZF_LOGE_IFERR
(
îr
, "FailedÅo mint cap");

446  
badged_ˇp
;

447 
	}
}

450 
£L4_CPå
 
	$gë_£L4_C≠InôThªadTCB
()

452  
£L4_C≠InôThªadTCB
;

453 
	}
}

456 
	$öô_mu¶c
()

458 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_£t_tid_addªss
, 
sys_£t_tid_addªss
);

459 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_wrôev
, 
sys_wrôev
);

460 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_exô
, 
sys_exô
);

461 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_π_sig¥ocmask
, 
sys_π_sig¥ocmask
);

462 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gëtid
, 
sys_gëtid
);

463 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gëpid
, 
sys_gëpid
);

464 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_tgkûl
, 
sys_tgkûl
);

465 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_tkûl
, 
sys_tkûl
);

466 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_exô_group
, 
sys_exô_group
);

467 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_io˘l
, 
sys_io˘l
);

468 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_mm≠
, 
sys_mm≠
);

469 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_brk
, 
sys_brk
);

470 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_˛ock_gëtime
, 
sys_˛ock_gëtime
);

471 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_«no¶ìp
, 
sys_«no¶ìp
);

472 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gëuid
, 
sys_gëuid
);

473 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gëgid
, 
sys_gëgid
);

474 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_›í©
, 
sys_›í©
);

475 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_˛o£
, 
sys_˛o£
);

476 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_sockë
, 
sys_sockë
);

477 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_böd
, 
sys_böd
);

478 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_li°í
, 
sys_li°í
);

479 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_c⁄√˘
, 
sys_c⁄√˘
);

480 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_ac˚±
, 
sys_ac˚±
);

481 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_£ndto
, 
sys_£ndto
);

482 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_ªcv‰om
, 
sys_ªcv‰om
);

483 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_ªadv
, 
sys_ªadv
);

484 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gësock«me
, 
sys_gësock«me
);

485 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gë≥î«me
, 
sys_gë≥î«me
);

486 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_f˙é
, 
sys_f˙é
);

487 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_£tsock›t
, 
sys_£tsock›t
);

488 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_gësock›t
, 
sys_gësock›t
);

489 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_µﬁl
, 
sys_µﬁl
);

490 
	`mu¶csys_ö°Æl_sysˇŒ
(
__NR_madvi£
, 
sys_madvi£
);

491 
	}
}

493 
NORETURN
 *
	$maö_c⁄töued
(
UNUSED
 *
¨g
)

496 
£L4_CPå
 
ùc_ï
, 
¡‚
;

497 
	`sos_ùc_öô
(&
ùc_ï
, &
¡‚
);

500 
	`run_ã°s
(&
c•a˚
);

503 
	`¥ötf
("Network init\n");

504 
	`√tw‹k_öô
(&
c•a˚
, 
	`badge_úq_ï
(
¡‚
, 
IRQ_BADGE_NETWORK
));

507 
	`¥ötf
("Start firstÖrocess\n");

508 
boﬁ
 
suc˚ss
 = 
	`°¨t_fú°_¥o˚ss
(
TTY_NAME
, 
ùc_ï
);

509 
	`ZF_LOGF_IF
(!
suc˚ss
, "FailedÅo start firstÖrocess");

511 
	`¥ötf
("\nSOSÉntering syscallÜoop\n");

512 
	`sysˇŒ_lo›
(
ùc_ï
);

513 
	}
}

517 
	$maö
()

519 
	`öô_mu¶c
();

522 *
bi_°rög
 = 
	`gëív
("bootinfo");

523 
	`ZF_LOGF_IF
(!
bi_°rög
, "CouldÇotÖarse bootinfo fromÉnv.");

527 
	`__ªgi°î_‰ame
(&
__eh_‰ame_°¨t
);

529 
£L4_BoŸInfo
 *
boŸ_öfo
;

530 i‡(
	`ssˇnf
(
bi_°rög
, "%p", &
boŸ_öfo
) != 1) {

531 
	`ZF_LOGF
("boŸöfÿívú⁄míàvÆuê'%s' wa†nŸ vÆid.", 
bi_°rög
);

534 
	`debug_¥öt_boŸöfo
(
boŸ_öfo
);

536 
	`¥ötf
("\nSOS Starting...\n");

538 
	`NAME_THREAD
(
£L4_C≠InôThªadTCB
, "SOS:root");

541 
	`sos_boŸ°øp
(&
c•a˚
, 
boŸ_öfo
);

548 
	`u¨t_öô
(&
c•a˚
);

549 
	`upd©e_vputch¨
(
u¨t_putch¨
);

552 
	`¥ötf
("SOS Started!\n");

556 
£L4_W‹d
 
vaddr
 = 
SOS_STACK
;

557 
i
 = 0; i < 
SOS_STACK_PAGES
; i++) {

558 
£L4_CPå
 
‰ame_ˇp
;

559 
ut_t
 *
‰ame
 = 
	`Æloc_ªty≥
(&
‰ame_ˇp
, 
£L4_ARM_SmÆlPageObje˘
, 
£L4_PageBôs
);

560 
	`ZF_LOGF_IF
(
‰ame
 =
NULL
, "FailedÅoállocate stackÖage");

561 
£L4_Eº‹
 
îr
 = 
	`m≠_‰ame
(&
c•a˚
, 
‰ame_ˇp
, 
£L4_C≠InôThªadVS∑˚
,

562 
vaddr
, 
£L4_AŒRights
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

563 
	`ZF_LOGF_IFERR
(
îr
, "FailedÅo map stack");

564 
vaddr
 +
PAGE_SIZE_4K
;

567 
	`utûs_run_⁄_°ack
((*Ë
vaddr
, 
maö_c⁄töued
, 
NULL
);

569 
	`UNREACHABLE
();

570 
	}
}

	@sos/src/mapping.c

12 
	~<£l4/£l4.h
>

13 
	~<£l4/£l4_¨ch/m≠pög.h
>

15 
	~"m≠pög.h
"

16 
	~"ut.h
"

17 
	~"vmem_œyout.h
"

27 
£L4_Eº‹
 
	$ªty≥_m≠_±
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
v•a˚
, 
£L4_W‹d
 
vaddr
, seL4_CPå 
ut
, seL4_CPå 
em±y
)

30 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut
, 
em±y
, 
£L4_ARM_PageTabÀObje˘
, 
£L4_PageBôs
);

31 i‡(
îr
) {

32  
îr
;

35  
	`£L4_ARM_PageTabÀ_M≠
(
em±y
, 
v•a˚
, 
vaddr
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

36 
	}
}

46 
£L4_Eº‹
 
	$ªty≥_m≠_pd
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
v•a˚
, 
£L4_W‹d
 
vaddr
, seL4_CPå 
ut
, seL4_CPå 
em±y
)

49 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut
, 
em±y
, 
£L4_ARM_PageDúe˘‹yObje˘
, 
£L4_PageBôs
);

50 i‡(
îr
) {

51  
îr
;

54  
	`£L4_ARM_PageDúe˘‹y_M≠
(
em±y
, 
v•a˚
, 
vaddr
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

55 
	}
}

65 
£L4_Eº‹
 
	$ªty≥_m≠_pud
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
v•a˚
, 
£L4_W‹d
 
vaddr
, seL4_CPå 
ut
,

66 
£L4_CPå
 
em±y
)

69 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut
, 
em±y
, 
£L4_ARM_PageUµîDúe˘‹yObje˘
, 
£L4_PageBôs
);

70 i‡(
îr
) {

71  
îr
;

73  
	`£L4_ARM_PageUµîDúe˘‹y_M≠
(
em±y
, 
v•a˚
, 
vaddr
, 
£L4_ARM_DeÁu…_VMAâribuãs
);

74 
	}
}

76 
£L4_Eº‹
 
	$m≠_‰ame_im∂
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
‰ame_ˇp
, seL4_CPå 
v•a˚
, 
£L4_W‹d
 
vaddr
,

77 
£L4_C≠Rights_t
 
rights
, 
£L4_ARM_VMAâribuãs
 
©å
,

78 
£L4_CPå
 *
‰ì_¶Ÿs
, 
£L4_W‹d
 *
u£d
)

81 
£L4_Eº‹
 
îr
 = 
	`£L4_ARM_Page_M≠
(
‰ame_ˇp
, 
v•a˚
, 
vaddr
, 
rights
, 
©å
);

82 
size_t
 
i
 = 0; i < 
MAPPING_SLOTS
 && 
îr
 =
£L4_FaûedLookup
; i++) {

84 
£L4_W‹d
 
Áûed
 = 
	`£L4_M≠pögFaûedLookupLevñ
();

87 
ut_t
 *
ut
 = 
	`ut_Æloc_4k_u¡y≥d
(
NULL
);

88 i‡(
ut
 =
NULL
) {

89 
	`ZF_LOGE
("Out of 4k untyped");

94 
£L4_CPå
 
¶Ÿ
;

95 i‡(
u£d
 !
NULL
) {

96 
¶Ÿ
 = 
‰ì_¶Ÿs
[
i
];

97 *
u£d
 |
	`BIT
(
i
);

99 
¶Ÿ
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

102 i‡(
¶Ÿ
 =
£L4_C≠NuŒ
) {

103 
	`ZF_LOGE
("No cptrÅoállocÖaging structure");

107 
Áûed
) {

108 
SEL4_MAPPING_LOOKUP_NO_PT
:

109 
îr
 = 
	`ªty≥_m≠_±
(
c•a˚
, 
v•a˚
, 
vaddr
, 
ut
->
ˇp
, 
¶Ÿ
);

111 
SEL4_MAPPING_LOOKUP_NO_PD
:

112 
îr
 = 
	`ªty≥_m≠_pd
(
c•a˚
, 
v•a˚
, 
vaddr
, 
ut
->
ˇp
, 
¶Ÿ
);

115 
SEL4_MAPPING_LOOKUP_NO_PUD
:

116 
îr
 = 
	`ªty≥_m≠_pud
(
c•a˚
, 
v•a˚
, 
vaddr
, 
ut
->
ˇp
, 
¶Ÿ
);

120 i‡(!
îr
) {

122 
îr
 = 
	`£L4_ARM_Page_M≠
(
‰ame_ˇp
, 
v•a˚
, 
vaddr
, 
rights
, 
©å
);

126  
îr
;

127 
	}
}

129 
£L4_Eº‹
 
	$m≠_‰ame_c•a˚
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
‰ame_ˇp
, seL4_CPå 
v•a˚
, 
£L4_W‹d
 
vaddr
,

130 
£L4_C≠Rights_t
 
rights
, 
£L4_ARM_VMAâribuãs
 
©å
,

131 
£L4_CPå
 
‰ì_¶Ÿs
[
MAPPING_SLOTS
], 
£L4_W‹d
 *
u£d
)

133 i‡(
c•a˚
 =
NULL
) {

134 
	`ZF_LOGE
("Invalidárguments");

137  
	`m≠_‰ame_im∂
(
c•a˚
, 
‰ame_ˇp
, 
v•a˚
, 
vaddr
, 
rights
, 
©å
, 
‰ì_¶Ÿs
, 
u£d
);

138 
	}
}

140 
£L4_Eº‹
 
	$m≠_‰ame
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
‰ame_ˇp
, seL4_CPå 
v•a˚
, 
£L4_W‹d
 
vaddr
,

141 
£L4_C≠Rights_t
 
rights
, 
£L4_ARM_VMAâribuãs
 
©å
)

143  
	`m≠_‰ame_im∂
(
c•a˚
, 
‰ame_ˇp
, 
v•a˚
, 
vaddr
, 
rights
, 
©å
, 
NULL
, NULL);

144 
	}
}

147 
uöçå_t
 
	gdevi˚_vút
 = 
SOS_DEVICE_START
;

149 *
	$sos_m≠_devi˚
(
c•a˚_t
 *
c•a˚
, 
uöçå_t
 
addr
, 
size_t
 
size
)

151 
	`as£π
(
c•a˚
 !
NULL
);

152 *
v°¨t
 = (*Ë
devi˚_vút
;

154 
uöçå_t
 
cuº
 = 
addr
; cuº < (add∏+ 
size
); cuº +
PAGE_SIZE_4K
) {

155 
ut_t
 *
ut
 = 
	`ut_Æloc_4k_devi˚
(
cuº
);

156 i‡(
ut
 =
NULL
) {

157 
	`ZF_LOGE
("FaûedÅÿföd uàf‹Öhy†addªs†%p", (*Ë
cuº
);

158  
NULL
;

162 
£L4_CPå
 
‰ame
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

163 i‡(
‰ame
 =
£L4_C≠NuŒ
) {

164 
	`ZF_LOGE
("Out of caps");

165  
NULL
;

169 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
ut
->
ˇp
, 
‰ame
, 
£L4_ARM_SmÆlPageObje˘
,

170 
£L4_PageBôs
);

171 i‡(
îr
 !
£L4_NoEº‹
) {

172 
	`ZF_LOGE
("FaûedÅÿªty≥ %lx", 
ut
->
ˇp
);

173 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
‰ame
);

174  
NULL
;

178 
îr
 = 
	`m≠_‰ame
(
c•a˚
, 
‰ame
, 
£L4_C≠InôThªadVS∑˚
, 
devi˚_vút
, 
£L4_AŒRights
, 
Ál£
);

179 i‡(
îr
 !
£L4_NoEº‹
) {

180 
	`ZF_LOGE
("FaûedÅÿm≠ devi˚ fømê© %p", (*Ë
devi˚_vút
);

181 
	`c•a˚_dñëe
(
c•a˚
, 
‰ame
);

182 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
‰ame
);

183  
NULL
;

186 
devi˚_vút
 +
PAGE_SIZE_4K
;

189  
v°¨t
;

190 
	}
}

	@sos/src/mapping.h

12 #¥agm®
⁄˚


14 
	~<°dboﬁ.h
>

15 
	~<£l4/£l4.h
>

16 
	~<c•a˚/c•a˚.h
>

45 
£L4_Eº‹
 
m≠_‰ame_c•a˚
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
‰ame_ˇp
, seL4_CPå 
v•a˚
, 
£L4_W‹d
 
vaddr
,

46 
£L4_C≠Rights_t
 
rights
, 
£L4_ARM_VMAâribuãs
 
©å
,

47 
£L4_CPå
 
‰ì_¶Ÿs
[
MAPPING_SLOTS
], 
£L4_W‹d
 *
u£d
);

69 
£L4_Eº‹
 
m≠_‰ame
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
‰ame_ˇp
, seL4_CPå 
v•a˚
, 
£L4_W‹d
 
vaddr
, 
£L4_C≠Rights_t
 
rights
,

70 
£L4_ARM_VMAâribuãs
 
©å
);

80 *
sos_m≠_devi˚
(
c•a˚_t
 *
c•a˚
, 
uöçå_t
 
addr
, 
size_t
 
size
);

	@sos/src/network.c

12 
	~"√tw‹k.h
"

14 
	~<autoc⁄f.h
>

15 
	~<as£π.h
>

16 
	~<f˙é.h
>

17 
	~<°rög.h
>

18 
	~<°dio.h
>

19 
	~<pﬁl.h
>

21 
	~<c•a˚/c•a˚.h
>

22 
	~<˛ock/time°amp.h
>

24 #unde‡
PACKED


25 
	~<pico_°ack.h
>

26 
	~<pico_devi˚.h
>

27 
	~<pico_c⁄fig.h
>

28 
	~<pico_ùv4.h
>

29 
	~<pico_sockë.h
>

30 
	~<pico_«t.h
>

31 
	~<pico_icmp4.h
>

32 
	~<pico_dns_˛õ¡.h
>

33 
	~<pico_dev_lo›.h
>

34 
	~<pico_dh˝_˛õ¡.h
>

35 
	~<pico_dh˝_£rvî.h
>

36 
	~<pico_ùfûãr.h
>

37 
	~"pico_bsd_sockës.h
"

39 
	~<ëhî√t/ëhî√t.h
>

41 
	~<nfsc/libnfs.h
>

43 
	~"vmem_œyout.h
"

44 
	~"dma.h
"

45 
	~"m≠pög.h
"

46 
	~"ut.h
"

49 #i‚de‡
SOS_NFS_DIR


50 #ifde‡
CONFIG_SOS_NFS_DIR


51 
	#SOS_NFS_DIR
 
CONFIG_SOS_NFS_DIR


	)

53 
	#SOS_NFS_DIR
 ""

	)

57 
	#NETWORK_IRQ
 (40)

	)

60 c⁄° 
uöt8_t
 
	gOUR_MAC
[6] = {0x00,0x1e,0x06,0x36,0x05,0xe5};

62 
pico_devi˚
 
	gpico_dev
;

63 
nfs_c⁄ãxt
 *
	gnfs
 = 
NULL
;

64 
£L4_CPå
 
	gúq_h™dÀr
;

65 
nfs_mou¡_cb
(
°©us
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
, *
¥iv©e_d©a
);

67 
	$pico_ëh_£nd
(
UNUSED
 
pico_devi˚
 *
dev
, *
öput_buf
, 
Àn
)

69 i‡(
	`ëhif_£nd
(
öput_buf
, 
Àn
Ë!
ETHIF_NOERROR
) {

75  
Àn
;

76 
	}
}

78 
	$pico_ëh_pﬁl
(
UNUSED
 
pico_devi˚
 *
dev
, 
lo›_sc‹e
)

80 
lo›_sc‹e
 > 0) {

81 
Àn
;

82 
ªtvÆ
 = 
	`ëhif_ªcv
(&
Àn
);

84 if(
ªtvÆ
 =
ETHIF_ERROR
 || 
Àn
 == 0) {

87 
lo›_sc‹e
--;

91  
lo›_sc‹e
;

92 
	}
}

95 
	$øw_ªcv_ˇŒback
(
uöt8_t
 *
ö_∑ckë
, 
Àn
)

99 
	`pico_°ack_ªcv
(&
pico_dev
, 
ö_∑ckë
, 
Àn
);

100 
	}
}

103 
ëhif_dma_addr_t
 
	$ëhif_dma_mÆloc
(
uöt32_t
 
size
, uöt32_à
Æign
)

105 
dma_addr_t
 
addr
 = 
	`sos_dma_mÆloc
(
size
, 
Æign
);

106 
ëhif_dma_addr_t
 
óddr
 =

107 { .
∑ddr
 = 
addr
.∑ddr, .
vaddr
 =áddr.vaddr, .
size
 = size };

108 
	`ZF_LOGD
("ethif_dma_malloc -> vaddr: %lx,Öaddr: %lx\n, sz: %lx",

109 
óddr
.
vaddr
,Éaddr.
∑ddr
,Éaddr.
size
);

110  
óddr
;

111 
	}
}

113 
	$nf¶ib_pﬁl
()

115 
pﬁlfd
 
pfd
 = {

116 .
fd
 = 
	`nfs_gë_fd
(
nfs
),

117 .
evíts
 = 
	`nfs_which_evíts
(
nfs
)

121 
pﬁl_ªt
 = 
	`pﬁl
(&
pfd
, 1, 0);

123 
	`ZF_LOGF_IF
(
pﬁl_ªt
 < 0, "poll() failed");

125 i‡(
pﬁl_ªt
 == 0) {

131 i‡(
	`nfs_£rvi˚
(
nfs
, 
pfd
.
ªvíts
) < 0) {

132 
	`¥ötf
("nfs_service failed\n");

134 
	}
}

136 
	$√tw‹k_tick
() {

137 
	`pico_bsd_°ack_tick
();

138 
	`nf¶ib_pﬁl
();

139 
	}
}

141 
	$√tw‹k_úq
() {

142 
	`ëhif_úq
();

143 
	`£L4_IRQH™dÀr_Ack
(
úq_h™dÀr
);

145 
	`√tw‹k_tick
();

146 
	}
}

148 
	$√tw‹k_öô
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
¡‚
)

150 
	`ZF_LOGI
("\nInitialisingÇetwork...\n\n");

153 
úq_h™dÀr
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

154 
	`ZF_LOGF_IF
(
úq_h™dÀr
 =
£L4_C≠NuŒ
, "FailedÅoálloc slot for irq handler!");

155 
£L4_Eº‹
 
îr‹
 = 
	`c•a˚_úq_c⁄åﬁ_gë
(
c•a˚
, 
úq_h™dÀr
, 
£L4_C≠IRQC⁄åﬁ
,

156 
NETWORK_IRQ
, 1);

157 
	`ZF_LOGF_IF
(
îr‹
, "FailedÅo getÇetwork irq handler");

158 
îr‹
 = 
	`£L4_IRQH™dÀr_SëNŸifiˇti⁄
(
úq_h™dÀr
, 
¡‚
);

159 
	`ZF_LOGF_IF
(
îr‹
, "FailedÅo set irq handlerÇtfn");

160 
	`£L4_IRQH™dÀr_Ack
(
úq_h™dÀr
);

166 
uöt64_t
 
ëh_ba£_vaddr
 =

167 (
uöt64_t
)
	`sos_m≠_devi˚
(
c•a˚
, 
ODROIDC2_ETH_PHYS_ADDR
, 
ODROIDC2_ETH_PHYS_SIZE
);

170 
ëhif_dma_›s_t
 
ëhif_dma_›s
;

171 
ëhif_dma_›s
.
dma_mÆloc
 = &
ëhif_dma_mÆloc
;

172 
ëhif_dma_›s
.
dma_phys_to_vút
 = &
sos_dma_phys_to_vút
;

173 
ëhif_dma_›s
.
Êush_dˇche_ønge
 = &
sos_dma_ˇche_˛ón_övÆid©e
;

174 
ëhif_dma_›s
.
övÆid©e_dˇche_ønge
 = &
sos_dma_ˇche_övÆid©e
;

177 
îr‹
 = 
	`ëhif_öô
(
ëh_ba£_vaddr
, 
OUR_MAC
, &
ëhif_dma_›s
, &
øw_ªcv_ˇŒback
);

178 
	`ZF_LOGF_IF
(
îr‹
 != 0, "FailedÅo initialiseÉthernet interface");

181 
pico_ù4
 
√tmask
;

182 
pico_ù4
 
ùaddr
;

183 
pico_ù4
 
g©eway
;

184 
pico_ù4
 
zîo
;

186 
	`pico_bsd_öô
();

187 
	`pico_°ack_öô
();

189 
	`mem£t
(&
pico_dev
, 0, (
pico_devi˚
));

191 
pico_dev
.
£nd
 = 
pico_ëh_£nd
;

192 
pico_dev
.
pﬁl
 = 
pico_ëh_pﬁl
;

194 
pico_dev
.
mtu
 = 
MAXIMUM_TRANSFER_UNIT
;

196 
îr‹
 = 
	`pico_devi˚_öô
(&
pico_dev
, "so†picŸ˝", 
OUR_MAC
);

197 
	`ZF_LOGF_IF
(
îr‹
, "FailedÅo initÖicotcp");

199 
	`pico_°rög_to_ùv4
(
CONFIG_SOS_GATEWAY
, &
g©eway
.
addr
);

200 
	`pico_°rög_to_ùv4
(
CONFIG_SOS_NETMASK
, &
√tmask
.
addr
);

201 
	`pico_°rög_to_ùv4
(
CONFIG_SOS_IP
, &
ùaddr
.
addr
);

202 
	`pico_°rög_to_ùv4
("0.0.0.0", &
zîo
.
addr
);

204 
	`pico_ùv4_lök_add
(&
pico_dev
, 
ùaddr
, 
√tmask
);

205 
	`pico_ùv4_rouã_add
(
zîo
, zîo, 
g©eway
, 1, 
NULL
);

207 
nfs
 = 
	`nfs_öô_c⁄ãxt
();

208 
	`ZF_LOGF_IF
(
nfs
 =
NULL
, "FailedÅo init NFS context");

210 
	`nfs_£t_debug
(
nfs
, 10);

211 
ªt
 = 
	`nfs_mou¡_async
(
nfs
, 
CONFIG_SOS_GATEWAY
, 
SOS_NFS_DIR
, 
nfs_mou¡_cb
, 
NULL
);

212 
	`ZF_LOGF_IF
(
ªt
 !0, "NFS Mou¡ faûed: %s", 
	`nfs_gë_îr‹
(
nfs
));

213 
	}
}

215 
	$nfs_mou¡_cb
(
°©us
, 
UNUSED
 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

216 
UNUSED
 *
¥iv©e_d©a
)

218 i‡(
°©us
 < 0) {

219 
	`ZF_LOGF
("mou¡/m¡ cÆ»Áûed wôh \"%s\"\n", (*)
d©a
);

222 
	`¥ötf
("Mou¡edÇf†dú %s\n", 
SOS_NFS_DIR
);

223 
	}
}

	@sos/src/network.h

12 #¥agm®
⁄˚


14 
	~<£l4/ty≥s.h
>

15 
	~<c•a˚/c•a˚.h
>

23 
√tw‹k_öô
(
c•a˚_t
 *
c•a˚
, 
£L4_CPå
 
¡‚
);

30 
√tw‹k_tick
();

35 
√tw‹k_úq
();

	@sos/src/sys/backtrace.c

22 
	~<dlf˙.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~"unwöd.h
"

28 
	såa˚_¨g


30 **
	m¨øy
;

31 
_Unwöd_W‹d
 
	mcÁ
;

32 
	m˙t
;

33 
	msize
;

36 #ifde‡
SHARED


37 
	$_Unwöd_Rós⁄_Code
 (*
unwöd_backåa˚
Ë(
_Unwöd_Tø˚_Fn
, *);

38 
	$_Unwöd_På
 (*
unwöd_gëù
Ë(
_Unwöd_C⁄ãxt
 *);

39 
	$_Unwöd_W‹d
 (*
unwöd_gëcÁ
Ë(
_Unwöd_C⁄ãxt
 *);

40 *
libgcc_h™dÀ
;

44 
_Unwöd_W‹d


45 
	`dummy_gëcÁ
 (
_Unwöd_C⁄ãxt
 *
˘x
 
	`__©åibuã__
 ((
unu£d
)))

48 
	}
}

52 
	$öô
 ()

54 
libgcc_h™dÀ
 = 
	`__libc_dl›í
 ("libgcc_s.so.1");

56 i‡(
libgcc_h™dÀ
 =
NULL
)

59 
unwöd_backåa˚
 = 
	`__libc_dlsym
 (
libgcc_h™dÀ
, "_Unwind_Backtrace");

60 
unwöd_gëù
 = 
	`__libc_dlsym
 (
libgcc_h™dÀ
, "_Unwind_GetIP");

61 i‡(
unwöd_gëù
 =
NULL
)

62 
unwöd_backåa˚
 = 
NULL
;

63 
unwöd_gëcÁ
 = (
	`__libc_dlsym
 (
libgcc_h™dÀ
, "_Unwind_GetCFA")

64 ?: 
dummy_gëcÁ
);

65 
	}
}

67 
	#unwöd_backåa˚
 
_Unwöd_Backåa˚


	)

68 
	#unwöd_gëù
 
_Unwöd_GëIP


	)

69 
	#unwöd_gëcÁ
 
_Unwöd_GëCFA


	)

72 
_Unwöd_Rós⁄_Code


73 
	$backåa˚_hñ≥r
 (
_Unwöd_C⁄ãxt
 *
˘x
, *
a
)

75 
åa˚_¨g
 *
¨g
 = 
a
;

79 i‡(
¨g
->
˙t
 != -1)

81 
¨g
->
¨øy
[¨g->
˙t
] = (*Ë
	`unwöd_gëù
 (
˘x
);

84 
_Unwöd_W‹d
 
cÁ
 = 
	`unwöd_gëcÁ
 (
˘x
);

86 i‡(
¨g
->
˙t
 > 0 &&árg->
¨øy
[arg->cnt - 1] ==árg->array[arg->cnt]

87 && 
cÁ
 =
¨g
->cfa)

88  
_URC_END_OF_STACK
;

89 
¨g
->
cÁ
 = cfa;

91 i‡(++
¨g
->
˙t
 =¨g->
size
)

92  
_URC_END_OF_STACK
;

93  
_URC_NO_REASON
;

94 
	}
}

97 
	$backåa˚
 (
¨øy
, 
size
)

98 **
¨øy
;

99 
size
;

101 
åa˚_¨g
 
¨g
 = { .
¨øy
 =áºay, .
cÁ
 = 0, .
size
 = size, .
˙t
 = -1 };

102 #ifde‡
SHARED


103 
	`__libc_⁄˚_deföe
 (, 
⁄˚
);

105 
	`__libc_⁄˚
 (
⁄˚
, 
öô
);

106 i‡(
unwöd_backåa˚
 =
NULL
)

110 i‡(
size
 >= 1)

111 
	`unwöd_backåa˚
 (
backåa˚_hñ≥r
, &
¨g
);

115 i‡(
¨g
.
˙t
 > 1 &&árg.
¨øy
[¨g.˙à- 1] =
NULL
)

116 --
¨g
.
˙t
;

117  
¨g
.
˙t
 != -1 ?árg.cnt : 0;

118 
	}
}

123 #ifde‡
SHARED


125 
	$libc_‰ìªs_‚
 (
‰ì_mem
)

127 
unwöd_backåa˚
 = 
NULL
;

128 i‡(
libgcc_h™dÀ
 !
NULL
)

130 
	`__libc_dl˛o£
 (
libgcc_h™dÀ
);

131 
libgcc_h™dÀ
 = 
NULL
;

133 
	}
}

	@sos/src/sys/execinfo.h

12 #i‚de‡
_EXECINFO_H


13 
	#_EXECINFO_H


	)

16 
backåa˚
 (**
__¨øy
, 
__size
);

	@sos/src/sys/exit.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<£l4/£l4.h
>

15 
	~<utûs/utû.h
>

17 
	$sos_ab‹t
()

19 
	`¥ötf
("SOSáborted\n");

20 
	`¥ötf
("To getá stackÅrace, callÖrint_backtrace() from sos/src/execinfo.h\n");

21 
	`¥ötf
("atÅheÜocation ofÅhe cause ofÅheábort.\n");

22 
	`¥ötf
("AndÖasteÅheÑesultingáddresses into backtrace.py\n");

24 
	`£L4_Yõld
();

27 
	}
}

30 
	$sys_exô
(
UNUSED
 
va_li°
 
≠
)

32 
	`ab‹t
();

34 
	}
}

37 
	$sys_π_sig¥ocmask
(
UNUSED
 
va_li°
 
≠
)

39 
	`ZF_LOGV
("Ign‹ög cÆ»tÿ%s\n", 
__FUNCTION__
);

41 
	}
}

44 
	$sys_gëtid
(
UNUSED
 
va_li°
 
≠
)

46 
	`ZF_LOGV
("Ign‹ög cÆ»tÿ%s\n", 
__FUNCTION__
);

48 
	}
}

51 
	$sys_gëpid
(
UNUSED
 
va_li°
 
≠
)

53 
	`ZF_LOGV
("Ign‹ög cÆ»tÿ%s\n", 
__FUNCTION__
);

55 
	}
}

58 
	$sys_tgkûl
(
UNUSED
 
va_li°
 
≠
)

60 
	`ZF_LOGV
("%†assumög sñ‡kûl\n", 
__FUNCTION__
);

61 
	`sos_ab‹t
();

63 
	}
}

65 
	$sys_tkûl
(
UNUSED
 
va_li°
 
≠
)

67 
	`ZF_LOGV
("%†assumög sñ‡kûl\n", 
__FUNCTION__
);

68 
	`sos_ab‹t
();

70 
	}
}

73 
	$sys_exô_group
(
UNUSED
 
va_li°
 
≠
)

75 
	`ZF_LOGV
("Ign‹ög cÆ»tÿ%s", 
__FUNCTION__
);

77 
	}
}

	@sos/src/sys/morecore.c

12 
	~<autoc⁄f.h
>

13 
	~<°dio.h
>

14 
	~<°döt.h
>

15 
	~<°d¨g.h
>

16 
	~<sys/mm™.h
>

17 
	~<î∫o.h
>

18 
	~<as£π.h
>

19 
	~<utûs/utû.h
>

27 
	#MORECORE_AREA_BYTE_SIZE
 0x100000

	)

28 
	gm‹ec‹e_¨ó
[
MORECORE_AREA_BYTE_SIZE
];

31 
uöçå_t
 
	gm‹ec‹e_ba£
 = (uöçå_tË&
m‹ec‹e_¨ó
;

32 
uöçå_t
 
	gm‹ec‹e_t›
 = (uöçå_tË&
m‹ec‹e_¨ó
[
MORECORE_AREA_BYTE_SIZE
];

38 
	$sys_brk
(
va_li°
 
≠
)

40 
uöçå_t
 
ªt
;

41 
uöçå_t
 
√wbrk
 = 
	`va_¨g
(
≠
, uintptr_t);

44 i‡(!
√wbrk
) {

45 
ªt
 = 
m‹ec‹e_ba£
;

46 } i‡(
√wbrk
 < 
m‹ec‹e_t›
 &&Çewbrk > (
uöçå_t
)&
m‹ec‹e_¨ó
[0]) {

47 
ªt
 = 
m‹ec‹e_ba£
 = 
√wbrk
;

49 
ªt
 = 0;

52  
ªt
;

53 
	}
}

58 
	$sys_mm≠
(
va_li°
 
≠
)

60 
UNUSED
 *
addr
 = 
	`va_¨g
(
≠
, *);

61 
size_t
 
Àngth
 = 
	`va_¨g
(
≠
, size_t);

62 
UNUSED
 
¥Ÿ
 = 
	`va_¨g
(
≠
, );

63 
Êags
 = 
	`va_¨g
(
≠
, );

64 
UNUSED
 
fd
 = 
	`va_¨g
(
≠
, );

65 
UNUSED
 
off_t
 
off£t
 = 
	`va_¨g
(
≠
, off_t);

67 i‡(
Êags
 & 
MAP_ANONYMOUS
) {

69 i‡(
Àngth
 > 
m‹ec‹e_t›
 - 
m‹ec‹e_ba£
) {

70  -
ENOMEM
;

73 
m‹ec‹e_t›
 -
Àngth
;

74  
m‹ec‹e_t›
;

76 
	`ZF_LOGF
("not implemented");

77  -
ENOMEM
;

78 
	}
}

80 
	$sys_madvi£
(
UNUSED
 
va_li°
 
≠
) {

82 
	}
}

	@sos/src/sys/stdio.c

12 
	~<autoc⁄f.h
>

13 
	~<as£π.h
>

14 
	~<î∫o.h
>

15 
	~<f˙é.h
>

16 
	~<limôs.h
>

17 
	~<°d¨g.h
>

18 
	~<°rög.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<utûs/utû.h
>

24 
	~<£l4/£l4.h
>

26 
	~<sys/ªsour˚.h
>

27 
	~<sys/mm™.h
>

28 
	~<sys/uio.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sockë.h
>

32 
	~<sys/sysˇŒ.h
>

34 #unde‡
PACKED


35 
	~<pico_bsd_sockës.h
>

37 
	~"../drivîs/u¨t.h
"

38 
	~"../sysˇŒs.h
"

40 
	#STDOUT_FD
 1

	)

41 
	#STDERR_FD
 2

	)

42 
	#PICO_FD_START
 3

	)

44 
	$debug_put_ch¨
(
UNUSED
 
c
)

46 #i‡
CONFIG_DEBUG_BUILD


47 
	`£L4_DebugPutCh¨
(
c
);

49 
	}
}

51 
vputch¨_t
 
	gvputch¨
 = 
debug_put_ch¨
;

53 
size_t
 
	$ouçut
(*
d©a
, 
size_t
 
cou¡
)

55 *
ªÆd©a
 = 
d©a
;

56 
size_t
 
i
;

57 
i
 = 0; i < 
cou¡
; i++) {

58 
	`vputch¨
(
ªÆd©a
[
i
]);

60  
i
;

61 
	}
}

63 
	$upd©e_vputch¨
(
vputch¨_t
 
v
)

65 
vputch¨
 = 
v
;

66 
	}
}

68 
	$sys_wrôev
(
va_li°
 
≠
)

70 
fûdes
 = 
	`va_¨g
(
≠
, );

71 
iovec
 *
iov
 = 
	`va_¨g
(
≠
, iovec *);

72 
iov˙t
 = 
	`va_¨g
(
≠
, );

74 
sum
 = 0;

75 
ssize_t
 
ªt
 = 0;

78 i‡(
iov˙t
 <0 || iov˙à> 
IOV_MAX
) {

79  -
EINVAL
;

84 
i
 = 0; i < 
iov˙t
; i++) {

85 
sum
 +()
iov
[
i
].
iov_Àn
;

86 i‡(
sum
 > 
SSIZE_MAX
) {

87  -
EINVAL
;

92 i‡(!
sum
) {

97 i‡(
fûdes
 =
STDOUT_FD
 || fûde†=
STDERR_FD
) {

98 
i
 = 0; i < 
iov˙t
; i++) {

99 
ªt
 +
	`ouçut
(
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

101 } i‡(
fûdes
 >
PICO_FD_START
) {

102 
i
 = 0; i < 
iov˙t
; i++) {

103 
ªs
 = 
	`pico_wrôe
(
fûdes
 - 
PICO_FD_START
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

104 i‡(
ªs
 == -1) {

105  -
î∫o
;

107 
ªt
 +
ªs
;

112  
ªt
;

113 
	}
}

115 
	$sys_ªad
(
va_li°
 
≠
)

117 
fd
 = 
	`va_¨g
(
≠
, );

118 *
buf
 = 
	`va_¨g
(
≠
, *);

119 
size_t
 
cou¡
 = 
	`va_¨g
(
≠
, size_t);

121 
iovec
 
iov
 = {.
iov_ba£
 = 
buf
, .
iov_Àn
 = 
cou¡
 };

122  
	`ªadv
(
fd
, &
iov
, 1);

123 
	}
}

125 
	$sys_io˘l
(
va_li°
 
≠
)

127 
fd
 = 
	`va_¨g
(
≠
, );

128 
UNUSED
 
ªque°
 = 
	`va_¨g
(
≠
, );

131 i‡(
fd
 =
STDOUT_FD
) {

135 
	`ZF_LOGF
("io ctlÇot implemented");

137 
	}
}

139 
	$sys_gëuid
(
UNUSED
 
va_li°
 
≠
)

142 
	}
}

144 
	$sys_gëgid
(
UNUSED
 
va_li°
 
≠
)

147 
	}
}

149 
	$sys_›í©
(
UNUSED
 
va_li°
 
≠
)

151  
ENOSYS
;

152 
	}
}

154 
	$sys_sockë
(
va_li°
 
≠
)

156 
domaö
 = 
	`va_¨g
(
≠
, );

157 
ty≥
 = 
	`va_¨g
(
≠
, );

158 
¥Ÿocﬁ
 = 
	`va_¨g
(
≠
, );

161 
√w_sd
 = 
	`pico_√wsockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

162 i‡(
√w_sd
 < 0) {

163 
	`ZF_LOGE
("ÁûedÅÿ¸óãÇewÖicÿsockë %d", 
î∫o
);

164  -
î∫o
;

166 
√w_sd
 +
PICO_FD_START
;

167  
√w_sd
;

168 
	}
}

170 
	$sys_böd
(
va_li°
 
≠
)

172 
sd
 = 
	`va_¨g
(
≠
, );

173 
sockaddr
 *
loˇl_addr
 = 
	`va_¨g
(
≠
, sockaddr *);

174 
sockÀn_t
 
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t);

176 i‡(
sd
 >
PICO_FD_START
) {

177 
ªt
 = 
	`pico_böd
(
sd
 - 
PICO_FD_START
, 
loˇl_addr
, 
sockÀn
);

178  
ªt
 =0 ? 0 : -
î∫o
;

180  -
EINVAL
;

181 
	}
}

183 
	$sys_li°í
(
va_li°
 
≠
) {

184 
sd
 = 
	`va_¨g
(
≠
, );

185 
backlog
 = 
	`va_¨g
(
≠
, );

187 i‡(
sd
 >
PICO_FD_START
) {

188 
ªt
 = 
	`pico_li°í
(
sd
 - 
PICO_FD_START
, 
backlog
);

189  
ªt
 =0 ? 0 : -
î∫o
;

192  -
EINVAL
;

193 
	}
}

195 
	$sys_c⁄√˘
(
va_li°
 
≠
)

197 
sd
 = 
	`va_¨g
(
≠
, );

198 c⁄° 
sockaddr
 *
_ßddr
 = 
	`va_¨g
(
≠
, const sockaddr *);

199 
sockÀn_t
 
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t);

201 i‡(
sd
 >
PICO_FD_START
) {

202 
îr
 = 
	`pico_c⁄√˘
(
sd
 - 
PICO_FD_START
, 
_ßddr
, 
sockÀn
);

203  
îr
 =0 ?Éº : -
î∫o
;

205  -
EINVAL
;

206 
	}
}

208 
	$sys_ac˚±
(
va_li°
 
≠
)

210 
sd
 = 
	`va_¨g
(
≠
, );

211 
sockaddr
 *
_‹ig
 = 
	`va_¨g
(
≠
, sockaddr *);

212 
sockÀn_t
 *
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t *);

214 i‡(
sd
 >
PICO_FD_START
) {

215 
ªt
 = 
	`pico_ac˚±
(
sd
 - 
PICO_FD_START
, 
_‹ig
, 
sockÀn
);

216  
ªt
 =0 ? 0 : -
î∫o
;

218  -
EINVAL
;

219 
	}
}

221 
	$sys_£ndto
(
va_li°
 
≠
)

223 
sd
 = 
	`va_¨g
(
≠
, );

224 *
buf
 = 
	`va_¨g
(
≠
, *);

225 
Àn
 = 
	`va_¨g
(
≠
, );

226 
Êags
 = 
	`va_¨g
(
≠
, );

227 
sockaddr
 *
_d°
 = 
	`va_¨g
(
≠
, sockaddr *);

228 
sockÀn_t
 
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t);

230 i‡(
sd
 >
PICO_FD_START
) {

231 
ªt
 = 
	`pico_£ndto
(
sd
 - 
PICO_FD_START
, 
buf
, 
Àn
, 
Êags
, 
_d°
, 
sockÀn
);

232 i‡(
ªt
 == 0) {

238  -
EWOULDBLOCK
;

240  
ªt
 < 0 ? -
î∫o
 :Ñet;

242  -
EINVAL
;

243 
	}
}

245 
	$sys_ªcv‰om
(
va_li°
 
≠
)

247 
sd
 = 
	`va_¨g
(
≠
, );

248 *
buf
 = 
	`va_¨g
(
≠
, *);

249 
Àn
 = 
	`va_¨g
(
≠
, );

250 
Êags
 = 
	`va_¨g
(
≠
, );

251 
sockaddr
 *
_addr
 = 
	`va_¨g
(
≠
, sockaddr *);

252 
sockÀn_t
 *
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t *);

254 i‡(
sd
 >
PICO_FD_START
) {

255 
ªt
 = 
	`pico_ªcv‰om
(
sd
 - 
PICO_FD_START
, 
buf
, 
Àn
, 
Êags
, 
_addr
, 
sockÀn
);

256  
ªt
 >0 ?Ñë : -
î∫o
;

258  -
EINVAL
;

259 
	}
}

261 
	$sys_ªadv
(
va_li°
 
≠
)

263 
fd
 = 
	`va_¨g
(
≠
, );

264 c⁄° 
iovec
 *
iov
 = 
	`va_¨g
(
≠
, const iovec *);

265 
iov˙t
 = 
	`va_¨g
(
≠
, );

267 i‡(
fd
 >
PICO_FD_START
) {

268 
tŸÆ
 = 0;

269 
i
 = 0; i < 
iov˙t
; i++) {

270 
ªt
 = 
	`pico_ªad
(
fd
 - 
PICO_FD_START
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
);

271 i‡(
ªt
 == -1) {

274 
tŸÆ
 +
ªt
;

277  
tŸÆ
 =0 ? -
î∫o
 :Åotal;

280  -
EINVAL
;

281 
	}
}

283 
	$sys_˛o£
(
va_li°
 
≠
)

285 
sockfd
 = 
	`va_¨g
(
≠
, );

286 i‡(
sockfd
 >
PICO_FD_START
) {

287 
ªt
 = 
	`pico_˛o£
(
sockfd
 - 
PICO_FD_START
);

288  
ªt
 =0 ? 0 : -
î∫o
;

290  -
EINVAL
;

291 
	}
}

293 
	$sys_gësock«me
(
va_li°
 
≠
)

295 
sd
 = 
	`va_¨g
(
≠
, );

296 
sockaddr
 *
loˇl_addr
 = 
	`va_¨g
(
≠
, sockaddr *);

297 
sockÀn_t
 *
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t *);

299 i‡(
sd
 >
PICO_FD_START
) {

300 
ªt
 = 
	`pico_gësock«me
(
sd
 - 
PICO_FD_START
, 
loˇl_addr
, 
sockÀn
);

301  
ªt
 =0 ? 0 : -
î∫o
;

303  -
EINVAL
;

304 
	}
}

306 
	$sys_gë≥î«me
(
va_li°
 
≠
)

308 
sd
 = 
	`va_¨g
(
≠
, );

309 
sockaddr
 *
ªmŸe_addr
 = 
	`va_¨g
(
≠
, sockaddr *);

310 
sockÀn_t
 *
sockÀn
 = 
	`va_¨g
(
≠
, socklen_t *);

312 i‡(
sd
 >
PICO_FD_START
) {

313 
ªt
 = 
	`pico_gë≥î«me
(
sd
 - 
PICO_FD_START
, 
ªmŸe_addr
, 
sockÀn
);

314  
ªt
 =0 ? 0 : -
î∫o
;

316  -
EINVAL
;

317 
	}
}

319 
	$sys_f˙é
(
va_li°
 
≠
)

321 
sockfd
 = 
	`va_¨g
(
≠
, );

322 
cmd
 = 
	`va_¨g
(
≠
, );

323 
¨g
 = 
	`va_¨g
(
≠
, );

324 i‡(
sockfd
 >
PICO_FD_START
) {

325 
ªt
 = 
	`pico_f˙é
(
sockfd
 - 
PICO_FD_START
, 
cmd
, 
¨g
);

326  
ªt
 =0 ? 0 : -
î∫o
;

328  -
EINVAL
;

329 
	}
}

331 
	$sys_£tsock›t
(
va_li°
 
≠
)

333 
sockfd
 = 
	`va_¨g
(
≠
, );

334 
Àvñ
 = 
	`va_¨g
(
≠
, );

335 
›äame
 = 
	`va_¨g
(
≠
, );

336 c⁄° *
›tvÆ
 = 
	`va_¨g
(
≠
, *);

337 
sockÀn_t
 
›éí
 = 
	`va_¨g
(
≠
, socklen_t);

339 i‡(
sockfd
 >
PICO_FD_START
) {

340 
ªt
 = 
	`pico_£tsock›t
(
sockfd
 - 
PICO_FD_START
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

341  
ªt
 =0 ? 0 : -
î∫o
;

343  -
EINVAL
;

344 
	}
}

346 
	$sys_gësock›t
(
va_li°
 
≠
)

348 
sockfd
 = 
	`va_¨g
(
≠
, );

349 
Àvñ
 = 
	`va_¨g
(
≠
, );

350 
›äame
 = 
	`va_¨g
(
≠
, );

351 *
›tvÆ
 = 
	`va_¨g
(
≠
, *);

352 
sockÀn_t
 *
›éí
 = 
	`va_¨g
(
≠
, socklen_t *);

354 i‡(
sockfd
 >
PICO_FD_START
) {

355 
ªt
 = 
	`pico_gësock›t
(
sockfd
 - 
PICO_FD_START
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

356  
ªt
 =0 ? 0 : -
î∫o
;

358  -
EINVAL
;

359 
	}
}

361 
	$sys_µﬁl
(
va_li°
 
≠
)

363 
pﬁlfd
 *
pfd
 = 
	`va_¨g
(
≠
, pollfd *);

364 
nfds_t
 
≈fd
 = 
	`va_¨g
(
≠
,Çfds_t);

365 
time•ec
 *
tmo_p
 = 
	`va_¨g
(
≠
, timespec *);

367 i‡(
≈fd
 > 
RLIMIT_NOFILE
) {

368  -
EINVAL
;

371 
nfds_t
 
i
 = 0; i < 
≈fd
; i++) {

372 i‡(
pfd
[
i
].
fd
 >
PICO_FD_START
) {

373 
pfd
[
i
].
fd
 -
PICO_FD_START
;

375  -
EINVAL
;

380 
ªt
 = 
	`pico_µﬁl
(
pfd
, 
≈fd
, 
tmo_p
, 
NULL
);

382 
nfds_t
 
i
 = 0; i < 
≈fd
; i++) {

383 
pfd
[
i
].
fd
 +
PICO_FD_START
;

386  
ªt
 >0 ?Ñë : -
î∫o
;

387 
	}
}

	@sos/src/sys/thread.c

12 
	~<°dio.h
>

13 
	~<bôs/î∫o.h
>

14 
	~<utûs/utû.h
>

16 
	$sys_£t_tid_addªss
(
UNUSED
 
va_li°
 
≠
)

18  -
ENOSYS
;

19 
	}
}

	@sos/src/sys/time.c

12 
	~<î∫o.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°d¨g.h
>

16 
	~<time.h
>

17 
	~<˛ock/time°amp.h
>

18 
	~<£l4/£l4.h
>

19 
	~<utûs/utû.h
>

21 
uöt64_t
 
	g‰eq
 = 0;

23 
	$sys_«no¶ìp
(
va_li°
 
≠
)

25 i‡(
	`u∆ikñy
(
‰eq
 == 0)) {

26 
‰eq
 = 
	`time°amp_gë_‰eq
();

29 
time•ec
 *
ªq
 = 
	`va_¨g
(
≠
, timespec*);

34 
uöt64_t
 
us
 = 
ªq
->
tv_£c
 * 
US_IN_S
;

35 
us
 +
ªq
->
tv_n£c
 / 
NS_IN_US
;

37 
uöt64_t
 
°¨t
 = 
	`time°amp_us
(
‰eq
);

38 
	`time°amp_us
(
‰eq
Ë- 
°¨t
 < 
us
) {

39 
	`£L4_Yõld
();

43 
	}
}

45 
	$sys_˛ock_gëtime
(
va_li°
 
≠
)

47 i‡(
	`u∆ikñy
(
‰eq
 == 0)) {

48 
‰eq
 = 
	`time°amp_gë_‰eq
();

51 
˛ockid_t
 
˛k_id
 = 
	`va_¨g
(
≠
, clockid_t);

52 
time•ec
 *
ªs
 = 
	`va_¨g
(
≠
, timespec*);

53 i‡(
˛k_id
 !
CLOCK_REALTIME
) {

54  -
EINVAL
;

56 
uöt64_t
 
mi¸os
 = 
	`time°amp_us
(
‰eq
);

57 
ªs
->
tv_£c
 = 
mi¸os
 / 
US_IN_S
;

58 
ªs
->
tv_n£c
 = (
mi¸os
 % 
US_IN_S
Ë* 
NS_IN_US
;

60 
	}
}

	@sos/src/sys/unwind.h

29 #i‚de‡
_UNWIND_H


30 
	#_UNWIND_H


	)

32 #i‡
deföed
 (
__SEH__
Ë&& !deföed (
__USING_SJLJ_EXCEPTIONS__
)

34 
	~<wödows.h
>

37 #i‚de‡
HIDE_EXPORTS


38 #¥agm®
GCC
 
visibûôy
 
push
()

41 #ifde‡
__˝lu•lus


49 
	t_Unwöd_W‹d
 
	t__©åibuã__
((
	t__mode__
(
	t__unwöd_w‹d__
)));

50 sig√d 
	t_Unwöd_Sw‹d
 
	t__©åibuã__
((
	t__mode__
(
	t__unwöd_w‹d__
)));

51 #i‡
deföed
(
__ü64__
Ë&& deföed(
__hpux__
)

52 
	t_Unwöd_På
 
	t__©åibuã__
((
	t__mode__
(
	t__w‹d__
)));

54 
	t_Unwöd_På
 
	t__©åibuã__
((
	t__mode__
(
	t__poöãr__
)));

56 
	t_Unwöd_I¡î«l_På
 
	t__©åibuã__
((
	t__mode__
(
	t__poöãr__
)));

62 
	t_Unwöd_Ex˚±i⁄_Cœss
 
	t__©åibuã__
((
	t__mode__
(
	t__DI__
)));

68 
_URC_NO_REASON
 = 0,

69 
_URC_FOREIGN_EXCEPTION_CAUGHT
 = 1,

70 
_URC_FATAL_PHASE2_ERROR
 = 2,

71 
_URC_FATAL_PHASE1_ERROR
 = 3,

72 
_URC_NORMAL_STOP
 = 4,

73 
_URC_END_OF_STACK
 = 5,

74 
_URC_HANDLER_FOUND
 = 6,

75 
_URC_INSTALL_CONTEXT
 = 7,

76 
_URC_CONTINUE_UNWIND
 = 8

77 } 
	t_Unwöd_Rós⁄_Code
;

86 
_Unwöd_Ex˚±i⁄
;

88 (*
_Unwöd_Ex˚±i⁄_CÀ™up_Fn
Ë(
	t_Unwöd_Rós⁄_Code
,

89 
	t_Unwöd_Ex˚±i⁄
 *);

91 
	s_Unwöd_Ex˚±i⁄


93 
_Unwöd_Ex˚±i⁄_Cœss
 
ex˚±i⁄_˛ass
;

94 
_Unwöd_Ex˚±i⁄_CÀ™up_Fn
 
ex˚±i⁄_˛ónup
;

96 #i‡!
deföed
 (
__USING_SJLJ_EXCEPTIONS__
Ë&& deföed (
__SEH__
)

97 
_Unwöd_W‹d
 
¥iv©e_
[6];

99 
_Unwöd_W‹d
 
¥iv©e_1
;

100 
_Unwöd_W‹d
 
¥iv©e_2
;

106 } 
__©åibuã__
((
__Æig√d__
));

111 
	t_Unwöd_A˘i⁄
;

113 
	#_UA_SEARCH_PHASE
 1

	)

114 
	#_UA_CLEANUP_PHASE
 2

	)

115 
	#_UA_HANDLER_FRAME
 4

	)

116 
	#_UA_FORCE_UNWIND
 8

	)

117 
	#_UA_END_OF_STACK
 16

	)

121 #i‚de‡
LIBGCC2_UNWIND_ATTRIBUTE


122 
	#LIBGCC2_UNWIND_ATTRIBUTE


	)

129 
_Unwöd_C⁄ãxt
;

132 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


133 
_Unwöd_Rai£Ex˚±i⁄
 (
_Unwöd_Ex˚±i⁄
 *);

137 
_Unwöd_Rós⁄_Code
 (*
	t_Unwöd_St›_Fn
)

138 (, 
	t_Unwöd_A˘i⁄
, 
	t_Unwöd_Ex˚±i⁄_Cœss
,

139 
	t_Unwöd_Ex˚±i⁄
 *, 
	t_Unwöd_C⁄ãxt
 *, *);

141 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


142 
_Unwöd_F‹˚dUnwöd
 (
_Unwöd_Ex˚±i⁄
 *, 
_Unwöd_St›_Fn
, *);

145 
_Unwöd_DñëeEx˚±i⁄
 (
_Unwöd_Ex˚±i⁄
 *);

149 
LIBGCC2_UNWIND_ATTRIBUTE


150 
_Unwöd_Resume
 (
_Unwöd_Ex˚±i⁄
 *);

154 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


155 
_Unwöd_Resume_‹_Rëhrow
 (
_Unwöd_Ex˚±i⁄
 *);

160 
_Unwöd_Rós⁄_Code
 (*
	t_Unwöd_Tø˚_Fn
)

161 (
	t_Unwöd_C⁄ãxt
 *, *);

163 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


164 
_Unwöd_Backåa˚
 (
_Unwöd_Tø˚_Fn
, *);

171 
_Unwöd_W‹d
 
_Unwöd_GëGR
 (
_Unwöd_C⁄ãxt
 *, );

172 
_Unwöd_SëGR
 (
_Unwöd_C⁄ãxt
 *, , 
_Unwöd_W‹d
);

174 
_Unwöd_På
 
_Unwöd_GëIP
 (
_Unwöd_C⁄ãxt
 *);

175 
_Unwöd_På
 
_Unwöd_GëIPInfo
 (
_Unwöd_C⁄ãxt
 *, *);

176 
_Unwöd_SëIP
 (
_Unwöd_C⁄ãxt
 *, 
_Unwöd_På
);

179 
_Unwöd_W‹d
 
_Unwöd_GëCFA
 (
_Unwöd_C⁄ãxt
 *);

181 *
_Unwöd_GëL™guageS≥cificD©a
 (
_Unwöd_C⁄ãxt
 *);

183 
_Unwöd_På
 
_Unwöd_GëRegi⁄Sèπ
 (
_Unwöd_C⁄ãxt
 *);

200 
_Unwöd_Rós⁄_Code
 (*
	t_Unwöd_Pîs⁄Æôy_Fn
)

201 (, 
	t_Unwöd_A˘i⁄
, 
	t_Unwöd_Ex˚±i⁄_Cœss
,

202 
	t_Unwöd_Ex˚±i⁄
 *, 
	t_Unwöd_C⁄ãxt
 *);

207 
	gSjLj_Fun˘i⁄_C⁄ãxt
;

208 
_Unwöd_SjLj_Regi°î
 (
SjLj_Fun˘i⁄_C⁄ãxt
 *);

209 
_Unwöd_SjLj_Uƒegi°î
 (
SjLj_Fun˘i⁄_C⁄ãxt
 *);

211 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


212 
_Unwöd_SjLj_Rai£Ex˚±i⁄
 (
_Unwöd_Ex˚±i⁄
 *);

213 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


214 
_Unwöd_SjLj_F‹˚dUnwöd
 (
_Unwöd_Ex˚±i⁄
 *, 
_Unwöd_St›_Fn
, *);

215 
LIBGCC2_UNWIND_ATTRIBUTE


216 
_Unwöd_SjLj_Resume
 (
_Unwöd_Ex˚±i⁄
 *);

217 
_Unwöd_Rós⁄_Code
 
LIBGCC2_UNWIND_ATTRIBUTE


218 
_Unwöd_SjLj_Resume_‹_Rëhrow
 (
_Unwöd_Ex˚±i⁄
 *);

224 #ifde‡
__ü64__


225 #i‚de‡
öhibô_libc


226 
	~<°dlib.h
>

228 
ölöe
 
_Unwöd_På


229 
_Unwöd_GëD©aRñBa£
 (
_Unwöd_C⁄ãxt
 *
_C
)

232  
_Unwöd_GëGR
 (
_C
, 1);

235 
ölöe
 
_Unwöd_På


236 
_Unwöd_GëTextRñBa£
 (
_Unwöd_C⁄ãxt
 *
_C
 
__©åibuã__
 ((
__unu£d__
)))

238 
ab‹t
 ();

243 
_Unwöd_W‹d
 
_Unwöd_GëBSP
 (
_Unwöd_C⁄ãxt
 *);

246 
_Unwöd_På
 
_Unwöd_GëD©aRñBa£
 (
_Unwöd_C⁄ãxt
 *);

247 
_Unwöd_På
 
_Unwöd_GëTextRñBa£
 (
_Unwöd_C⁄ãxt
 *);

252 * 
_Unwöd_FödEn˛osögFun˘i⁄
 (*
pc
);

254 #i‚de‡
__SIZEOF_LONG__


258 #i‚de‡
__SIZEOF_POINTER__


271 #i‡
__SIZEOF_LONG__
 >
__SIZEOF_POINTER__


272 
	t_¶eb128_t
;

273 
	t_uÀb128_t
;

274 #ñi‡
__SIZEOF_LONG_LONG__
 >
__SIZEOF_POINTER__


275 
	t_¶eb128_t
;

276 
	t_uÀb128_t
;

281 #i‡
deföed
 (
__SEH__
Ë&& !deföed (
__USING_SJLJ_EXCEPTIONS__
)

283 
EXCEPTION_DISPOSITION
 
_GCC_•ecific_h™dÀr
 (
PEXCEPTION_RECORD
, *,

284 
PCONTEXT
, 
PDISPATCHER_CONTEXT
,

285 
_Unwöd_Pîs⁄Æôy_Fn
);

288 #ifde‡
__˝lu•lus


292 #i‚de‡
HIDE_EXPORTS


293 #¥agm®
GCC
 
visibûôy
 
p›


	@sos/src/syscalls.h

12 #¥agm®
⁄˚


14 
	~<°d¨g.h
>

16 (*
	tvputch¨_t
)(
	tc
);

17 
	`upd©e_vputch¨
(
vputch¨_t
 
vputch¨
);

20 
	`sys_£t_tid_addªss
(
va_li°
 
≠
);

21 
	`sys_exô
(
va_li°
 
≠
);

22 
	`sys_π_sig¥ocmask
(
va_li°
 
≠
);

23 
	`sys_gëtid
(
va_li°
 
≠
);

24 
	`sys_gëpid
(
va_li°
 
≠
);

25 
	`sys_tgkûl
(
va_li°
 
≠
);

26 
	`sys_tkûl
(
va_li°
 
≠
);

27 
	`sys_exô_group
(
va_li°
 
≠
);

28 
	`sys_io˘l
(
va_li°
 
≠
);

29 
	`sys_brk
(
va_li°
 
≠
);

30 
	`sys_mm≠2
(
va_li°
 
≠
);

31 
	`sys_mm≠
(
va_li°
 
≠
);

32 
	`sys_wrôev
(
va_li°
 
≠
);

33 
	`sys_«no¶ìp
(
va_li°
 
≠
);

34 
	`sys_˛ock_gëtime
(
va_li°
 
≠
);

35 
	`sys_gëuid
(
va_li°
 
≠
);

36 
	`sys_gëgid
(
va_li°
 
≠
);

37 
	`sys_˛o£
(
va_li°
 
≠
);

38 
	`sys_›í©
(
va_li°
 
≠
);

39 
	`sys_sockë
(
va_li°
 
≠
);

40 
	`sys_böd
(
va_li°
 
≠
);

41 
	`sys_li°í
(
va_li°
 
≠
);

42 
	`sys_c⁄√˘
(
va_li°
 
≠
);

43 
	`sys_ac˚±
(
va_li°
 
≠
);

44 
	`sys_£ndto
(
va_li°
 
≠
);

45 
	`sys_ªcv‰om
(
va_li°
 
≠
);

46 
	`sys_ªadv
(
va_li°
 
≠
);

47 
	`sys_gësock«me
(
va_li°
 
≠
);

48 
	`sys_gë≥î«me
(
va_li°
 
≠
);

49 
	`sys_f˙é
(
va_li°
 
≠
);

50 
	`sys_£tsock›t
(
va_li°
 
≠
);

51 
	`sys_gësock›t
(
va_li°
 
≠
);

52 
	`sys_µﬁl
(
va_li°
 
≠
);

53 
	`sys_madvi£
(
UNUSED
 
va_li°
 
≠
);

	@sos/src/tests.c

12 
	#ZF_LOG_LEVEL
 
ZF_LOG_INFO


	)

13 
	~<c•a˚/c•a˚.h
>

14 
	~"dma.h
"

15 
	~"boŸ°øp.h
"

17 
	$ã°_bf_bô
(
bô
)

19 
	`ZF_LOGV
("%lu", 
bô
);

20 
£L4_W‹d
 
bôfõld
[2] = {0};

21 
	`as£π
(
	`bf_fú°_‰ì
(2, 
bôfõld
) == 0);

23 
	`bf_£t_bô
(
bôfõld
, 
bô
);

24 
	`as£π
(
	`bf_gë_bô
(
bôfõld
, 
bô
));

25 
£L4_W‹d
 
ff
 = 
bô
 == 0 ? 1 : 0;

26 
	`as£π
(
	`bf_fú°_‰ì
(2, 
bôfõld
Ë=
ff
);

28 
	`bf_˛r_bô
(
bôfõld
, 
bô
);

29 
	`as£π
(!
	`bf_gë_bô
(
bôfõld
, 
bô
));

30 
	}
}

32 
	$ã°_bf
()

34 
	`ã°_bf_bô
(0);

36 
	`ã°_bf_bô
(1);

37 
	`ã°_bf_bô
(63);

38 
	`ã°_bf_bô
(64);

39 
	`ã°_bf_bô
(65);

40 
	`ã°_bf_bô
(127);

42 
£L4_W‹d
 
bôfõld
[2] = {0};

43 
i
 = 0; i < 127; i++) {

44 
	`as£π
(
	`bf_gë_bô
(
bôfõld
, 
i
) == 0);

45 
	`bf_£t_bô
(
bôfõld
, 
i
);

46 
	`as£π
(
	`bf_gë_bô
(
bôfõld
, 
i
));

47 
	`as£π
(
	`bf_fú°_‰ì
(2, 
bôfõld
Ë=
i
+1);

49 
	}
}

51 
	$ã°_c•a˚
(
c•a˚_t
 *
c•a˚
)

53 
	`ZF_LOGI
("Test cspace");

55 
	`ZF_LOGV
("Testállocating cslot");

56 
£L4_CPå
 
˝å
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

57 
	`as£π
(
˝å
 != 0);

59 
	`ZF_LOGV
("Test freeing cslot");

61 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
˝å
);

63 
	`ZF_LOGV
("Test free slot isÑeturned");

65 
£L4_CPå
 
˝å_√w
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

66 
	`as£π
(
˝å
 =
˝å_√w
);

68 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
˝å_√w
);

71 
n¶Ÿs
 = 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
) / 2;

72 i‡(
c•a˚
->
two_Àvñ
) {

73 
n¶Ÿs
 = 
	`MIN
(
	`CNODE_SLOTS
(
c•a˚
->
t›_lvl_size_bôs
Ë* CNODE_SLOTS(
CNODE_SIZE_BITS
) - 4,

74 
	`CNODE_SLOTS
(
CNODE_SIZE_BITS
Ë* 
BOT_LVL_PER_NODE
 + 1);

76 
£L4_CPå
 *
¶Ÿs
 = 
	`mÆloc
((£L4_CPåË* 
n¶Ÿs
);

77 
	`as£π
(
¶Ÿs
 !
NULL
);

79 
	`ZF_LOGV
("Te°áŒoˇtögánd fªeög %d slŸs", 
n¶Ÿs
);

81 
i
 = 0; i < 
n¶Ÿs
; i++) {

82 
¶Ÿs
[
i
] = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

83 
	`as£π
(
i
 =0 || 
¶Ÿs
[i-1] == slots[i] - 1);

84 
	`as£π
(
¶Ÿs
[
i
] !
£L4_C≠NuŒ
);

87 
	`ZF_LOGV
("AŒoˇãd %lu <-> %lu slŸs\n", 
¶Ÿs
[0], slŸs[
n¶Ÿs
 - 1]);

89 
i
 = 0; i < 
n¶Ÿs
; i++) {

90 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
¶Ÿs
[
i
]);

93 
	`‰ì
(
¶Ÿs
);

94 
	}
}

96 
	$ã°_dma
()

98 
dma_addr_t
 
dma
 = 
	`sos_dma_mÆloc
(
PAGE_SIZE_4K
, PAGE_SIZE_4K);

99 *
bœh
 = (*Ë
dma
.
vaddr
;

100 
size_t
 
i
 = 0; i < 
PAGE_SIZE_4K
; i++) {

101 
bœh
[
i
] = 'a' + i % 25;

104 
size_t
 
i
 = 0; i < 
PAGE_SIZE_4K
; i++) {

105 
	`as£π
(
bœh
[
i
] == 'a' + i % 25);

107 
	}
}

109 
	$run_ã°s
(
c•a˚_t
 *
c•a˚
)

112 
	`ã°_bf
();

115 
	`ã°_c•a˚
(
c•a˚
);

116 
	`ZF_LOGI
("Root CSpaceÅestÖassed!");

119 
c•a˚_t
 
dummy_c•a˚
;

120 
îr‹
 = 
	`c•a˚_¸óã_⁄e_Àvñ
(
c•a˚
, &
dummy_c•a˚
);

121 
	`as£π
(
îr‹
 == 0);

122 
	`ã°_c•a˚
(&
dummy_c•a˚
);

123 
	`c•a˚_de°roy
(&
dummy_c•a˚
);

124 
	`ZF_LOGI
("SingleÜevel cspaceÅestÖassed!");

127 
c•a˚_Æloc_t
 
c•a˚_Æloc
 = {

128 .
m≠_‰ame
 = 
boŸ°øp_c•a˚_m≠_‰ame
,

129 .
Æloc_4k_ut
 = 
boŸ°øp_c•a˚_Æloc_4k_ut
,

130 .
‰ì_4k_ut
 = 
boŸ°øp_c•a˚_‰ì_4k_ut
,

131 .
cookõ
 = 
NULL


133 
îr‹
 = 
	`c•a˚_¸óã_two_Àvñ
(
c•a˚
, &
dummy_c•a˚
, 
c•a˚_Æloc
);

134 
	`as£π
(
îr‹
 == 0);

135 
	`ã°_c•a˚
(&
dummy_c•a˚
);

136 
	`c•a˚_de°roy
(&
dummy_c•a˚
);

137 
	`ZF_LOGI
("DoubleÜevel cspaceÅestÖassed!");

140 
	`ã°_dma
();

141 
	`ZF_LOGI
("DMAÅestÖassed!");

142 
	}
}

	@sos/src/tests.h

12 #¥agm®
⁄˚


14 
run_ã°s
(
c•a˚_t
 *
c•a˚
);

	@sos/src/ut.c

12 
	~"ut.h
"

13 
	~"boŸ°øp.h
"

15 
	~<c•a˚/c•a˚.h
>

16 
	~<°dlib.h
>

17 
	~<as£π.h
>

19 
	#SIZE_BITS_TO_INDEX
(
x
Ë(x - 
£L4_EndpoötBôs
)

	)

22 
ut_èbÀ_t
 
	gèbÀ
;

24 
	$push
(
ut_t
 **
hód
, ut_à*
√w
)

26 
√w
->
√xt
 = (
uöçå_t
Ë*
hód
;

27 *
hód
 = 
√w
;

28 
	}
}

30 
ut_t
 *
	$p›
(
ut_t
 **
hód
)

32 
ut_t
 *
p›≥d
 = *
hód
;

33 *
hód
 = (
ut_t
 *Ë(
uöçå_t
Ë(*hód)->
√xt
;

34  
p›≥d
;

35 
	}
}

37 
ölöe
 
£L4_W‹d
 
	$ut_to_∑ddr
(
ut_t
 *
ut
)

39  (
ut
 - 
èbÀ
.
u¡y≥ds
Ë* 
PAGE_SIZE_4K
 +ÅabÀ.
fú°_∑ddr
;

40 
	}
}

42 
ölöe
 
ut_t
 *
	$∑ddr_to_ut
(
£L4_W‹d
 
∑ddr
)

44  &
èbÀ
.
u¡y≥ds
[(
∑ddr
 -ÅabÀ.
fú°_∑ddr
Ë/ 
PAGE_SIZE_4K
];

45 
	}
}

47 
size_t
 
	$ut_∑ges_f‹_ªgi⁄
(
ut_ªgi⁄_t
 
ªgi⁄
)

50  
	`BYTES_TO_4K_PAGES
((
ªgi⁄
.
íd
 -Ñegi⁄.
°¨t
Ë/ 
PAGE_SIZE_4K
 * (
ut_t
));

51 
	}
}

53 
	$ut_öô
(*
mem‹y
, 
ut_ªgi⁄_t
 
ªgi⁄
)

56 
èbÀ
.
u¡y≥ds
 = 
mem‹y
;

57 
	`mem£t
(
èbÀ
.
‰ì_u¡y≥ds
, 0, 
	`ARRAY_SIZE
—abÀ.‰ì_u¡y≥dsË* (
ut_t
 *));

58 
èbÀ
.
fú°_∑ddr
 = 
ªgi⁄
.
°¨t
;

59 
	}
}

61 
size_t
 
	$ut_size
()

63  
èbÀ
.
n_4k_u¡y≥d
 * 
PAGE_SIZE_4K
;

64 
	}
}

66 
	$ut_add_u¡y≥d_ønge
(
£L4_W‹d
 
∑ddr
, 
£L4_CPå
 
ˇp
, 
size_t
 
n
, 
boﬁ
 
devi˚
)

68 
ut_t
 **
li°
 = &
èbÀ
.
‰ì_u¡y≥ds
[
	`SIZE_BITS_TO_INDEX
(
£L4_PageBôs
)];

69 
size_t
 
i
 = 0; i < 
n
; i++) {

70 
ut_t
 *
node
 = 
	`∑ddr_to_ut
(
∑ddr
 + (
i
 * 
PAGE_SIZE_4K
));

71 
node
->
ˇp
 = cap;

72 
node
->
vÆid
 = 1;

73 
ˇp
++;

74 i‡(!
devi˚
) {

75 
	`push
(
li°
, 
node
);

76 
èbÀ
.
n_4k_u¡y≥d
++;

79 
	}
}

81 
ut_t
 *
	$ut_Æloc_4k_u¡y≥d
(
uöçå_t
 *
∑ddr
)

83 
ut_t
 **
li°
 = &
èbÀ
.
‰ì_u¡y≥ds
[
	`SIZE_BITS_TO_INDEX
(
£L4_PageBôs
)];

84 i‡(*
li°
 =
NULL
) {

85 
	`ZF_LOGE
("out of memory");

86  
NULL
;

89 
ut_t
 *
n
 = 
	`p›
(
li°
);

90 i‡(
∑ddr
) {

91 *
∑ddr
 = 
	`ut_to_∑ddr
(
n
);

93 
	`ZF_LOGD
("AŒoˇãd %lx, c≠ %lx", 
	`ut_to_∑ddr
(
n
),Ç->
ˇp
);

94  
n
;

95 
	}
}

98 
boﬁ
 
	$ísuª_√w_°ru˘uªs
(
c•a˚_t
 *
c•a˚
)

100 i‡(
èbÀ
.
‰ì_°ru˘uªs
 =
NULL
 ||ÅabÀ.‰ì_°ru˘uªs->
√xt
 == 0) {

102 
ut_t
 *
‰ame
 = 
	`ut_Æloc_4k_u¡y≥d
(
NULL
);

103 i‡(
‰ame
 =
NULL
) {

105 
	`ZF_LOGE
("No 4K untypeds");

106  
Ál£
;

110 
£L4_CPå
 
˝å
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

111 i‡(
˝å
 =
£L4_C≠NuŒ
) {

113 
	`ZF_LOGE
("Cspace full");

114  
Ál£
;

118 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
‰ame
->
ˇp
, 
˝å
, 
£L4_ARM_SmÆlPageObje˘
, 
£L4_PageBôs
);

119 i‡(
îr
) {

120 
	`ZF_LOGE
("Retype failed");

121  
Ál£
;

125 
ut_t
 *
√w_uts
 = 
	`boŸ°øp_m≠_‰ame
(
c•a˚
, 
˝å
);

126 i‡(
√w_uts
 =
NULL
) {

127 
	`ZF_LOGE
("FailedÅo map frame");

128  
Ál£
;

132 
size_t
 
i
 = 0; i < 
PAGE_SIZE_4K
 / (
ut_t
); i++) {

133 
	`push
(&
èbÀ
.
‰ì_°ru˘uªs
, &
√w_uts
[
i
]);

136  
åue
;

138 
	}
}

140 
ut_t
 *
	$ut_Æloc
(
size_t
 
size_bôs
, 
c•a˚_t
 *
c•a˚
)

143 i‡(
size_bôs
 > 
£L4_PageBôs
) {

144 
	`ZF_LOGE
("UTÅable can onlyállocate untypeds <= 4K in size");

145  
NULL
;

148 i‡(
size_bôs
 < 
£L4_EndpoötBôs
) {

149 
	`ZF_LOGE
("UTÅabÀ c™nŸáŒo¯u¡y≥d < %zu i¿size\n", (
size_t
Ë
£L4_EndpoötBôs
);

150  
NULL
;

153 i‡(
size_bôs
 =
£L4_PageBôs
) {

154  
	`ut_Æloc_4k_u¡y≥d
(
NULL
);

157 
ut_t
 **
li°
 = &
èbÀ
.
‰ì_u¡y≥ds
[
	`SIZE_BITS_TO_INDEX
(
size_bôs
)];

158 i‡(*
li°
 =
NULL
) {

160 
ut_t
 *
œrgî
 = 
	`ut_Æloc
(
size_bôs
 + 1, 
c•a˚
);

161 i‡(
œrgî
 =
NULL
) {

162  
NULL
;

166 i‡(!
	`ísuª_√w_°ru˘uªs
(
c•a˚
)) {

167 
	`ut_‰ì
(
œrgî
, 
£L4_PageBôs
);

168  
NULL
;

172 
ut_t
 *
√w1
 = 
	`p›
(&
èbÀ
.
‰ì_°ru˘uªs
);

173 
√w1
->
ˇp
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

174 i‡(
√w1
->
ˇp
 =
£L4_C≠NuŒ
) {

175 
	`ut_‰ì
(
œrgî
, 
£L4_PageBôs
);

176  
NULL
;

178 
ut_t
 *
√w2
 = 
	`p›
(&
èbÀ
.
‰ì_°ru˘uªs
);

179 
√w2
->
ˇp
 = 
	`c•a˚_Æloc_¶Ÿ
(
c•a˚
);

180 i‡(
√w2
->
ˇp
 =
£L4_C≠NuŒ
) {

181 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
√w1
->
ˇp
);

182 
	`ut_‰ì
(
œrgî
, 
£L4_PageBôs
);

183  
NULL
;

186 
£L4_Eº‹
 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
œrgî
->
ˇp
, 
√w1
->ˇp, 
£L4_U¡y≥dObje˘
, 
size_bôs
);

187 i‡(
îr
) {

188 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
√w1
->
ˇp
);

189 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
√w2
->
ˇp
);

190 
	`push
(&
èbÀ
.
‰ì_°ru˘uªs
, 
√w1
);

191 
	`ut_‰ì
(
œrgî
, 
£L4_PageBôs
);

192  
NULL
;

195 
îr
 = 
	`c•a˚_u¡y≥d_ªty≥
(
c•a˚
, 
œrgî
->
ˇp
, 
√w2
->ˇp, 
£L4_U¡y≥dObje˘
, 
size_bôs
);

196 i‡(
îr
) {

197 
	`c•a˚_dñëe
(
c•a˚
, 
√w1
->
ˇp
);

198 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
√w1
->
ˇp
);

199 
	`c•a˚_‰ì_¶Ÿ
(
c•a˚
, 
√w2
->
ˇp
);

200 
	`push
(&
èbÀ
.
‰ì_°ru˘uªs
, 
√w1
);

201 
	`push
(&
èbÀ
.
‰ì_°ru˘uªs
, 
√w2
);

202 
	`ut_‰ì
(
œrgî
, 
£L4_PageBôs
);

203  
NULL
;

206 
	`push
(
li°
, 
√w1
);

207 
	`push
(
li°
, 
√w2
);

211  
	`p›
(
li°
);

212 
	}
}

214 
	$ut_‰ì
(
ut_t
 *
node
, 
size_t
 
size_bôs
)

216 i‡(
size_bôs
 < 
£L4_EndpoötBôs
 || size_bô†> 
£L4_PageBôs
) {

217 
	`ZF_LOGE
("InvÆid sizêbô†%zu", 
size_bôs
);

221 
ut_t
 **
li°
 = &
èbÀ
.
‰ì_u¡y≥ds
[
	`SIZE_BITS_TO_INDEX
(
size_bôs
)];

222 
	`push
(
li°
, 
node
);

223 
	}
}

225 
ut_t
 *
	$ut_Æloc_4k_devi˚
(
uöçå_t
 
∑ddr
)

227 
ut_t
 *
ut
 = 
	`∑ddr_to_ut
(
∑ddr
);

228 i‡(!
ut
->
vÆid
) {

229 
	`ZF_LOGE
("Nÿuàf‹Öadd∏%p", (*Ë
∑ddr
);

230  
NULL
;

232  
ut
;

233 
	}
}

	@sos/src/ut.h

12 #¥agm®
⁄˚


20 
	~<°döt.h
>

21 
	~<°ddef.h
>

22 
	~<£l4/£l4.h
>

23 
	~<utûs/utû.h
>

24 
	~<c•a˚/c•a˚.h
>

28 
£L4_W‹d
 
	m°¨t
;

30 
£L4_W‹d
 
	míd
;

31 } 
	tut_ªgi⁄_t
;

34 
ut
 
	tut_t
;

35 
PACKED
 
	sut
 {

36 
£L4_CPå
 
	mˇp
;

40 
uöçå_t
 
	m√xt
 : 48;

41 
	mvÆid
 : 1;

42 
	munu£d
 : 15;

46 
	#N_UNTYPED_LISTS
 (
£L4_PageBôs
 - 
£L4_EndpoötBôs
 + 1)

	)

51 
£L4_W‹d
 
	mfú°_∑ddr
;

53 
ut_t
 *
	mu¡y≥ds
;

57 
ut_t
 *
	m‰ì_u¡y≥ds
[
N_UNTYPED_LISTS
];

59 
size_t
 
	mn_4k_u¡y≥d
;

63 
ut_t
 *
	m‰ì_°ru˘uªs
;

64 } 
	tut_èbÀ_t
;

67 
size_t
 
ut_∑ges_f‹_ªgi⁄
(
ut_ªgi⁄_t
 
ªgi⁄
);

80 
ut_öô
(*
mem‹y
, 
ut_ªgi⁄_t
 
ªgi⁄
);

89 
size_t
 
ut_size
();

99 
ut_add_u¡y≥d_ønge
(
£L4_W‹d
 
∑ddr
, 
£L4_CPå
 
ˇp
, 
size_t
 
n
, 
boﬁ
 
devi˚
);

112 
ut_t
 *
ut_Æloc_4k_u¡y≥d
(
uöçå_t
 *
∑ddr
);

129 
ut_t
 *
ut_Æloc
(
size_t
 
size_bôs
, 
c•a˚_t
 *
c•a˚_Æloc
);

143 
ut_‰ì
(
ut_t
 *
ut
, 
size_t
 
size_bôs
);

152 
ut_t
 *
ut_Æloc_4k_devi˚
(
uöçå_t
 
∑ddr
);

	@sos/src/vmem_layout.h

12 #¥agm®
⁄˚


18 
	#SOS_DMA_SIZE_BITS
 (
£L4_L¨gePageBôs
)

	)

20 
	#SOS_SCRATCH
 (0xA0000000)

	)

21 
	#SOS_DEVICE_START
 (0xB0000000)

	)

22 
	#SOS_STACK
 (0xC0000000)

	)

23 
	#SOS_STACK_PAGES
 100

	)

24 
	#SOS_ELF_VMEM
 (0xD0000000)

	)

25 
	#SOS_UT_TABLE
 (0x8000000000)

	)

28 
	#PROCESS_STACK_TOP
 (0x90000000)

	)

29 
	#PROCESS_IPC_BUFFER
 (0xA0000000)

	)

30 
	#PROCESS_VMEM_START
 (0xC0000000)

	)

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_bdÊush
 
__NR_bdÊush


	)

20 
	#SYS_böd
 
__NR_böd


	)

21 
	#SYS_bpf
 
__NR_bpf


	)

22 
	#SYS_bªak
 
__NR_bªak


	)

23 
	#SYS_brk
 
__NR_brk


	)

24 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

25 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

26 
	#SYS_chdú
 
__NR_chdú


	)

27 
	#SYS_chmod
 
__NR_chmod


	)

28 
	#SYS_chown
 
__NR_chown


	)

29 
	#SYS_chown32
 
__NR_chown32


	)

30 
	#SYS_chroŸ
 
__NR_chroŸ


	)

31 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

32 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

33 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

34 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

35 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

36 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

37 
	#SYS_˛o£
 
__NR_˛o£


	)

38 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

39 
	#SYS_¸ót
 
__NR_¸ót


	)

40 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

41 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

42 
	#SYS_dup
 
__NR_dup


	)

43 
	#SYS_dup2
 
__NR_dup2


	)

44 
	#SYS_dup3
 
__NR_dup3


	)

45 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

46 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

47 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

48 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

49 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

50 
	#SYS_evítfd
 
__NR_evítfd


	)

51 
	#SYS_evítfd2
 
__NR_evítfd2


	)

52 
	#SYS_execve
 
__NR_execve


	)

53 
	#SYS_execvót
 
__NR_execvót


	)

54 
	#SYS_exô
 
__NR_exô


	)

55 
	#SYS_exô_group
 
__NR_exô_group


	)

56 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

57 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

58 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

59 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

60 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

61 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

62 
	#SYS_fchdú
 
__NR_fchdú


	)

63 
	#SYS_fchmod
 
__NR_fchmod


	)

64 
	#SYS_fchmod©
 
__NR_fchmod©


	)

65 
	#SYS_fchown
 
__NR_fchown


	)

66 
	#SYS_fchown32
 
__NR_fchown32


	)

67 
	#SYS_fchow«t
 
__NR_fchow«t


	)

68 
	#SYS_f˙é
 
__NR_f˙é


	)

69 
	#SYS_f˙é64
 
__NR_f˙é64


	)

70 
	#SYS_fd©async
 
__NR_fd©async


	)

71 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

72 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

73 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

74 
	#SYS_Êock
 
__NR_Êock


	)

75 
	#SYS_f‹k
 
__NR_f‹k


	)

76 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

77 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

78 
	#SYS_f°©
 
__NR_f°©


	)

79 
	#SYS_f°©64
 
__NR_f°©64


	)

80 
	#SYS_f°©©64
 
__NR_f°©©64


	)

81 
	#SYS_f°©fs
 
__NR_f°©fs


	)

82 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

83 
	#SYS_fsync
 
__NR_fsync


	)

84 
	#SYS_·ime
 
__NR_·ime


	)

85 
	#SYS_·runˇã
 
__NR_·runˇã


	)

86 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

87 
	#SYS_fuãx
 
__NR_fuãx


	)

88 
	#SYS_futimeßt
 
__NR_futimeßt


	)

89 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

90 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

91 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

92 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

93 
	#SYS_gë˝u
 
__NR_gë˝u


	)

94 
	#SYS_gëcwd
 
__NR_gëcwd


	)

95 
	#SYS_gëdíts
 
__NR_gëdíts


	)

96 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

97 
	#SYS_gëegid
 
__NR_gëegid


	)

98 
	#SYS_gëegid32
 
__NR_gëegid32


	)

99 
	#SYS_gëeuid
 
__NR_gëeuid


	)

100 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

101 
	#SYS_gëgid
 
__NR_gëgid


	)

102 
	#SYS_gëgid32
 
__NR_gëgid32


	)

103 
	#SYS_gëgroups
 
__NR_gëgroups


	)

104 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

105 
	#SYS_gëôimî
 
__NR_gëôimî


	)

106 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

107 
	#SYS_gëpgid
 
__NR_gëpgid


	)

108 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

109 
	#SYS_gëpid
 
__NR_gëpid


	)

110 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

111 
	#SYS_gëµid
 
__NR_gëµid


	)

112 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

113 
	#SYS_gëøndom
 
__NR_gëøndom


	)

114 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

115 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

116 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

117 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

118 
	#SYS_gëæimô
 
__NR_gëæimô


	)

119 
	#SYS_gërußge
 
__NR_gërußge


	)

120 
	#SYS_gësid
 
__NR_gësid


	)

121 
	#SYS_gësock«me
 
__NR_gësock«me


	)

122 
	#SYS_gësock›t
 
__NR_gësock›t


	)

123 
	#SYS_gëtid
 
__NR_gëtid


	)

124 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

125 
	#SYS_gëuid
 
__NR_gëuid


	)

126 
	#SYS_gëuid32
 
__NR_gëuid32


	)

127 
	#SYS_gëx©å
 
__NR_gëx©å


	)

128 
	#SYS_gây
 
__NR_gây


	)

129 
	#SYS_idÀ
 
__NR_idÀ


	)

130 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

131 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

132 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

133 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

134 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

135 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

136 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

137 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

138 
	#SYS_io_£tup
 
__NR_io_£tup


	)

139 
	#SYS_io_submô
 
__NR_io_submô


	)

140 
	#SYS_io˘l
 
__NR_io˘l


	)

141 
	#SYS_i›îm
 
__NR_i›îm


	)

142 
	#SYS_i›l
 
__NR_i›l


	)

143 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

144 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

145 
	#SYS_ùc
 
__NR_ùc


	)

146 
	#SYS_kcmp
 
__NR_kcmp


	)

147 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

148 
	#SYS_key˘l
 
__NR_key˘l


	)

149 
	#SYS_kûl
 
__NR_kûl


	)

150 
	#SYS_lchown
 
__NR_lchown


	)

151 
	#SYS_lchown32
 
__NR_lchown32


	)

152 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

153 
	#SYS_lök
 
__NR_lök


	)

154 
	#SYS_lök©
 
__NR_lök©


	)

155 
	#SYS_li°í
 
__NR_li°í


	)

156 
	#SYS_li°x©å
 
__NR_li°x©å


	)

157 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

158 
	#SYS_lock
 
__NR_lock


	)

159 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

160 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

161 
	#SYS_l£ek
 
__NR_l£ek


	)

162 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

163 
	#SYS_l°©
 
__NR_l°©


	)

164 
	#SYS_l°©64
 
__NR_l°©64


	)

165 
	#SYS_madvi£
 
__NR_madvi£


	)

166 
	#SYS_mböd
 
__NR_mböd


	)

167 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

168 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

169 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

170 
	#SYS_möc‹e
 
__NR_möc‹e


	)

171 
	#SYS_mkdú
 
__NR_mkdú


	)

172 
	#SYS_mkdú©
 
__NR_mkdú©


	)

173 
	#SYS_mknod
 
__NR_mknod


	)

174 
	#SYS_mknod©
 
__NR_mknod©


	)

175 
	#SYS_mlock
 
__NR_mlock


	)

176 
	#SYS_mlock2
 
__NR_mlock2


	)

177 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

178 
	#SYS_mm≠
 
__NR_mm≠


	)

179 
	#SYS_mm≠2
 
__NR_mm≠2


	)

180 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

181 
	#SYS_mou¡
 
__NR_mou¡


	)

182 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

183 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

184 
	#SYS_mpx
 
__NR_mpx


	)

185 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

186 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

187 
	#SYS_mq_›í
 
__NR_mq_›í


	)

188 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

189 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

190 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

191 
	#SYS_mªm≠
 
__NR_mªm≠


	)

192 
	#SYS_msync
 
__NR_msync


	)

193 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

194 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

195 
	#SYS_munm≠
 
__NR_munm≠


	)

196 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

197 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

198 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

199 
	#SYS_ni˚
 
__NR_ni˚


	)

200 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

201 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

202 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

203 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

204 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

205 
	#SYS_›í
 
__NR_›í


	)

206 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

207 
	#SYS_›í©
 
__NR_›í©


	)

208 
	#SYS_∑u£
 
__NR_∑u£


	)

209 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

210 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

211 
	#SYS_pùe
 
__NR_pùe


	)

212 
	#SYS_pùe2
 
__NR_pùe2


	)

213 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

214 
	#SYS_pﬁl
 
__NR_pﬁl


	)

215 
	#SYS_µﬁl
 
__NR_µﬁl


	)

216 
	#SYS_¥˘l
 
__NR_¥˘l


	)

217 
	#SYS_¥ód64
 
__NR_¥ód64


	)

218 
	#SYS_¥ódv
 
__NR_¥ódv


	)

219 
	#SYS_¥limô64
 
__NR_¥limô64


	)

220 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

221 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

222 
	#SYS_¥of
 
__NR_¥of


	)

223 
	#SYS_¥ofû
 
__NR_¥ofû


	)

224 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

225 
	#SYS_±ø˚
 
__NR_±ø˚


	)

226 
	#SYS_puçmsg
 
__NR_puçmsg


	)

227 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

228 
	#SYS_pwrôev
 
__NR_pwrôev


	)

229 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

230 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

231 
	#SYS_ªad
 
__NR_ªad


	)

232 
	#SYS_ªadahód
 
__NR_ªadahód


	)

233 
	#SYS_ªaddú
 
__NR_ªaddú


	)

234 
	#SYS_ªadlök
 
__NR_ªadlök


	)

235 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

236 
	#SYS_ªadv
 
__NR_ªadv


	)

237 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

238 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

239 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

240 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

241 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

242 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

243 
	#SYS_ª«me
 
__NR_ª«me


	)

244 
	#SYS_ª«mót
 
__NR_ª«mót


	)

245 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

246 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

247 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

248 
	#SYS_rmdú
 
__NR_rmdú


	)

249 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

250 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

251 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

252 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

253 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

254 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

255 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

256 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

257 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

258 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

259 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

260 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

261 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

262 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

263 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

264 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

265 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

266 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

267 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

268 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

269 
	#SYS_£ccomp
 
__NR_£ccomp


	)

270 
	#SYS_£À˘
 
__NR_£À˘


	)

271 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

272 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

273 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

274 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

275 
	#SYS_£ndto
 
__NR_£ndto


	)

276 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

277 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

278 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

279 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

280 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

281 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

282 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

283 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

284 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

285 
	#SYS_£tgid
 
__NR_£tgid


	)

286 
	#SYS_£tgid32
 
__NR_£tgid32


	)

287 
	#SYS_£tgroups
 
__NR_£tgroups


	)

288 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

289 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

290 
	#SYS_£tôimî
 
__NR_£tôimî


	)

291 
	#SYS_£äs
 
__NR_£äs


	)

292 
	#SYS_£çgid
 
__NR_£çgid


	)

293 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

294 
	#SYS_£åegid
 
__NR_£åegid


	)

295 
	#SYS_£åegid32
 
__NR_£åegid32


	)

296 
	#SYS_£åesgid
 
__NR_£åesgid


	)

297 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

298 
	#SYS_£åesuid
 
__NR_£åesuid


	)

299 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

300 
	#SYS_£åeuid
 
__NR_£åeuid


	)

301 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

302 
	#SYS_£ålimô
 
__NR_£ålimô


	)

303 
	#SYS_£tsid
 
__NR_£tsid


	)

304 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

305 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

306 
	#SYS_£tuid
 
__NR_£tuid


	)

307 
	#SYS_£tuid32
 
__NR_£tuid32


	)

308 
	#SYS_£tx©å
 
__NR_£tx©å


	)

309 
	#SYS_sgëmask
 
__NR_sgëmask


	)

310 
	#SYS_shutdown
 
__NR_shutdown


	)

311 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

312 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

313 
	#SYS_sig«l
 
__NR_sig«l


	)

314 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

315 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

316 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

317 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

318 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

319 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

320 
	#SYS_sockë
 
__NR_sockë


	)

321 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

322 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

323 
	#SYS_•li˚
 
__NR_•li˚


	)

324 
	#SYS_s£tmask
 
__NR_s£tmask


	)

325 
	#SYS_°©
 
__NR_°©


	)

326 
	#SYS_°©64
 
__NR_°©64


	)

327 
	#SYS_°©fs
 
__NR_°©fs


	)

328 
	#SYS_°©fs64
 
__NR_°©fs64


	)

329 
	#SYS_°ime
 
__NR_°ime


	)

330 
	#SYS_°ty
 
__NR_°ty


	)

331 
	#SYS_sw≠off
 
__NR_sw≠off


	)

332 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

333 
	#SYS_symlök
 
__NR_symlök


	)

334 
	#SYS_symlök©
 
__NR_symlök©


	)

335 
	#SYS_sync
 
__NR_sync


	)

336 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

337 
	#SYS_syncfs
 
__NR_syncfs


	)

338 
	#SYS_sysfs
 
__NR_sysfs


	)

339 
	#SYS_sysöfo
 
__NR_sysöfo


	)

340 
	#SYS_sy¶og
 
__NR_sy¶og


	)

341 
	#SYS_ãe
 
__NR_ãe


	)

342 
	#SYS_tgkûl
 
__NR_tgkûl


	)

343 
	#SYS_time
 
__NR_time


	)

344 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

345 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

346 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

347 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

348 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

349 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

350 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

351 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

352 
	#SYS_times
 
__NR_times


	)

353 
	#SYS_tkûl
 
__NR_tkûl


	)

354 
	#SYS_åunˇã
 
__NR_åunˇã


	)

355 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

356 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

357 
	#SYS_ulimô
 
__NR_ulimô


	)

358 
	#SYS_umask
 
__NR_umask


	)

359 
	#SYS_umou¡
 
__NR_umou¡


	)

360 
	#SYS_umou¡2
 
__NR_umou¡2


	)

361 
	#SYS_u«me
 
__NR_u«me


	)

362 
	#SYS_u∆ök
 
__NR_u∆ök


	)

363 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

364 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

365 
	#SYS_u£lib
 
__NR_u£lib


	)

366 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

367 
	#SYS_u°©
 
__NR_u°©


	)

368 
	#SYS_utime
 
__NR_utime


	)

369 
	#SYS_utimíßt
 
__NR_utimíßt


	)

370 
	#SYS_utimes
 
__NR_utimes


	)

371 
	#SYS_vf‹k
 
__NR_vf‹k


	)

372 
	#SYS_vh™gup
 
__NR_vh™gup


	)

373 
	#SYS_vm86
 
__NR_vm86


	)

374 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

375 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

376 
	#SYS_v£rvî
 
__NR_v£rvî


	)

377 
	#SYS_waô4
 
__NR_waô4


	)

378 
	#SYS_waôid
 
__NR_waôid


	)

379 
	#SYS_waôpid
 
__NR_waôpid


	)

380 
	#SYS_wrôe
 
__NR_wrôe


	)

381 
	#SYS_wrôev
 
__NR_wrôev


	)

383 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


384 
	#SYS__sys˘l
 
__NR__sys˘l


	)

385 
	#SYS_ac˚±
 
__NR_ac˚±


	)

386 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

387 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

388 
	#SYS_ac˘
 
__NR_ac˘


	)

389 
	#SYS_add_key
 
__NR_add_key


	)

390 
	#SYS_adjtimex
 
__NR_adjtimex


	)

391 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

392 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

393 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

394 
	#SYS_böd
 
__NR_böd


	)

395 
	#SYS_bpf
 
__NR_bpf


	)

396 
	#SYS_brk
 
__NR_brk


	)

397 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

398 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

399 
	#SYS_chdú
 
__NR_chdú


	)

400 
	#SYS_chmod
 
__NR_chmod


	)

401 
	#SYS_chown
 
__NR_chown


	)

402 
	#SYS_chroŸ
 
__NR_chroŸ


	)

403 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

404 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

405 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

406 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

407 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

408 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

409 
	#SYS_˛o£
 
__NR_˛o£


	)

410 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

411 
	#SYS_¸ót
 
__NR_¸ót


	)

412 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

413 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

414 
	#SYS_dup
 
__NR_dup


	)

415 
	#SYS_dup2
 
__NR_dup2


	)

416 
	#SYS_dup3
 
__NR_dup3


	)

417 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

418 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

419 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

420 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

421 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

422 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

423 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

424 
	#SYS_evítfd
 
__NR_evítfd


	)

425 
	#SYS_evítfd2
 
__NR_evítfd2


	)

426 
	#SYS_execve
 
__NR_execve


	)

427 
	#SYS_execvót
 
__NR_execvót


	)

428 
	#SYS_exô
 
__NR_exô


	)

429 
	#SYS_exô_group
 
__NR_exô_group


	)

430 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

431 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

432 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

433 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

434 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

435 
	#SYS_fchdú
 
__NR_fchdú


	)

436 
	#SYS_fchmod
 
__NR_fchmod


	)

437 
	#SYS_fchmod©
 
__NR_fchmod©


	)

438 
	#SYS_fchown
 
__NR_fchown


	)

439 
	#SYS_fchow«t
 
__NR_fchow«t


	)

440 
	#SYS_f˙é
 
__NR_f˙é


	)

441 
	#SYS_fd©async
 
__NR_fd©async


	)

442 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

443 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

444 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

445 
	#SYS_Êock
 
__NR_Êock


	)

446 
	#SYS_f‹k
 
__NR_f‹k


	)

447 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

448 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

449 
	#SYS_f°©
 
__NR_f°©


	)

450 
	#SYS_f°©fs
 
__NR_f°©fs


	)

451 
	#SYS_fsync
 
__NR_fsync


	)

452 
	#SYS_·runˇã
 
__NR_·runˇã


	)

453 
	#SYS_fuãx
 
__NR_fuãx


	)

454 
	#SYS_futimeßt
 
__NR_futimeßt


	)

455 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

456 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

457 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

458 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

459 
	#SYS_gë˝u
 
__NR_gë˝u


	)

460 
	#SYS_gëcwd
 
__NR_gëcwd


	)

461 
	#SYS_gëdíts
 
__NR_gëdíts


	)

462 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

463 
	#SYS_gëegid
 
__NR_gëegid


	)

464 
	#SYS_gëeuid
 
__NR_gëeuid


	)

465 
	#SYS_gëgid
 
__NR_gëgid


	)

466 
	#SYS_gëgroups
 
__NR_gëgroups


	)

467 
	#SYS_gëôimî
 
__NR_gëôimî


	)

468 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

469 
	#SYS_gëpgid
 
__NR_gëpgid


	)

470 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

471 
	#SYS_gëpid
 
__NR_gëpid


	)

472 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

473 
	#SYS_gëµid
 
__NR_gëµid


	)

474 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

475 
	#SYS_gëøndom
 
__NR_gëøndom


	)

476 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

477 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

478 
	#SYS_gëæimô
 
__NR_gëæimô


	)

479 
	#SYS_gërußge
 
__NR_gërußge


	)

480 
	#SYS_gësid
 
__NR_gësid


	)

481 
	#SYS_gësock«me
 
__NR_gësock«me


	)

482 
	#SYS_gësock›t
 
__NR_gësock›t


	)

483 
	#SYS_gëtid
 
__NR_gëtid


	)

484 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

485 
	#SYS_gëuid
 
__NR_gëuid


	)

486 
	#SYS_gëx©å
 
__NR_gëx©å


	)

487 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

488 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

489 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

490 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

491 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

492 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

493 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

494 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

495 
	#SYS_io_£tup
 
__NR_io_£tup


	)

496 
	#SYS_io_submô
 
__NR_io_submô


	)

497 
	#SYS_io˘l
 
__NR_io˘l


	)

498 
	#SYS_i›îm
 
__NR_i›îm


	)

499 
	#SYS_i›l
 
__NR_i›l


	)

500 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

501 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

502 
	#SYS_kcmp
 
__NR_kcmp


	)

503 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

504 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

505 
	#SYS_key˘l
 
__NR_key˘l


	)

506 
	#SYS_kûl
 
__NR_kûl


	)

507 
	#SYS_lchown
 
__NR_lchown


	)

508 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

509 
	#SYS_lök
 
__NR_lök


	)

510 
	#SYS_lök©
 
__NR_lök©


	)

511 
	#SYS_li°í
 
__NR_li°í


	)

512 
	#SYS_li°x©å
 
__NR_li°x©å


	)

513 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

514 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

515 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

516 
	#SYS_l£ek
 
__NR_l£ek


	)

517 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

518 
	#SYS_l°©
 
__NR_l°©


	)

519 
	#SYS_madvi£
 
__NR_madvi£


	)

520 
	#SYS_mböd
 
__NR_mböd


	)

521 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

522 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

523 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

524 
	#SYS_möc‹e
 
__NR_möc‹e


	)

525 
	#SYS_mkdú
 
__NR_mkdú


	)

526 
	#SYS_mkdú©
 
__NR_mkdú©


	)

527 
	#SYS_mknod
 
__NR_mknod


	)

528 
	#SYS_mknod©
 
__NR_mknod©


	)

529 
	#SYS_mlock
 
__NR_mlock


	)

530 
	#SYS_mlock2
 
__NR_mlock2


	)

531 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

532 
	#SYS_mm≠
 
__NR_mm≠


	)

533 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

534 
	#SYS_mou¡
 
__NR_mou¡


	)

535 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

536 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

537 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

538 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

539 
	#SYS_mq_›í
 
__NR_mq_›í


	)

540 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

541 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

542 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

543 
	#SYS_mªm≠
 
__NR_mªm≠


	)

544 
	#SYS_msg˘l
 
__NR_msg˘l


	)

545 
	#SYS_msggë
 
__NR_msggë


	)

546 
	#SYS_msgrcv
 
__NR_msgrcv


	)

547 
	#SYS_msg¢d
 
__NR_msg¢d


	)

548 
	#SYS_msync
 
__NR_msync


	)

549 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

550 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

551 
	#SYS_munm≠
 
__NR_munm≠


	)

552 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

553 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

554 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

555 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

556 
	#SYS_›í
 
__NR_›í


	)

557 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

558 
	#SYS_›í©
 
__NR_›í©


	)

559 
	#SYS_∑u£
 
__NR_∑u£


	)

560 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

561 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

562 
	#SYS_pùe
 
__NR_pùe


	)

563 
	#SYS_pùe2
 
__NR_pùe2


	)

564 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

565 
	#SYS_pﬁl
 
__NR_pﬁl


	)

566 
	#SYS_µﬁl
 
__NR_µﬁl


	)

567 
	#SYS_¥˘l
 
__NR_¥˘l


	)

568 
	#SYS_¥ód64
 
__NR_¥ód64


	)

569 
	#SYS_¥ódv
 
__NR_¥ódv


	)

570 
	#SYS_¥limô64
 
__NR_¥limô64


	)

571 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

572 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

573 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

574 
	#SYS_±ø˚
 
__NR_±ø˚


	)

575 
	#SYS_puçmsg
 
__NR_puçmsg


	)

576 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

577 
	#SYS_pwrôev
 
__NR_pwrôev


	)

578 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

579 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

580 
	#SYS_ªad
 
__NR_ªad


	)

581 
	#SYS_ªadahód
 
__NR_ªadahód


	)

582 
	#SYS_ªadlök
 
__NR_ªadlök


	)

583 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

584 
	#SYS_ªadv
 
__NR_ªadv


	)

585 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

586 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

587 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

588 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

589 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

590 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

591 
	#SYS_ª«me
 
__NR_ª«me


	)

592 
	#SYS_ª«mót
 
__NR_ª«mót


	)

593 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

594 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

595 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

596 
	#SYS_rmdú
 
__NR_rmdú


	)

597 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

598 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

599 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

600 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

601 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

602 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

603 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

604 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

605 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

606 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

607 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

608 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

609 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

610 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

611 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

612 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

613 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

614 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

615 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

616 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

617 
	#SYS_£ccomp
 
__NR_£ccomp


	)

618 
	#SYS_£curôy
 
__NR_£curôy


	)

619 
	#SYS_£À˘
 
__NR_£À˘


	)

620 
	#SYS_£m˘l
 
__NR_£m˘l


	)

621 
	#SYS_£mgë
 
__NR_£mgë


	)

622 
	#SYS_£m›
 
__NR_£m›


	)

623 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

624 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

625 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

626 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

627 
	#SYS_£ndto
 
__NR_£ndto


	)

628 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

629 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

630 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

631 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

632 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

633 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

634 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

635 
	#SYS_£tgid
 
__NR_£tgid


	)

636 
	#SYS_£tgroups
 
__NR_£tgroups


	)

637 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

638 
	#SYS_£tôimî
 
__NR_£tôimî


	)

639 
	#SYS_£äs
 
__NR_£äs


	)

640 
	#SYS_£çgid
 
__NR_£çgid


	)

641 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

642 
	#SYS_£åegid
 
__NR_£åegid


	)

643 
	#SYS_£åesgid
 
__NR_£åesgid


	)

644 
	#SYS_£åesuid
 
__NR_£åesuid


	)

645 
	#SYS_£åeuid
 
__NR_£åeuid


	)

646 
	#SYS_£ålimô
 
__NR_£ålimô


	)

647 
	#SYS_£tsid
 
__NR_£tsid


	)

648 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

649 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

650 
	#SYS_£tuid
 
__NR_£tuid


	)

651 
	#SYS_£tx©å
 
__NR_£tx©å


	)

652 
	#SYS_shm©
 
__NR_shm©


	)

653 
	#SYS_shm˘l
 
__NR_shm˘l


	)

654 
	#SYS_shmdt
 
__NR_shmdt


	)

655 
	#SYS_shmgë
 
__NR_shmgë


	)

656 
	#SYS_shutdown
 
__NR_shutdown


	)

657 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

658 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

659 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

660 
	#SYS_sockë
 
__NR_sockë


	)

661 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

662 
	#SYS_•li˚
 
__NR_•li˚


	)

663 
	#SYS_°©
 
__NR_°©


	)

664 
	#SYS_°©fs
 
__NR_°©fs


	)

665 
	#SYS_sw≠off
 
__NR_sw≠off


	)

666 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

667 
	#SYS_symlök
 
__NR_symlök


	)

668 
	#SYS_symlök©
 
__NR_symlök©


	)

669 
	#SYS_sync
 
__NR_sync


	)

670 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

671 
	#SYS_syncfs
 
__NR_syncfs


	)

672 
	#SYS_sysfs
 
__NR_sysfs


	)

673 
	#SYS_sysöfo
 
__NR_sysöfo


	)

674 
	#SYS_sy¶og
 
__NR_sy¶og


	)

675 
	#SYS_ãe
 
__NR_ãe


	)

676 
	#SYS_tgkûl
 
__NR_tgkûl


	)

677 
	#SYS_time
 
__NR_time


	)

678 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

679 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

680 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

681 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

682 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

683 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

684 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

685 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

686 
	#SYS_times
 
__NR_times


	)

687 
	#SYS_tkûl
 
__NR_tkûl


	)

688 
	#SYS_åunˇã
 
__NR_åunˇã


	)

689 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

690 
	#SYS_umask
 
__NR_umask


	)

691 
	#SYS_umou¡2
 
__NR_umou¡2


	)

692 
	#SYS_u«me
 
__NR_u«me


	)

693 
	#SYS_u∆ök
 
__NR_u∆ök


	)

694 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

695 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

696 
	#SYS_u£lib
 
__NR_u£lib


	)

697 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

698 
	#SYS_u°©
 
__NR_u°©


	)

699 
	#SYS_utime
 
__NR_utime


	)

700 
	#SYS_utimíßt
 
__NR_utimíßt


	)

701 
	#SYS_utimes
 
__NR_utimes


	)

702 
	#SYS_vf‹k
 
__NR_vf‹k


	)

703 
	#SYS_vh™gup
 
__NR_vh™gup


	)

704 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

705 
	#SYS_v£rvî
 
__NR_v£rvî


	)

706 
	#SYS_waô4
 
__NR_waô4


	)

707 
	#SYS_waôid
 
__NR_waôid


	)

708 
	#SYS_wrôe
 
__NR_wrôe


	)

709 
	#SYS_wrôev
 
__NR_wrôev


	)

711 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


712 
	#SYS_ac˚±
 
__NR_ac˚±


	)

713 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

714 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

715 
	#SYS_ac˘
 
__NR_ac˘


	)

716 
	#SYS_add_key
 
__NR_add_key


	)

717 
	#SYS_adjtimex
 
__NR_adjtimex


	)

718 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

719 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

720 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

721 
	#SYS_böd
 
__NR_böd


	)

722 
	#SYS_bpf
 
__NR_bpf


	)

723 
	#SYS_brk
 
__NR_brk


	)

724 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

725 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

726 
	#SYS_chdú
 
__NR_chdú


	)

727 
	#SYS_chmod
 
__NR_chmod


	)

728 
	#SYS_chown
 
__NR_chown


	)

729 
	#SYS_chroŸ
 
__NR_chroŸ


	)

730 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

731 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

732 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

733 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

734 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

735 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

736 
	#SYS_˛o£
 
__NR_˛o£


	)

737 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

738 
	#SYS_¸ót
 
__NR_¸ót


	)

739 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

740 
	#SYS_dup
 
__NR_dup


	)

741 
	#SYS_dup2
 
__NR_dup2


	)

742 
	#SYS_dup3
 
__NR_dup3


	)

743 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

744 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

745 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

746 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

747 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

748 
	#SYS_evítfd
 
__NR_evítfd


	)

749 
	#SYS_evítfd2
 
__NR_evítfd2


	)

750 
	#SYS_execve
 
__NR_execve


	)

751 
	#SYS_execvót
 
__NR_execvót


	)

752 
	#SYS_exô
 
__NR_exô


	)

753 
	#SYS_exô_group
 
__NR_exô_group


	)

754 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

755 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

756 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

757 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

758 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

759 
	#SYS_fchdú
 
__NR_fchdú


	)

760 
	#SYS_fchmod
 
__NR_fchmod


	)

761 
	#SYS_fchmod©
 
__NR_fchmod©


	)

762 
	#SYS_fchown
 
__NR_fchown


	)

763 
	#SYS_fchow«t
 
__NR_fchow«t


	)

764 
	#SYS_f˙é
 
__NR_f˙é


	)

765 
	#SYS_fd©async
 
__NR_fd©async


	)

766 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

767 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

768 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

769 
	#SYS_Êock
 
__NR_Êock


	)

770 
	#SYS_f‹k
 
__NR_f‹k


	)

771 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

772 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

773 
	#SYS_f°©
 
__NR_f°©


	)

774 
	#SYS_f°©fs
 
__NR_f°©fs


	)

775 
	#SYS_fsync
 
__NR_fsync


	)

776 
	#SYS_·runˇã
 
__NR_·runˇã


	)

777 
	#SYS_fuãx
 
__NR_fuãx


	)

778 
	#SYS_futimeßt
 
__NR_futimeßt


	)

779 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

780 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

781 
	#SYS_gë˝u
 
__NR_gë˝u


	)

782 
	#SYS_gëcwd
 
__NR_gëcwd


	)

783 
	#SYS_gëdíts
 
__NR_gëdíts


	)

784 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

785 
	#SYS_gëegid
 
__NR_gëegid


	)

786 
	#SYS_gëeuid
 
__NR_gëeuid


	)

787 
	#SYS_gëgid
 
__NR_gëgid


	)

788 
	#SYS_gëgroups
 
__NR_gëgroups


	)

789 
	#SYS_gëôimî
 
__NR_gëôimî


	)

790 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

791 
	#SYS_gëpgid
 
__NR_gëpgid


	)

792 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

793 
	#SYS_gëpid
 
__NR_gëpid


	)

794 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

795 
	#SYS_gëµid
 
__NR_gëµid


	)

796 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

797 
	#SYS_gëøndom
 
__NR_gëøndom


	)

798 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

799 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

800 
	#SYS_gëæimô
 
__NR_gëæimô


	)

801 
	#SYS_gërußge
 
__NR_gërußge


	)

802 
	#SYS_gësid
 
__NR_gësid


	)

803 
	#SYS_gësock«me
 
__NR_gësock«me


	)

804 
	#SYS_gësock›t
 
__NR_gësock›t


	)

805 
	#SYS_gëtid
 
__NR_gëtid


	)

806 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

807 
	#SYS_gëuid
 
__NR_gëuid


	)

808 
	#SYS_gëx©å
 
__NR_gëx©å


	)

809 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

810 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

811 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

812 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

813 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

814 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

815 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

816 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

817 
	#SYS_io_£tup
 
__NR_io_£tup


	)

818 
	#SYS_io_submô
 
__NR_io_submô


	)

819 
	#SYS_io˘l
 
__NR_io˘l


	)

820 
	#SYS_i›îm
 
__NR_i›îm


	)

821 
	#SYS_i›l
 
__NR_i›l


	)

822 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

823 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

824 
	#SYS_kcmp
 
__NR_kcmp


	)

825 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

826 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

827 
	#SYS_key˘l
 
__NR_key˘l


	)

828 
	#SYS_kûl
 
__NR_kûl


	)

829 
	#SYS_lchown
 
__NR_lchown


	)

830 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

831 
	#SYS_lök
 
__NR_lök


	)

832 
	#SYS_lök©
 
__NR_lök©


	)

833 
	#SYS_li°í
 
__NR_li°í


	)

834 
	#SYS_li°x©å
 
__NR_li°x©å


	)

835 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

836 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

837 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

838 
	#SYS_l£ek
 
__NR_l£ek


	)

839 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

840 
	#SYS_l°©
 
__NR_l°©


	)

841 
	#SYS_madvi£
 
__NR_madvi£


	)

842 
	#SYS_mböd
 
__NR_mböd


	)

843 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

844 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

845 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

846 
	#SYS_möc‹e
 
__NR_möc‹e


	)

847 
	#SYS_mkdú
 
__NR_mkdú


	)

848 
	#SYS_mkdú©
 
__NR_mkdú©


	)

849 
	#SYS_mknod
 
__NR_mknod


	)

850 
	#SYS_mknod©
 
__NR_mknod©


	)

851 
	#SYS_mlock
 
__NR_mlock


	)

852 
	#SYS_mlock2
 
__NR_mlock2


	)

853 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

854 
	#SYS_mm≠
 
__NR_mm≠


	)

855 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

856 
	#SYS_mou¡
 
__NR_mou¡


	)

857 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

858 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

859 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

860 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

861 
	#SYS_mq_›í
 
__NR_mq_›í


	)

862 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

863 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

864 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

865 
	#SYS_mªm≠
 
__NR_mªm≠


	)

866 
	#SYS_msg˘l
 
__NR_msg˘l


	)

867 
	#SYS_msggë
 
__NR_msggë


	)

868 
	#SYS_msgrcv
 
__NR_msgrcv


	)

869 
	#SYS_msg¢d
 
__NR_msg¢d


	)

870 
	#SYS_msync
 
__NR_msync


	)

871 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

872 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

873 
	#SYS_munm≠
 
__NR_munm≠


	)

874 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

875 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

876 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

877 
	#SYS_›í
 
__NR_›í


	)

878 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

879 
	#SYS_›í©
 
__NR_›í©


	)

880 
	#SYS_∑u£
 
__NR_∑u£


	)

881 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

882 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

883 
	#SYS_pùe
 
__NR_pùe


	)

884 
	#SYS_pùe2
 
__NR_pùe2


	)

885 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

886 
	#SYS_pﬁl
 
__NR_pﬁl


	)

887 
	#SYS_µﬁl
 
__NR_µﬁl


	)

888 
	#SYS_¥˘l
 
__NR_¥˘l


	)

889 
	#SYS_¥ód64
 
__NR_¥ód64


	)

890 
	#SYS_¥ódv
 
__NR_¥ódv


	)

891 
	#SYS_¥limô64
 
__NR_¥limô64


	)

892 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

893 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

894 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

895 
	#SYS_±ø˚
 
__NR_±ø˚


	)

896 
	#SYS_puçmsg
 
__NR_puçmsg


	)

897 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

898 
	#SYS_pwrôev
 
__NR_pwrôev


	)

899 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

900 
	#SYS_ªad
 
__NR_ªad


	)

901 
	#SYS_ªadahód
 
__NR_ªadahód


	)

902 
	#SYS_ªadlök
 
__NR_ªadlök


	)

903 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

904 
	#SYS_ªadv
 
__NR_ªadv


	)

905 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

906 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

907 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

908 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

909 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

910 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

911 
	#SYS_ª«me
 
__NR_ª«me


	)

912 
	#SYS_ª«mót
 
__NR_ª«mót


	)

913 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

914 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

915 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

916 
	#SYS_rmdú
 
__NR_rmdú


	)

917 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

918 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

919 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

920 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

921 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

922 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

923 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

924 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

925 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

926 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

927 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

928 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

929 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

930 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

931 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

932 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

933 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

934 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

935 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

936 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

937 
	#SYS_£ccomp
 
__NR_£ccomp


	)

938 
	#SYS_£curôy
 
__NR_£curôy


	)

939 
	#SYS_£À˘
 
__NR_£À˘


	)

940 
	#SYS_£m˘l
 
__NR_£m˘l


	)

941 
	#SYS_£mgë
 
__NR_£mgë


	)

942 
	#SYS_£m›
 
__NR_£m›


	)

943 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

944 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

945 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

946 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

947 
	#SYS_£ndto
 
__NR_£ndto


	)

948 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

949 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

950 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

951 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

952 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

953 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

954 
	#SYS_£tgid
 
__NR_£tgid


	)

955 
	#SYS_£tgroups
 
__NR_£tgroups


	)

956 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

957 
	#SYS_£tôimî
 
__NR_£tôimî


	)

958 
	#SYS_£äs
 
__NR_£äs


	)

959 
	#SYS_£çgid
 
__NR_£çgid


	)

960 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

961 
	#SYS_£åegid
 
__NR_£åegid


	)

962 
	#SYS_£åesgid
 
__NR_£åesgid


	)

963 
	#SYS_£åesuid
 
__NR_£åesuid


	)

964 
	#SYS_£åeuid
 
__NR_£åeuid


	)

965 
	#SYS_£ålimô
 
__NR_£ålimô


	)

966 
	#SYS_£tsid
 
__NR_£tsid


	)

967 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

968 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

969 
	#SYS_£tuid
 
__NR_£tuid


	)

970 
	#SYS_£tx©å
 
__NR_£tx©å


	)

971 
	#SYS_shm©
 
__NR_shm©


	)

972 
	#SYS_shm˘l
 
__NR_shm˘l


	)

973 
	#SYS_shmdt
 
__NR_shmdt


	)

974 
	#SYS_shmgë
 
__NR_shmgë


	)

975 
	#SYS_shutdown
 
__NR_shutdown


	)

976 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

977 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

978 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

979 
	#SYS_sockë
 
__NR_sockë


	)

980 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

981 
	#SYS_•li˚
 
__NR_•li˚


	)

982 
	#SYS_°©
 
__NR_°©


	)

983 
	#SYS_°©fs
 
__NR_°©fs


	)

984 
	#SYS_sw≠off
 
__NR_sw≠off


	)

985 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

986 
	#SYS_symlök
 
__NR_symlök


	)

987 
	#SYS_symlök©
 
__NR_symlök©


	)

988 
	#SYS_sync
 
__NR_sync


	)

989 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

990 
	#SYS_syncfs
 
__NR_syncfs


	)

991 
	#SYS_sysfs
 
__NR_sysfs


	)

992 
	#SYS_sysöfo
 
__NR_sysöfo


	)

993 
	#SYS_sy¶og
 
__NR_sy¶og


	)

994 
	#SYS_ãe
 
__NR_ãe


	)

995 
	#SYS_tgkûl
 
__NR_tgkûl


	)

996 
	#SYS_time
 
__NR_time


	)

997 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

998 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

999 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

1000 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

1001 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

1002 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

1003 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

1004 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

1005 
	#SYS_times
 
__NR_times


	)

1006 
	#SYS_tkûl
 
__NR_tkûl


	)

1007 
	#SYS_åunˇã
 
__NR_åunˇã


	)

1008 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

1009 
	#SYS_umask
 
__NR_umask


	)

1010 
	#SYS_umou¡2
 
__NR_umou¡2


	)

1011 
	#SYS_u«me
 
__NR_u«me


	)

1012 
	#SYS_u∆ök
 
__NR_u∆ök


	)

1013 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

1014 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

1015 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

1016 
	#SYS_u°©
 
__NR_u°©


	)

1017 
	#SYS_utime
 
__NR_utime


	)

1018 
	#SYS_utimíßt
 
__NR_utimíßt


	)

1019 
	#SYS_utimes
 
__NR_utimes


	)

1020 
	#SYS_vf‹k
 
__NR_vf‹k


	)

1021 
	#SYS_vh™gup
 
__NR_vh™gup


	)

1022 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

1023 
	#SYS_waô4
 
__NR_waô4


	)

1024 
	#SYS_waôid
 
__NR_waôid


	)

1025 
	#SYS_wrôe
 
__NR_wrôe


	)

1026 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_ALTERA_NIOS2
 113

	)

253 
	#EM_AARCH64
 183

	)

254 
	#EM_TILEPRO
 188

	)

255 
	#EM_MICROBLAZE
 189

	)

256 
	#EM_TILEGX
 191

	)

257 
	#EM_NUM
 192

	)

263 
	#EM_ALPHA
 0x9026

	)

267 
	#EV_NONE
 0

	)

268 
	#EV_CURRENT
 1

	)

269 
	#EV_NUM
 2

	)

275 
Elf32_W‹d
 
	msh_«me
;

276 
Elf32_W‹d
 
	msh_ty≥
;

277 
Elf32_W‹d
 
	msh_Êags
;

278 
Elf32_Addr
 
	msh_addr
;

279 
Elf32_Off
 
	msh_off£t
;

280 
Elf32_W‹d
 
	msh_size
;

281 
Elf32_W‹d
 
	msh_lök
;

282 
Elf32_W‹d
 
	msh_öfo
;

283 
Elf32_W‹d
 
	msh_addølign
;

284 
Elf32_W‹d
 
	msh_ítsize
;

285 } 
	tElf32_Shdr
;

289 
Elf64_W‹d
 
	msh_«me
;

290 
Elf64_W‹d
 
	msh_ty≥
;

291 
Elf64_Xw‹d
 
	msh_Êags
;

292 
Elf64_Addr
 
	msh_addr
;

293 
Elf64_Off
 
	msh_off£t
;

294 
Elf64_Xw‹d
 
	msh_size
;

295 
Elf64_W‹d
 
	msh_lök
;

296 
Elf64_W‹d
 
	msh_öfo
;

297 
Elf64_Xw‹d
 
	msh_addølign
;

298 
Elf64_Xw‹d
 
	msh_ítsize
;

299 } 
	tElf64_Shdr
;

303 
	#SHN_UNDEF
 0

	)

304 
	#SHN_LORESERVE
 0xff00

	)

305 
	#SHN_LOPROC
 0xff00

	)

306 
	#SHN_BEFORE
 0xff00

	)

308 
	#SHN_AFTER
 0xff01

	)

310 
	#SHN_HIPROC
 0xff1‡

	)

311 
	#SHN_LOOS
 0xff20

	)

312 
	#SHN_HIOS
 0xff3‡

	)

313 
	#SHN_ABS
 0xfff1

	)

314 
	#SHN_COMMON
 0xfff2

	)

315 
	#SHN_XINDEX
 0xfff‡

	)

316 
	#SHN_HIRESERVE
 0xfff‡

	)

320 
	#SHT_NULL
 0

	)

321 
	#SHT_PROGBITS
 1

	)

322 
	#SHT_SYMTAB
 2

	)

323 
	#SHT_STRTAB
 3

	)

324 
	#SHT_RELA
 4

	)

325 
	#SHT_HASH
 5

	)

326 
	#SHT_DYNAMIC
 6

	)

327 
	#SHT_NOTE
 7

	)

328 
	#SHT_NOBITS
 8

	)

329 
	#SHT_REL
 9

	)

330 
	#SHT_SHLIB
 10

	)

331 
	#SHT_DYNSYM
 11

	)

332 
	#SHT_INIT_ARRAY
 14

	)

333 
	#SHT_FINI_ARRAY
 15

	)

334 
	#SHT_PREINIT_ARRAY
 16

	)

335 
	#SHT_GROUP
 17

	)

336 
	#SHT_SYMTAB_SHNDX
 18

	)

337 
	#SHT_NUM
 19

	)

338 
	#SHT_LOOS
 0x60000000

	)

339 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

340 
	#SHT_GNU_HASH
 0x6ffffff6

	)

341 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

342 
	#SHT_CHECKSUM
 0x6ffffff8

	)

343 
	#SHT_LOSUNW
 0x6fffffÁ

	)

344 
	#SHT_SUNW_move
 0x6fffffÁ

	)

345 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

346 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

347 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

348 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

349 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

350 
	#SHT_HISUNW
 0x6ffffff‡

	)

351 
	#SHT_HIOS
 0x6ffffff‡

	)

352 
	#SHT_LOPROC
 0x70000000

	)

353 
	#SHT_HIPROC
 0x7ffffff‡

	)

354 
	#SHT_LOUSER
 0x80000000

	)

355 
	#SHT_HIUSER
 0x8ffffff‡

	)

359 
	#SHF_WRITE
 (1 << 0Ë

	)

360 
	#SHF_ALLOC
 (1 << 1Ë

	)

361 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

362 
	#SHF_MERGE
 (1 << 4Ë

	)

363 
	#SHF_STRINGS
 (1 << 5Ë

	)

364 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

365 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

366 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

368 
	#SHF_GROUP
 (1 << 9Ë

	)

369 
	#SHF_TLS
 (1 << 10Ë

	)

370 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

371 
	#SHF_MASKOS
 0x0ff00000

	)

372 
	#SHF_MASKPROC
 0xf0000000

	)

373 
	#SHF_ORDERED
 (1 << 30Ë

	)

375 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

382 
Elf32_W‹d
 
	mch_ty≥
;

383 
Elf32_W‹d
 
	mch_size
;

384 
Elf32_W‹d
 
	mch_addølign
;

385 } 
	tElf32_Chdr
;

389 
Elf64_W‹d
 
	mch_ty≥
;

390 
Elf64_W‹d
 
	mch_ª£rved
;

391 
Elf64_Xw‹d
 
	mch_size
;

392 
Elf64_Xw‹d
 
	mch_addølign
;

393 } 
	tElf64_Chdr
;

396 
	#ELFCOMPRESS_ZLIB
 1

	)

397 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

398 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

399 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

400 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

403 
	#GRP_COMDAT
 0x1

	)

409 
Elf32_W‹d
 
	m°_«me
;

410 
Elf32_Addr
 
	m°_vÆue
;

411 
Elf32_W‹d
 
	m°_size
;

412 
	m°_öfo
;

413 
	m°_Ÿhî
;

414 
Elf32_Se˘i⁄
 
	m°_shndx
;

415 } 
	tElf32_Sym
;

419 
Elf64_W‹d
 
	m°_«me
;

420 
	m°_öfo
;

421 
	m°_Ÿhî
;

422 
Elf64_Se˘i⁄
 
	m°_shndx
;

423 
Elf64_Addr
 
	m°_vÆue
;

424 
Elf64_Xw‹d
 
	m°_size
;

425 } 
	tElf64_Sym
;

432 
Elf32_HÆf
 
	msi_boundto
;

433 
Elf32_HÆf
 
	msi_Êags
;

434 } 
	tElf32_Symöfo
;

438 
Elf64_HÆf
 
	msi_boundto
;

439 
Elf64_HÆf
 
	msi_Êags
;

440 } 
	tElf64_Symöfo
;

443 
	#SYMINFO_BT_SELF
 0xfff‡

	)

444 
	#SYMINFO_BT_PARENT
 0xff„

	)

445 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

448 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

449 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

450 
	#SYMINFO_FLG_COPY
 0x0004

	)

451 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

454 
	#SYMINFO_NONE
 0

	)

455 
	#SYMINFO_CURRENT
 1

	)

456 
	#SYMINFO_NUM
 2

	)

461 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

462 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

463 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

466 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

467 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

468 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

472 
	#STB_LOCAL
 0

	)

473 
	#STB_GLOBAL
 1

	)

474 
	#STB_WEAK
 2

	)

475 
	#STB_NUM
 3

	)

476 
	#STB_LOOS
 10

	)

477 
	#STB_GNU_UNIQUE
 10

	)

478 
	#STB_HIOS
 12

	)

479 
	#STB_LOPROC
 13

	)

480 
	#STB_HIPROC
 15

	)

484 
	#STT_NOTYPE
 0

	)

485 
	#STT_OBJECT
 1

	)

486 
	#STT_FUNC
 2

	)

487 
	#STT_SECTION
 3

	)

488 
	#STT_FILE
 4

	)

489 
	#STT_COMMON
 5

	)

490 
	#STT_TLS
 6

	)

491 
	#STT_NUM
 7

	)

492 
	#STT_LOOS
 10

	)

493 
	#STT_GNU_IFUNC
 10

	)

494 
	#STT_HIOS
 12

	)

495 
	#STT_LOPROC
 13

	)

496 
	#STT_HIPROC
 15

	)

503 
	#STN_UNDEF
 0

	)

508 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

511 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

514 
	#STV_DEFAULT
 0

	)

515 
	#STV_INTERNAL
 1

	)

516 
	#STV_HIDDEN
 2

	)

517 
	#STV_PROTECTED
 3

	)

524 
Elf32_Addr
 
	mr_off£t
;

525 
Elf32_W‹d
 
	mr_öfo
;

526 } 
	tElf32_Rñ
;

535 
Elf64_Addr
 
	mr_off£t
;

536 
Elf64_Xw‹d
 
	mr_öfo
;

537 } 
	tElf64_Rñ
;

543 
Elf32_Addr
 
	mr_off£t
;

544 
Elf32_W‹d
 
	mr_öfo
;

545 
Elf32_Sw‹d
 
	mr_addíd
;

546 } 
	tElf32_Rña
;

550 
Elf64_Addr
 
	mr_off£t
;

551 
Elf64_Xw‹d
 
	mr_öfo
;

552 
Elf64_Sxw‹d
 
	mr_addíd
;

553 } 
	tElf64_Rña
;

557 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

558 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

559 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

561 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

562 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

563 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

569 
Elf32_W‹d
 
	mp_ty≥
;

570 
Elf32_Off
 
	mp_off£t
;

571 
Elf32_Addr
 
	mp_vaddr
;

572 
Elf32_Addr
 
	mp_∑ddr
;

573 
Elf32_W‹d
 
	mp_fûesz
;

574 
Elf32_W‹d
 
	mp_memsz
;

575 
Elf32_W‹d
 
	mp_Êags
;

576 
Elf32_W‹d
 
	mp_Æign
;

577 } 
	tElf32_Phdr
;

581 
Elf64_W‹d
 
	mp_ty≥
;

582 
Elf64_W‹d
 
	mp_Êags
;

583 
Elf64_Off
 
	mp_off£t
;

584 
Elf64_Addr
 
	mp_vaddr
;

585 
Elf64_Addr
 
	mp_∑ddr
;

586 
Elf64_Xw‹d
 
	mp_fûesz
;

587 
Elf64_Xw‹d
 
	mp_memsz
;

588 
Elf64_Xw‹d
 
	mp_Æign
;

589 } 
	tElf64_Phdr
;

595 
	#PN_XNUM
 0xffff

	)

599 
	#PT_NULL
 0

	)

600 
	#PT_LOAD
 1

	)

601 
	#PT_DYNAMIC
 2

	)

602 
	#PT_INTERP
 3

	)

603 
	#PT_NOTE
 4

	)

604 
	#PT_SHLIB
 5

	)

605 
	#PT_PHDR
 6

	)

606 
	#PT_TLS
 7

	)

607 
	#PT_NUM
 8

	)

608 
	#PT_LOOS
 0x60000000

	)

609 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

610 
	#PT_GNU_STACK
 0x6474e551

	)

611 
	#PT_GNU_RELRO
 0x6474e552

	)

612 
	#PT_LOSUNW
 0x6fffffÁ

	)

613 
	#PT_SUNWBSS
 0x6fffffÁ

	)

614 
	#PT_SUNWSTACK
 0x6ffffffb

	)

615 
	#PT_HISUNW
 0x6fffffff

	)

616 
	#PT_HIOS
 0x6ffffff‡

	)

617 
	#PT_LOPROC
 0x70000000

	)

618 
	#PT_HIPROC
 0x7ffffff‡

	)

622 
	#PF_X
 (1 << 0Ë

	)

623 
	#PF_W
 (1 << 1Ë

	)

624 
	#PF_R
 (1 << 2Ë

	)

625 
	#PF_MASKOS
 0x0ff00000

	)

626 
	#PF_MASKPROC
 0xf0000000

	)

630 
	#NT_PRSTATUS
 1

	)

631 
	#NT_FPREGSET
 2

	)

632 
	#NT_PRPSINFO
 3

	)

633 
	#NT_PRXREG
 4

	)

634 
	#NT_TASKSTRUCT
 4

	)

635 
	#NT_PLATFORM
 5

	)

636 
	#NT_AUXV
 6

	)

637 
	#NT_GWINDOWS
 7

	)

638 
	#NT_ASRS
 8

	)

639 
	#NT_PSTATUS
 10

	)

640 
	#NT_PSINFO
 13

	)

641 
	#NT_PRCRED
 14

	)

642 
	#NT_UTSNAME
 15

	)

643 
	#NT_LWPSTATUS
 16

	)

644 
	#NT_LWPSINFO
 17

	)

645 
	#NT_PRFPXREG
 20

	)

646 
	#NT_SIGINFO
 0x53494749

	)

648 
	#NT_FILE
 0x46494c45

	)

650 
	#NT_PRXFPREG
 0x46e62b7‡

	)

651 
	#NT_PPC_VMX
 0x100

	)

652 
	#NT_PPC_SPE
 0x101

	)

653 
	#NT_PPC_VSX
 0x102

	)

654 
	#NT_386_TLS
 0x200

	)

655 
	#NT_386_IOPERM
 0x201

	)

656 
	#NT_X86_XSTATE
 0x202

	)

657 
	#NT_S390_HIGH_GPRS
 0x300

	)

658 
	#NT_S390_TIMER
 0x301

	)

659 
	#NT_S390_TODCMP
 0x302

	)

660 
	#NT_S390_TODPREG
 0x303

	)

661 
	#NT_S390_CTRS
 0x304

	)

662 
	#NT_S390_PREFIX
 0x305

	)

663 
	#NT_S390_LAST_BREAK
 0x306

	)

664 
	#NT_S390_SYSTEM_CALL
 0x307

	)

665 
	#NT_S390_TDB
 0x308

	)

666 
	#NT_ARM_VFP
 0x400

	)

667 
	#NT_ARM_TLS
 0x401

	)

668 
	#NT_ARM_HW_BREAK
 0x402

	)

669 
	#NT_ARM_HW_WATCH
 0x403

	)

673 
	#NT_VERSION
 1

	)

680 
Elf32_Sw‹d
 
	md_èg
;

683 
Elf32_W‹d
 
	md_vÆ
;

684 
Elf32_Addr
 
	md_±r
;

685 } 
	md_un
;

686 } 
	tElf32_Dyn
;

690 
Elf64_Sxw‹d
 
	md_èg
;

693 
Elf64_Xw‹d
 
	md_vÆ
;

694 
Elf64_Addr
 
	md_±r
;

695 } 
	md_un
;

696 } 
	tElf64_Dyn
;

700 
	#DT_NULL
 0

	)

701 
	#DT_NEEDED
 1

	)

702 
	#DT_PLTRELSZ
 2

	)

703 
	#DT_PLTGOT
 3

	)

704 
	#DT_HASH
 4

	)

705 
	#DT_STRTAB
 5

	)

706 
	#DT_SYMTAB
 6

	)

707 
	#DT_RELA
 7

	)

708 
	#DT_RELASZ
 8

	)

709 
	#DT_RELAENT
 9

	)

710 
	#DT_STRSZ
 10

	)

711 
	#DT_SYMENT
 11

	)

712 
	#DT_INIT
 12

	)

713 
	#DT_FINI
 13

	)

714 
	#DT_SONAME
 14

	)

715 
	#DT_RPATH
 15

	)

716 
	#DT_SYMBOLIC
 16

	)

717 
	#DT_REL
 17

	)

718 
	#DT_RELSZ
 18

	)

719 
	#DT_RELENT
 19

	)

720 
	#DT_PLTREL
 20

	)

721 
	#DT_DEBUG
 21

	)

722 
	#DT_TEXTREL
 22

	)

723 
	#DT_JMPREL
 23

	)

724 
	#DT_BIND_NOW
 24

	)

725 
	#DT_INIT_ARRAY
 25

	)

726 
	#DT_FINI_ARRAY
 26

	)

727 
	#DT_INIT_ARRAYSZ
 27

	)

728 
	#DT_FINI_ARRAYSZ
 28

	)

729 
	#DT_RUNPATH
 29

	)

730 
	#DT_FLAGS
 30

	)

731 
	#DT_ENCODING
 32

	)

732 
	#DT_PREINIT_ARRAY
 32

	)

733 
	#DT_PREINIT_ARRAYSZ
 33

	)

734 
	#DT_NUM
 34

	)

735 
	#DT_LOOS
 0x6000000d

	)

736 
	#DT_HIOS
 0x6ffff000

	)

737 
	#DT_LOPROC
 0x70000000

	)

738 
	#DT_HIPROC
 0x7ffffff‡

	)

739 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

744 
	#DT_VALRNGLO
 0x6ffffd00

	)

745 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

746 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

747 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

748 
	#DT_CHECKSUM
 0x6ffffdf8

	)

749 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

750 
	#DT_MOVEENT
 0x6ffffdÁ

	)

751 
	#DT_MOVESZ
 0x6ffffdfb

	)

752 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

753 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

755 
	#DT_SYMINSZ
 0x6ffffd„

	)

756 
	#DT_SYMINENT
 0x6ffffdf‡

	)

757 
	#DT_VALRNGHI
 0x6ffffdff

	)

758 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

759 
	#DT_VALNUM
 12

	)

766 
	#DT_ADDRRNGLO
 0x6fff„00

	)

767 
	#DT_GNU_HASH
 0x6fff„f5

	)

768 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

769 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

770 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

771 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

772 
	#DT_CONFIG
 0x6fff„Á

	)

773 
	#DT_DEPAUDIT
 0x6fff„fb

	)

774 
	#DT_AUDIT
 0x6fff„f¯

	)

775 
	#DT_PLTPAD
 0x6fff„fd

	)

776 
	#DT_MOVETAB
 0x6fff„„

	)

777 
	#DT_SYMINFO
 0x6fff„f‡

	)

778 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

779 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

780 
	#DT_ADDRNUM
 11

	)

784 
	#DT_VERSYM
 0x6ffffff0

	)

786 
	#DT_RELACOUNT
 0x6ffffff9

	)

787 
	#DT_RELCOUNT
 0x6fffffÁ

	)

790 
	#DT_FLAGS_1
 0x6ffffffb

	)

791 
	#DT_VERDEF
 0x6ffffff¯

	)

793 
	#DT_VERDEFNUM
 0x6ffffffd

	)

794 
	#DT_VERNEED
 0x6fffff„

	)

796 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

797 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

798 
	#DT_VERSIONTAGNUM
 16

	)

802 
	#DT_AUXILIARY
 0x7ffffffd

	)

803 
	#DT_FILTER
 0x7ffffff‡

	)

804 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

805 
	#DT_EXTRANUM
 3

	)

808 
	#DF_ORIGIN
 0x00000001

	)

809 
	#DF_SYMBOLIC
 0x00000002

	)

810 
	#DF_TEXTREL
 0x00000004

	)

811 
	#DF_BIND_NOW
 0x00000008

	)

812 
	#DF_STATIC_TLS
 0x00000010

	)

816 
	#DF_1_NOW
 0x00000001

	)

817 
	#DF_1_GLOBAL
 0x00000002

	)

818 
	#DF_1_GROUP
 0x00000004

	)

819 
	#DF_1_NODELETE
 0x00000008

	)

820 
	#DF_1_LOADFLTR
 0x00000010

	)

821 
	#DF_1_INITFIRST
 0x00000020

	)

822 
	#DF_1_NOOPEN
 0x00000040

	)

823 
	#DF_1_ORIGIN
 0x00000080

	)

824 
	#DF_1_DIRECT
 0x00000100

	)

825 
	#DF_1_TRANS
 0x00000200

	)

826 
	#DF_1_INTERPOSE
 0x00000400

	)

827 
	#DF_1_NODEFLIB
 0x00000800

	)

828 
	#DF_1_NODUMP
 0x00001000

	)

829 
	#DF_1_CONFALT
 0x00002000

	)

830 
	#DF_1_ENDFILTEE
 0x00004000

	)

831 
	#DF_1_DISPRELDNE
 0x00008000

	)

832 
	#DF_1_DISPRELPND
 0x00010000

	)

833 
	#DF_1_NODIRECT
 0x00020000

	)

834 
	#DF_1_IGNMULDEF
 0x00040000

	)

835 
	#DF_1_NOKSYMS
 0x00080000

	)

836 
	#DF_1_NOHDR
 0x00100000

	)

837 
	#DF_1_EDITED
 0x00200000

	)

838 
	#DF_1_NORELOC
 0x00400000

	)

839 
	#DF_1_SYMINTPOSE
 0x00800000

	)

840 
	#DF_1_GLOBAUDIT
 0x01000000

	)

841 
	#DF_1_SINGLETON
 0x02000000

	)

844 
	#DTF_1_PARINIT
 0x00000001

	)

845 
	#DTF_1_CONFEXP
 0x00000002

	)

848 
	#DF_P1_LAZYLOAD
 0x00000001

	)

849 
	#DF_P1_GROUPPERM
 0x00000002

	)

856 
Elf32_HÆf
 
	mvd_vîsi⁄
;

857 
Elf32_HÆf
 
	mvd_Êags
;

858 
Elf32_HÆf
 
	mvd_ndx
;

859 
Elf32_HÆf
 
	mvd_˙t
;

860 
Elf32_W‹d
 
	mvd_hash
;

861 
Elf32_W‹d
 
	mvd_aux
;

862 
Elf32_W‹d
 
	mvd_√xt
;

864 } 
	tElf32_Vîdef
;

868 
Elf64_HÆf
 
	mvd_vîsi⁄
;

869 
Elf64_HÆf
 
	mvd_Êags
;

870 
Elf64_HÆf
 
	mvd_ndx
;

871 
Elf64_HÆf
 
	mvd_˙t
;

872 
Elf64_W‹d
 
	mvd_hash
;

873 
Elf64_W‹d
 
	mvd_aux
;

874 
Elf64_W‹d
 
	mvd_√xt
;

876 } 
	tElf64_Vîdef
;

880 
	#VER_DEF_NONE
 0

	)

881 
	#VER_DEF_CURRENT
 1

	)

882 
	#VER_DEF_NUM
 2

	)

885 
	#VER_FLG_BASE
 0x1

	)

886 
	#VER_FLG_WEAK
 0x2

	)

889 
	#VER_NDX_LOCAL
 0

	)

890 
	#VER_NDX_GLOBAL
 1

	)

891 
	#VER_NDX_LORESERVE
 0xff00

	)

892 
	#VER_NDX_ELIMINATE
 0xff01

	)

898 
Elf32_W‹d
 
	mvda_«me
;

899 
Elf32_W‹d
 
	mvda_√xt
;

901 } 
	tElf32_Vîdaux
;

905 
Elf64_W‹d
 
	mvda_«me
;

906 
Elf64_W‹d
 
	mvda_√xt
;

908 } 
	tElf64_Vîdaux
;

915 
Elf32_HÆf
 
	mvn_vîsi⁄
;

916 
Elf32_HÆf
 
	mvn_˙t
;

917 
Elf32_W‹d
 
	mvn_fûe
;

919 
Elf32_W‹d
 
	mvn_aux
;

920 
Elf32_W‹d
 
	mvn_√xt
;

922 } 
	tElf32_Vî√ed
;

926 
Elf64_HÆf
 
	mvn_vîsi⁄
;

927 
Elf64_HÆf
 
	mvn_˙t
;

928 
Elf64_W‹d
 
	mvn_fûe
;

930 
Elf64_W‹d
 
	mvn_aux
;

931 
Elf64_W‹d
 
	mvn_√xt
;

933 } 
	tElf64_Vî√ed
;

937 
	#VER_NEED_NONE
 0

	)

938 
	#VER_NEED_CURRENT
 1

	)

939 
	#VER_NEED_NUM
 2

	)

945 
Elf32_W‹d
 
	mv«_hash
;

946 
Elf32_HÆf
 
	mv«_Êags
;

947 
Elf32_HÆf
 
	mv«_Ÿhî
;

948 
Elf32_W‹d
 
	mv«_«me
;

949 
Elf32_W‹d
 
	mv«_√xt
;

951 } 
	tElf32_Vî«ux
;

955 
Elf64_W‹d
 
	mv«_hash
;

956 
Elf64_HÆf
 
	mv«_Êags
;

957 
Elf64_HÆf
 
	mv«_Ÿhî
;

958 
Elf64_W‹d
 
	mv«_«me
;

959 
Elf64_W‹d
 
	mv«_√xt
;

961 } 
	tElf64_Vî«ux
;

965 
	#VER_FLG_WEAK
 0x2

	)

979 
uöt32_t
 
	ma_ty≥
;

982 
uöt32_t
 
	ma_vÆ
;

986 } 
	ma_un
;

987 } 
	tElf32_auxv_t
;

991 
uöt64_t
 
	ma_ty≥
;

994 
uöt64_t
 
	ma_vÆ
;

998 } 
	ma_un
;

999 } 
	tElf64_auxv_t
;

1001 
	~<bôs/auxv.h
>

1007 
Elf32_W‹d
 
	mn_«mesz
;

1008 
Elf32_W‹d
 
	mn_descsz
;

1009 
Elf32_W‹d
 
	mn_ty≥
;

1010 } 
	tElf32_Nhdr
;

1014 
Elf64_W‹d
 
	mn_«mesz
;

1015 
Elf64_W‹d
 
	mn_descsz
;

1016 
Elf64_W‹d
 
	mn_ty≥
;

1017 } 
	tElf64_Nhdr
;

1022 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1025 
	#ELF_NOTE_GNU
 "GNU"

	)

1031 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1042 
	#NT_GNU_ABI_TAG
 1

	)

1043 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1047 
	#ELF_NOTE_OS_LINUX
 0

	)

1048 
	#ELF_NOTE_OS_GNU
 1

	)

1049 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1050 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1058 
	#NT_GNU_HWCAP
 2

	)

1062 
	#NT_GNU_BUILD_ID
 3

	)

1065 
	#NT_GNU_GOLD_VERSION
 4

	)

1071 
Elf32_Xw‹d
 
	mm_vÆue
;

1072 
Elf32_W‹d
 
	mm_öfo
;

1073 
Elf32_W‹d
 
	mm_poff£t
;

1074 
Elf32_HÆf
 
	mm_ª≥©
;

1075 
Elf32_HÆf
 
	mm_°ride
;

1076 } 
	tElf32_Move
;

1080 
Elf64_Xw‹d
 
	mm_vÆue
;

1081 
Elf64_Xw‹d
 
	mm_öfo
;

1082 
Elf64_Xw‹d
 
	mm_poff£t
;

1083 
Elf64_HÆf
 
	mm_ª≥©
;

1084 
Elf64_HÆf
 
	mm_°ride
;

1085 } 
	tElf64_Move
;

1088 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1089 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1090 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1092 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1093 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1094 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1100 
	#EF_CPU32
 0x00810000

	)

1104 
	#R_68K_NONE
 0

	)

1105 
	#R_68K_32
 1

	)

1106 
	#R_68K_16
 2

	)

1107 
	#R_68K_8
 3

	)

1108 
	#R_68K_PC32
 4

	)

1109 
	#R_68K_PC16
 5

	)

1110 
	#R_68K_PC8
 6

	)

1111 
	#R_68K_GOT32
 7

	)

1112 
	#R_68K_GOT16
 8

	)

1113 
	#R_68K_GOT8
 9

	)

1114 
	#R_68K_GOT32O
 10

	)

1115 
	#R_68K_GOT16O
 11

	)

1116 
	#R_68K_GOT8O
 12

	)

1117 
	#R_68K_PLT32
 13

	)

1118 
	#R_68K_PLT16
 14

	)

1119 
	#R_68K_PLT8
 15

	)

1120 
	#R_68K_PLT32O
 16

	)

1121 
	#R_68K_PLT16O
 17

	)

1122 
	#R_68K_PLT8O
 18

	)

1123 
	#R_68K_COPY
 19

	)

1124 
	#R_68K_GLOB_DAT
 20

	)

1125 
	#R_68K_JMP_SLOT
 21

	)

1126 
	#R_68K_RELATIVE
 22

	)

1127 
	#R_68K_TLS_GD32
 25

	)

1128 
	#R_68K_TLS_GD16
 26

	)

1129 
	#R_68K_TLS_GD8
 27

	)

1130 
	#R_68K_TLS_LDM32
 28

	)

1131 
	#R_68K_TLS_LDM16
 29

	)

1132 
	#R_68K_TLS_LDM8
 30

	)

1133 
	#R_68K_TLS_LDO32
 31

	)

1134 
	#R_68K_TLS_LDO16
 32

	)

1135 
	#R_68K_TLS_LDO8
 33

	)

1136 
	#R_68K_TLS_IE32
 34

	)

1137 
	#R_68K_TLS_IE16
 35

	)

1138 
	#R_68K_TLS_IE8
 36

	)

1139 
	#R_68K_TLS_LE32
 37

	)

1141 
	#R_68K_TLS_LE16
 38

	)

1143 
	#R_68K_TLS_LE8
 39

	)

1145 
	#R_68K_TLS_DTPMOD32
 40

	)

1146 
	#R_68K_TLS_DTPREL32
 41

	)

1147 
	#R_68K_TLS_TPREL32
 42

	)

1149 
	#R_68K_NUM
 43

	)

1155 
	#R_386_NONE
 0

	)

1156 
	#R_386_32
 1

	)

1157 
	#R_386_PC32
 2

	)

1158 
	#R_386_GOT32
 3

	)

1159 
	#R_386_PLT32
 4

	)

1160 
	#R_386_COPY
 5

	)

1161 
	#R_386_GLOB_DAT
 6

	)

1162 
	#R_386_JMP_SLOT
 7

	)

1163 
	#R_386_RELATIVE
 8

	)

1164 
	#R_386_GOTOFF
 9

	)

1165 
	#R_386_GOTPC
 10

	)

1166 
	#R_386_32PLT
 11

	)

1167 
	#R_386_TLS_TPOFF
 14

	)

1168 
	#R_386_TLS_IE
 15

	)

1170 
	#R_386_TLS_GOTIE
 16

	)

1172 
	#R_386_TLS_LE
 17

	)

1174 
	#R_386_TLS_GD
 18

	)

1176 
	#R_386_TLS_LDM
 19

	)

1179 
	#R_386_16
 20

	)

1180 
	#R_386_PC16
 21

	)

1181 
	#R_386_8
 22

	)

1182 
	#R_386_PC8
 23

	)

1183 
	#R_386_TLS_GD_32
 24

	)

1185 
	#R_386_TLS_GD_PUSH
 25

	)

1186 
	#R_386_TLS_GD_CALL
 26

	)

1188 
	#R_386_TLS_GD_POP
 27

	)

1189 
	#R_386_TLS_LDM_32
 28

	)

1191 
	#R_386_TLS_LDM_PUSH
 29

	)

1192 
	#R_386_TLS_LDM_CALL
 30

	)

1194 
	#R_386_TLS_LDM_POP
 31

	)

1195 
	#R_386_TLS_LDO_32
 32

	)

1196 
	#R_386_TLS_IE_32
 33

	)

1198 
	#R_386_TLS_LE_32
 34

	)

1200 
	#R_386_TLS_DTPMOD32
 35

	)

1201 
	#R_386_TLS_DTPOFF32
 36

	)

1202 
	#R_386_TLS_TPOFF32
 37

	)

1203 
	#R_386_SIZE32
 38

	)

1204 
	#R_386_TLS_GOTDESC
 39

	)

1205 
	#R_386_TLS_DESC_CALL
 40

	)

1208 
	#R_386_TLS_DESC
 41

	)

1212 
	#R_386_IRELATIVE
 42

	)

1214 
	#R_386_NUM
 43

	)

1220 
	#STT_SPARC_REGISTER
 13

	)

1224 
	#EF_SPARCV9_MM
 3

	)

1225 
	#EF_SPARCV9_TSO
 0

	)

1226 
	#EF_SPARCV9_PSO
 1

	)

1227 
	#EF_SPARCV9_RMO
 2

	)

1228 
	#EF_SPARC_LEDATA
 0x800000

	)

1229 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1230 
	#EF_SPARC_32PLUS
 0x000100

	)

1231 
	#EF_SPARC_SUN_US1
 0x000200

	)

1232 
	#EF_SPARC_HAL_R1
 0x000400

	)

1233 
	#EF_SPARC_SUN_US3
 0x000800

	)

1237 
	#R_SPARC_NONE
 0

	)

1238 
	#R_SPARC_8
 1

	)

1239 
	#R_SPARC_16
 2

	)

1240 
	#R_SPARC_32
 3

	)

1241 
	#R_SPARC_DISP8
 4

	)

1242 
	#R_SPARC_DISP16
 5

	)

1243 
	#R_SPARC_DISP32
 6

	)

1244 
	#R_SPARC_WDISP30
 7

	)

1245 
	#R_SPARC_WDISP22
 8

	)

1246 
	#R_SPARC_HI22
 9

	)

1247 
	#R_SPARC_22
 10

	)

1248 
	#R_SPARC_13
 11

	)

1249 
	#R_SPARC_LO10
 12

	)

1250 
	#R_SPARC_GOT10
 13

	)

1251 
	#R_SPARC_GOT13
 14

	)

1252 
	#R_SPARC_GOT22
 15

	)

1253 
	#R_SPARC_PC10
 16

	)

1254 
	#R_SPARC_PC22
 17

	)

1255 
	#R_SPARC_WPLT30
 18

	)

1256 
	#R_SPARC_COPY
 19

	)

1257 
	#R_SPARC_GLOB_DAT
 20

	)

1258 
	#R_SPARC_JMP_SLOT
 21

	)

1259 
	#R_SPARC_RELATIVE
 22

	)

1260 
	#R_SPARC_UA32
 23

	)

1264 
	#R_SPARC_PLT32
 24

	)

1265 
	#R_SPARC_HIPLT22
 25

	)

1266 
	#R_SPARC_LOPLT10
 26

	)

1267 
	#R_SPARC_PCPLT32
 27

	)

1268 
	#R_SPARC_PCPLT22
 28

	)

1269 
	#R_SPARC_PCPLT10
 29

	)

1270 
	#R_SPARC_10
 30

	)

1271 
	#R_SPARC_11
 31

	)

1272 
	#R_SPARC_64
 32

	)

1273 
	#R_SPARC_OLO10
 33

	)

1274 
	#R_SPARC_HH22
 34

	)

1275 
	#R_SPARC_HM10
 35

	)

1276 
	#R_SPARC_LM22
 36

	)

1277 
	#R_SPARC_PC_HH22
 37

	)

1278 
	#R_SPARC_PC_HM10
 38

	)

1279 
	#R_SPARC_PC_LM22
 39

	)

1280 
	#R_SPARC_WDISP16
 40

	)

1281 
	#R_SPARC_WDISP19
 41

	)

1282 
	#R_SPARC_GLOB_JMP
 42

	)

1283 
	#R_SPARC_7
 43

	)

1284 
	#R_SPARC_5
 44

	)

1285 
	#R_SPARC_6
 45

	)

1286 
	#R_SPARC_DISP64
 46

	)

1287 
	#R_SPARC_PLT64
 47

	)

1288 
	#R_SPARC_HIX22
 48

	)

1289 
	#R_SPARC_LOX10
 49

	)

1290 
	#R_SPARC_H44
 50

	)

1291 
	#R_SPARC_M44
 51

	)

1292 
	#R_SPARC_L44
 52

	)

1293 
	#R_SPARC_REGISTER
 53

	)

1294 
	#R_SPARC_UA64
 54

	)

1295 
	#R_SPARC_UA16
 55

	)

1296 
	#R_SPARC_TLS_GD_HI22
 56

	)

1297 
	#R_SPARC_TLS_GD_LO10
 57

	)

1298 
	#R_SPARC_TLS_GD_ADD
 58

	)

1299 
	#R_SPARC_TLS_GD_CALL
 59

	)

1300 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1301 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1302 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1303 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1304 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1305 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1306 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1307 
	#R_SPARC_TLS_IE_HI22
 67

	)

1308 
	#R_SPARC_TLS_IE_LO10
 68

	)

1309 
	#R_SPARC_TLS_IE_LD
 69

	)

1310 
	#R_SPARC_TLS_IE_LDX
 70

	)

1311 
	#R_SPARC_TLS_IE_ADD
 71

	)

1312 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1313 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1314 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1315 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1316 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1317 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1318 
	#R_SPARC_TLS_TPOFF32
 78

	)

1319 
	#R_SPARC_TLS_TPOFF64
 79

	)

1320 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1321 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1322 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1323 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1324 
	#R_SPARC_GOTDATA_OP
 84

	)

1325 
	#R_SPARC_H34
 85

	)

1326 
	#R_SPARC_SIZE32
 86

	)

1327 
	#R_SPARC_SIZE64
 87

	)

1328 
	#R_SPARC_WDISP10
 88

	)

1329 
	#R_SPARC_JMP_IREL
 248

	)

1330 
	#R_SPARC_IRELATIVE
 249

	)

1331 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1332 
	#R_SPARC_GNU_VTENTRY
 251

	)

1333 
	#R_SPARC_REV32
 252

	)

1335 
	#R_SPARC_NUM
 253

	)

1339 
	#DT_SPARC_REGISTER
 0x70000001

	)

1340 
	#DT_SPARC_NUM
 2

	)

1346 
	#EF_MIPS_NOREORDER
 1

	)

1347 
	#EF_MIPS_PIC
 2

	)

1348 
	#EF_MIPS_CPIC
 4

	)

1349 
	#EF_MIPS_XGOT
 8

	)

1350 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1351 
	#EF_MIPS_ABI2
 32

	)

1352 
	#EF_MIPS_ABI_ON32
 64

	)

1353 
	#EF_MIPS_FP64
 512

	)

1354 
	#EF_MIPS_NAN2008
 1024

	)

1355 
	#EF_MIPS_ARCH
 0xf0000000

	)

1359 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1360 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1361 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1362 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1363 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1364 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1365 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1366 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1367 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1371 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1372 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1373 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1374 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1375 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1376 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1377 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1381 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1382 
	#SHN_MIPS_TEXT
 0xff01

	)

1383 
	#SHN_MIPS_DATA
 0xff02

	)

1384 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1385 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1389 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1390 
	#SHT_MIPS_MSYM
 0x70000001

	)

1391 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1392 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1393 
	#SHT_MIPS_UCODE
 0x70000004

	)

1394 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1395 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1396 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1397 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1398 
	#SHT_MIPS_RELD
 0x70000009

	)

1399 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1400 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1401 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1402 
	#SHT_MIPS_SHDR
 0x70000010

	)

1403 
	#SHT_MIPS_FDESC
 0x70000011

	)

1404 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1405 
	#SHT_MIPS_DENSE
 0x70000013

	)

1406 
	#SHT_MIPS_PDESC
 0x70000014

	)

1407 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1408 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1409 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1410 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1411 
	#SHT_MIPS_LINE
 0x70000019

	)

1412 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1413 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1414 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1415 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1416 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1417 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1418 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1419 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1420 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1421 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1422 
	#SHT_MIPS_XLATE
 0x70000024

	)

1423 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1424 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1425 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1426 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1427 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1431 
	#SHF_MIPS_GPREL
 0x10000000

	)

1432 
	#SHF_MIPS_MERGE
 0x20000000

	)

1433 
	#SHF_MIPS_ADDR
 0x40000000

	)

1434 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1435 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1436 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1437 
	#SHF_MIPS_NAMES
 0x02000000

	)

1438 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1444 
	#STO_MIPS_DEFAULT
 0x0

	)

1445 
	#STO_MIPS_INTERNAL
 0x1

	)

1446 
	#STO_MIPS_HIDDEN
 0x2

	)

1447 
	#STO_MIPS_PROTECTED
 0x3

	)

1448 
	#STO_MIPS_PLT
 0x8

	)

1449 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1452 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1460 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1461 
Elf32_W‹d
 
	mgt_unu£d
;

1462 } 
	mgt_hódî
;

1465 
Elf32_W‹d
 
	mgt_g_vÆue
;

1466 
Elf32_W‹d
 
	mgt_byãs
;

1467 } 
	mgt_íåy
;

1468 } 
	tElf32_g±ab
;

1474 
Elf32_W‹d
 
	mri_g¥mask
;

1475 
Elf32_W‹d
 
	mri_˝rmask
[4];

1476 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1477 } 
	tElf32_RegInfo
;

1483 
	mköd
;

1485 
	msize
;

1486 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1488 
Elf32_W‹d
 
	möfo
;

1489 } 
	tElf_O±i⁄s
;

1493 
	#ODK_NULL
 0

	)

1494 
	#ODK_REGINFO
 1

	)

1495 
	#ODK_EXCEPTIONS
 2

	)

1496 
	#ODK_PAD
 3

	)

1497 
	#ODK_HWPATCH
 4

	)

1498 
	#ODK_FILL
 5

	)

1499 
	#ODK_TAGS
 6

	)

1500 
	#ODK_HWAND
 7

	)

1501 
	#ODK_HWOR
 8

	)

1505 
	#OEX_FPU_MIN
 0x1‡

	)

1506 
	#OEX_FPU_MAX
 0x1f00

	)

1507 
	#OEX_PAGE0
 0x10000

	)

1508 
	#OEX_SMM
 0x20000

	)

1509 
	#OEX_FPDBUG
 0x40000

	)

1510 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1511 
	#OEX_DISMISS
 0x80000

	)

1513 
	#OEX_FPU_INVAL
 0x10

	)

1514 
	#OEX_FPU_DIV0
 0x08

	)

1515 
	#OEX_FPU_OFLO
 0x04

	)

1516 
	#OEX_FPU_UFLO
 0x02

	)

1517 
	#OEX_FPU_INEX
 0x01

	)

1521 
	#OHW_R4KEOP
 0x1

	)

1522 
	#OHW_R8KPFETCH
 0x2

	)

1523 
	#OHW_R5KEOP
 0x4

	)

1524 
	#OHW_R5KCVTL
 0x8

	)

1526 
	#OPAD_PREFIX
 0x1

	)

1527 
	#OPAD_POSTFIX
 0x2

	)

1528 
	#OPAD_SYMBOL
 0x4

	)

1534 
Elf32_W‹d
 
	mhwp_Êags1
;

1535 
Elf32_W‹d
 
	mhwp_Êags2
;

1536 } 
	tElf_O±i⁄s_Hw
;

1540 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1541 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1545 
	#R_MIPS_NONE
 0

	)

1546 
	#R_MIPS_16
 1

	)

1547 
	#R_MIPS_32
 2

	)

1548 
	#R_MIPS_REL32
 3

	)

1549 
	#R_MIPS_26
 4

	)

1550 
	#R_MIPS_HI16
 5

	)

1551 
	#R_MIPS_LO16
 6

	)

1552 
	#R_MIPS_GPREL16
 7

	)

1553 
	#R_MIPS_LITERAL
 8

	)

1554 
	#R_MIPS_GOT16
 9

	)

1555 
	#R_MIPS_PC16
 10

	)

1556 
	#R_MIPS_CALL16
 11

	)

1557 
	#R_MIPS_GPREL32
 12

	)

1559 
	#R_MIPS_SHIFT5
 16

	)

1560 
	#R_MIPS_SHIFT6
 17

	)

1561 
	#R_MIPS_64
 18

	)

1562 
	#R_MIPS_GOT_DISP
 19

	)

1563 
	#R_MIPS_GOT_PAGE
 20

	)

1564 
	#R_MIPS_GOT_OFST
 21

	)

1565 
	#R_MIPS_GOT_HI16
 22

	)

1566 
	#R_MIPS_GOT_LO16
 23

	)

1567 
	#R_MIPS_SUB
 24

	)

1568 
	#R_MIPS_INSERT_A
 25

	)

1569 
	#R_MIPS_INSERT_B
 26

	)

1570 
	#R_MIPS_DELETE
 27

	)

1571 
	#R_MIPS_HIGHER
 28

	)

1572 
	#R_MIPS_HIGHEST
 29

	)

1573 
	#R_MIPS_CALL_HI16
 30

	)

1574 
	#R_MIPS_CALL_LO16
 31

	)

1575 
	#R_MIPS_SCN_DISP
 32

	)

1576 
	#R_MIPS_REL16
 33

	)

1577 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1578 
	#R_MIPS_PJUMP
 35

	)

1579 
	#R_MIPS_RELGOT
 36

	)

1580 
	#R_MIPS_JALR
 37

	)

1581 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1582 
	#R_MIPS_TLS_DTPREL32
 39

	)

1583 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1584 
	#R_MIPS_TLS_DTPREL64
 41

	)

1585 
	#R_MIPS_TLS_GD
 42

	)

1586 
	#R_MIPS_TLS_LDM
 43

	)

1587 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1588 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1589 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1590 
	#R_MIPS_TLS_TPREL32
 47

	)

1591 
	#R_MIPS_TLS_TPREL64
 48

	)

1592 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1593 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1594 
	#R_MIPS_GLOB_DAT
 51

	)

1595 
	#R_MIPS_COPY
 126

	)

1596 
	#R_MIPS_JUMP_SLOT
 127

	)

1598 
	#R_MIPS_NUM
 128

	)

1602 
	#PT_MIPS_REGINFO
 0x70000000

	)

1603 
	#PT_MIPS_RTPROC
 0x70000001

	)

1604 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1609 
	#PF_MIPS_LOCAL
 0x10000000

	)

1613 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1614 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1615 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1616 
	#DT_MIPS_IVERSION
 0x70000004

	)

1617 
	#DT_MIPS_FLAGS
 0x70000005

	)

1618 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1619 
	#DT_MIPS_MSYM
 0x70000007

	)

1620 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1621 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1622 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1623 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1624 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1625 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1626 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1627 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1628 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1629 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1630 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1631 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1633 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1634 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1636 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1637 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1639 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1641 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1643 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1645 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1647 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1648 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1649 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1650 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1651 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1652 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1653 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1654 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1655 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1656 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1657 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1658 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1660 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1662 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1663 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1664 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1666 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1670 
	#DT_MIPS_RWPLT
 0x70000034

	)

1674 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1675 
	#DT_MIPS_NUM
 0x36

	)

1679 
	#RHF_NONE
 0

	)

1680 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1681 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1682 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1683 
	#RHF_NO_MOVE
 (1 << 3)

	)

1684 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1685 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1686 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1687 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1688 
	#RHF_PIXIE
 (1 << 8)

	)

1689 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1690 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1691 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1692 
	#RHF_CORD
 (1 << 12)

	)

1693 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1694 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1700 
Elf32_W‹d
 
	ml_«me
;

1701 
Elf32_W‹d
 
	ml_time_°amp
;

1702 
Elf32_W‹d
 
	ml_checksum
;

1703 
Elf32_W‹d
 
	ml_vîsi⁄
;

1704 
Elf32_W‹d
 
	ml_Êags
;

1705 } 
	tElf32_Lib
;

1709 
Elf64_W‹d
 
	ml_«me
;

1710 
Elf64_W‹d
 
	ml_time_°amp
;

1711 
Elf64_W‹d
 
	ml_checksum
;

1712 
Elf64_W‹d
 
	ml_vîsi⁄
;

1713 
Elf64_W‹d
 
	ml_Êags
;

1714 } 
	tElf64_Lib
;

1719 
	#LL_NONE
 0

	)

1720 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1721 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1722 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1723 
	#LL_EXPORTS
 (1 << 3)

	)

1724 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1725 
	#LL_DELTA
 (1 << 5)

	)

1729 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1734 
Elf32_HÆf
 
	mvîsi⁄
;

1736 
	miß_Àvñ
;

1738 
	miß_ªv
;

1740 
	mg¥_size
;

1742 
	m˝r1_size
;

1744 
	m˝r2_size
;

1746 
	mÂ_abi
;

1748 
Elf32_W‹d
 
	miß_ext
;

1750 
Elf32_W‹d
 
	ma£s
;

1752 
Elf32_W‹d
 
	mÊags1
;

1753 
Elf32_W‹d
 
	mÊags2
;

1754 } 
	tElf_MIPS_ABIFœgs_v0
;

1758 
	#MIPS_AFL_REG_NONE
 0x00

	)

1759 
	#MIPS_AFL_REG_32
 0x01

	)

1760 
	#MIPS_AFL_REG_64
 0x02

	)

1761 
	#MIPS_AFL_REG_128
 0x03

	)

1765 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1766 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1767 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1768 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1769 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1770 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1771 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1772 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1773 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1774 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1775 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1776 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1777 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1778 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1782 
	#MIPS_AFL_EXT_XLR
 1

	)

1783 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1784 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1785 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1786 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1787 
	#MIPS_AFL_EXT_5900
 6

	)

1788 
	#MIPS_AFL_EXT_4650
 7

	)

1789 
	#MIPS_AFL_EXT_4010
 8

	)

1790 
	#MIPS_AFL_EXT_4100
 9

	)

1791 
	#MIPS_AFL_EXT_3900
 10

	)

1792 
	#MIPS_AFL_EXT_10000
 11

	)

1793 
	#MIPS_AFL_EXT_SB1
 12

	)

1794 
	#MIPS_AFL_EXT_4111
 13

	)

1795 
	#MIPS_AFL_EXT_4120
 14

	)

1796 
	#MIPS_AFL_EXT_5400
 15

	)

1797 
	#MIPS_AFL_EXT_5500
 16

	)

1798 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1799 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1802 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1808 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

1810 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

1812 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

1814 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

1816 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

1818 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

1820 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

1822 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

1824 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

1831 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1832 
	#EF_PARISC_EXT
 0x00020000

	)

1833 
	#EF_PARISC_LSB
 0x00040000

	)

1834 
	#EF_PARISC_WIDE
 0x00080000

	)

1835 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1837 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1838 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1842 
	#EFA_PARISC_1_0
 0x020b

	)

1843 
	#EFA_PARISC_1_1
 0x0210

	)

1844 
	#EFA_PARISC_2_0
 0x0214

	)

1848 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1850 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1854 
	#SHT_PARISC_EXT
 0x70000000

	)

1855 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1856 
	#SHT_PARISC_DOC
 0x70000002

	)

1860 
	#SHF_PARISC_SHORT
 0x20000000

	)

1861 
	#SHF_PARISC_HUGE
 0x40000000

	)

1862 
	#SHF_PARISC_SBP
 0x80000000

	)

1866 
	#STT_PARISC_MILLICODE
 13

	)

1868 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1869 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1873 
	#R_PARISC_NONE
 0

	)

1874 
	#R_PARISC_DIR32
 1

	)

1875 
	#R_PARISC_DIR21L
 2

	)

1876 
	#R_PARISC_DIR17R
 3

	)

1877 
	#R_PARISC_DIR17F
 4

	)

1878 
	#R_PARISC_DIR14R
 6

	)

1879 
	#R_PARISC_PCREL32
 9

	)

1880 
	#R_PARISC_PCREL21L
 10

	)

1881 
	#R_PARISC_PCREL17R
 11

	)

1882 
	#R_PARISC_PCREL17F
 12

	)

1883 
	#R_PARISC_PCREL14R
 14

	)

1884 
	#R_PARISC_DPREL21L
 18

	)

1885 
	#R_PARISC_DPREL14R
 22

	)

1886 
	#R_PARISC_GPREL21L
 26

	)

1887 
	#R_PARISC_GPREL14R
 30

	)

1888 
	#R_PARISC_LTOFF21L
 34

	)

1889 
	#R_PARISC_LTOFF14R
 38

	)

1890 
	#R_PARISC_SECREL32
 41

	)

1891 
	#R_PARISC_SEGBASE
 48

	)

1892 
	#R_PARISC_SEGREL32
 49

	)

1893 
	#R_PARISC_PLTOFF21L
 50

	)

1894 
	#R_PARISC_PLTOFF14R
 54

	)

1895 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1896 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1897 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1898 
	#R_PARISC_FPTR64
 64

	)

1899 
	#R_PARISC_PLABEL32
 65

	)

1900 
	#R_PARISC_PLABEL21L
 66

	)

1901 
	#R_PARISC_PLABEL14R
 70

	)

1902 
	#R_PARISC_PCREL64
 72

	)

1903 
	#R_PARISC_PCREL22F
 74

	)

1904 
	#R_PARISC_PCREL14WR
 75

	)

1905 
	#R_PARISC_PCREL14DR
 76

	)

1906 
	#R_PARISC_PCREL16F
 77

	)

1907 
	#R_PARISC_PCREL16WF
 78

	)

1908 
	#R_PARISC_PCREL16DF
 79

	)

1909 
	#R_PARISC_DIR64
 80

	)

1910 
	#R_PARISC_DIR14WR
 83

	)

1911 
	#R_PARISC_DIR14DR
 84

	)

1912 
	#R_PARISC_DIR16F
 85

	)

1913 
	#R_PARISC_DIR16WF
 86

	)

1914 
	#R_PARISC_DIR16DF
 87

	)

1915 
	#R_PARISC_GPREL64
 88

	)

1916 
	#R_PARISC_GPREL14WR
 91

	)

1917 
	#R_PARISC_GPREL14DR
 92

	)

1918 
	#R_PARISC_GPREL16F
 93

	)

1919 
	#R_PARISC_GPREL16WF
 94

	)

1920 
	#R_PARISC_GPREL16DF
 95

	)

1921 
	#R_PARISC_LTOFF64
 96

	)

1922 
	#R_PARISC_LTOFF14WR
 99

	)

1923 
	#R_PARISC_LTOFF14DR
 100

	)

1924 
	#R_PARISC_LTOFF16F
 101

	)

1925 
	#R_PARISC_LTOFF16WF
 102

	)

1926 
	#R_PARISC_LTOFF16DF
 103

	)

1927 
	#R_PARISC_SECREL64
 104

	)

1928 
	#R_PARISC_SEGREL64
 112

	)

1929 
	#R_PARISC_PLTOFF14WR
 115

	)

1930 
	#R_PARISC_PLTOFF14DR
 116

	)

1931 
	#R_PARISC_PLTOFF16F
 117

	)

1932 
	#R_PARISC_PLTOFF16WF
 118

	)

1933 
	#R_PARISC_PLTOFF16DF
 119

	)

1934 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1935 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1936 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1937 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1938 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1939 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1940 
	#R_PARISC_LORESERVE
 128

	)

1941 
	#R_PARISC_COPY
 128

	)

1942 
	#R_PARISC_IPLT
 129

	)

1943 
	#R_PARISC_EPLT
 130

	)

1944 
	#R_PARISC_TPREL32
 153

	)

1945 
	#R_PARISC_TPREL21L
 154

	)

1946 
	#R_PARISC_TPREL14R
 158

	)

1947 
	#R_PARISC_LTOFF_TP21L
 162

	)

1948 
	#R_PARISC_LTOFF_TP14R
 166

	)

1949 
	#R_PARISC_LTOFF_TP14F
 167

	)

1950 
	#R_PARISC_TPREL64
 216

	)

1951 
	#R_PARISC_TPREL14WR
 219

	)

1952 
	#R_PARISC_TPREL14DR
 220

	)

1953 
	#R_PARISC_TPREL16F
 221

	)

1954 
	#R_PARISC_TPREL16WF
 222

	)

1955 
	#R_PARISC_TPREL16DF
 223

	)

1956 
	#R_PARISC_LTOFF_TP64
 224

	)

1957 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1958 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1959 
	#R_PARISC_LTOFF_TP16F
 229

	)

1960 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1961 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1962 
	#R_PARISC_GNU_VTENTRY
 232

	)

1963 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1964 
	#R_PARISC_TLS_GD21L
 234

	)

1965 
	#R_PARISC_TLS_GD14R
 235

	)

1966 
	#R_PARISC_TLS_GDCALL
 236

	)

1967 
	#R_PARISC_TLS_LDM21L
 237

	)

1968 
	#R_PARISC_TLS_LDM14R
 238

	)

1969 
	#R_PARISC_TLS_LDMCALL
 239

	)

1970 
	#R_PARISC_TLS_LDO21L
 240

	)

1971 
	#R_PARISC_TLS_LDO14R
 241

	)

1972 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1973 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1974 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1975 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1976 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1977 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1978 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1979 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1980 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1981 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1982 
	#R_PARISC_HIRESERVE
 255

	)

1986 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1987 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1988 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1989 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1990 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1991 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1992 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1993 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1994 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1995 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1996 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1997 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1998 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1999 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2000 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2002 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2003 
	#PT_PARISC_UNWIND
 0x70000001

	)

2007 
	#PF_PARISC_SBP
 0x08000000

	)

2009 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2010 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2011 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2012 
	#PF_HP_CODE
 0x01000000

	)

2013 
	#PF_HP_MODIFY
 0x02000000

	)

2014 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2015 
	#PF_HP_SBP
 0x08000000

	)

2022 
	#EF_ALPHA_32BIT
 1

	)

2023 
	#EF_ALPHA_CANRELAX
 2

	)

2028 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2029 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2033 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2036 
	#STO_ALPHA_NOPV
 0x80

	)

2037 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2041 
	#R_ALPHA_NONE
 0

	)

2042 
	#R_ALPHA_REFLONG
 1

	)

2043 
	#R_ALPHA_REFQUAD
 2

	)

2044 
	#R_ALPHA_GPREL32
 3

	)

2045 
	#R_ALPHA_LITERAL
 4

	)

2046 
	#R_ALPHA_LITUSE
 5

	)

2047 
	#R_ALPHA_GPDISP
 6

	)

2048 
	#R_ALPHA_BRADDR
 7

	)

2049 
	#R_ALPHA_HINT
 8

	)

2050 
	#R_ALPHA_SREL16
 9

	)

2051 
	#R_ALPHA_SREL32
 10

	)

2052 
	#R_ALPHA_SREL64
 11

	)

2053 
	#R_ALPHA_GPRELHIGH
 17

	)

2054 
	#R_ALPHA_GPRELLOW
 18

	)

2055 
	#R_ALPHA_GPREL16
 19

	)

2056 
	#R_ALPHA_COPY
 24

	)

2057 
	#R_ALPHA_GLOB_DAT
 25

	)

2058 
	#R_ALPHA_JMP_SLOT
 26

	)

2059 
	#R_ALPHA_RELATIVE
 27

	)

2060 
	#R_ALPHA_TLS_GD_HI
 28

	)

2061 
	#R_ALPHA_TLSGD
 29

	)

2062 
	#R_ALPHA_TLS_LDM
 30

	)

2063 
	#R_ALPHA_DTPMOD64
 31

	)

2064 
	#R_ALPHA_GOTDTPREL
 32

	)

2065 
	#R_ALPHA_DTPREL64
 33

	)

2066 
	#R_ALPHA_DTPRELHI
 34

	)

2067 
	#R_ALPHA_DTPRELLO
 35

	)

2068 
	#R_ALPHA_DTPREL16
 36

	)

2069 
	#R_ALPHA_GOTTPREL
 37

	)

2070 
	#R_ALPHA_TPREL64
 38

	)

2071 
	#R_ALPHA_TPRELHI
 39

	)

2072 
	#R_ALPHA_TPRELLO
 40

	)

2073 
	#R_ALPHA_TPREL16
 41

	)

2075 
	#R_ALPHA_NUM
 46

	)

2078 
	#LITUSE_ALPHA_ADDR
 0

	)

2079 
	#LITUSE_ALPHA_BASE
 1

	)

2080 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2081 
	#LITUSE_ALPHA_JSR
 3

	)

2082 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2083 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2086 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2087 
	#DT_ALPHA_NUM
 1

	)

2092 
	#EF_PPC_EMB
 0x80000000

	)

2095 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2096 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2100 
	#R_PPC_NONE
 0

	)

2101 
	#R_PPC_ADDR32
 1

	)

2102 
	#R_PPC_ADDR24
 2

	)

2103 
	#R_PPC_ADDR16
 3

	)

2104 
	#R_PPC_ADDR16_LO
 4

	)

2105 
	#R_PPC_ADDR16_HI
 5

	)

2106 
	#R_PPC_ADDR16_HA
 6

	)

2107 
	#R_PPC_ADDR14
 7

	)

2108 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2109 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2110 
	#R_PPC_REL24
 10

	)

2111 
	#R_PPC_REL14
 11

	)

2112 
	#R_PPC_REL14_BRTAKEN
 12

	)

2113 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2114 
	#R_PPC_GOT16
 14

	)

2115 
	#R_PPC_GOT16_LO
 15

	)

2116 
	#R_PPC_GOT16_HI
 16

	)

2117 
	#R_PPC_GOT16_HA
 17

	)

2118 
	#R_PPC_PLTREL24
 18

	)

2119 
	#R_PPC_COPY
 19

	)

2120 
	#R_PPC_GLOB_DAT
 20

	)

2121 
	#R_PPC_JMP_SLOT
 21

	)

2122 
	#R_PPC_RELATIVE
 22

	)

2123 
	#R_PPC_LOCAL24PC
 23

	)

2124 
	#R_PPC_UADDR32
 24

	)

2125 
	#R_PPC_UADDR16
 25

	)

2126 
	#R_PPC_REL32
 26

	)

2127 
	#R_PPC_PLT32
 27

	)

2128 
	#R_PPC_PLTREL32
 28

	)

2129 
	#R_PPC_PLT16_LO
 29

	)

2130 
	#R_PPC_PLT16_HI
 30

	)

2131 
	#R_PPC_PLT16_HA
 31

	)

2132 
	#R_PPC_SDAREL16
 32

	)

2133 
	#R_PPC_SECTOFF
 33

	)

2134 
	#R_PPC_SECTOFF_LO
 34

	)

2135 
	#R_PPC_SECTOFF_HI
 35

	)

2136 
	#R_PPC_SECTOFF_HA
 36

	)

2139 
	#R_PPC_TLS
 67

	)

2140 
	#R_PPC_DTPMOD32
 68

	)

2141 
	#R_PPC_TPREL16
 69

	)

2142 
	#R_PPC_TPREL16_LO
 70

	)

2143 
	#R_PPC_TPREL16_HI
 71

	)

2144 
	#R_PPC_TPREL16_HA
 72

	)

2145 
	#R_PPC_TPREL32
 73

	)

2146 
	#R_PPC_DTPREL16
 74

	)

2147 
	#R_PPC_DTPREL16_LO
 75

	)

2148 
	#R_PPC_DTPREL16_HI
 76

	)

2149 
	#R_PPC_DTPREL16_HA
 77

	)

2150 
	#R_PPC_DTPREL32
 78

	)

2151 
	#R_PPC_GOT_TLSGD16
 79

	)

2152 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2153 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2154 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2155 
	#R_PPC_GOT_TLSLD16
 83

	)

2156 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2157 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2158 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2159 
	#R_PPC_GOT_TPREL16
 87

	)

2160 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2161 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2162 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2163 
	#R_PPC_GOT_DTPREL16
 91

	)

2164 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2165 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2166 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2167 
	#R_PPC_TLSGD
 95

	)

2168 
	#R_PPC_TLSLD
 96

	)

2172 
	#R_PPC_EMB_NADDR32
 101

	)

2173 
	#R_PPC_EMB_NADDR16
 102

	)

2174 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2175 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2176 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2177 
	#R_PPC_EMB_SDAI16
 106

	)

2178 
	#R_PPC_EMB_SDA2I16
 107

	)

2179 
	#R_PPC_EMB_SDA2REL
 108

	)

2180 
	#R_PPC_EMB_SDA21
 109

	)

2181 
	#R_PPC_EMB_MRKREF
 110

	)

2182 
	#R_PPC_EMB_RELSEC16
 111

	)

2183 
	#R_PPC_EMB_RELST_LO
 112

	)

2184 
	#R_PPC_EMB_RELST_HI
 113

	)

2185 
	#R_PPC_EMB_RELST_HA
 114

	)

2186 
	#R_PPC_EMB_BIT_FLD
 115

	)

2187 
	#R_PPC_EMB_RELSDA
 116

	)

2190 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2191 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2192 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2193 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2194 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2195 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2198 
	#R_PPC_IRELATIVE
 248

	)

2201 
	#R_PPC_REL16
 249

	)

2202 
	#R_PPC_REL16_LO
 250

	)

2203 
	#R_PPC_REL16_HI
 251

	)

2204 
	#R_PPC_REL16_HA
 252

	)

2208 
	#R_PPC_TOC16
 255

	)

2211 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2212 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2213 
	#DT_PPC_NUM
 2

	)

2216 
	#PPC_OPT_TLS
 1

	)

2219 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2220 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2221 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2222 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2223 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2224 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2225 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2226 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2227 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2228 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2229 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2230 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2231 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2232 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2233 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2234 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2235 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2236 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2238 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2239 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2240 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2241 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2243 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2244 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2245 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2246 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2247 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2248 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2249 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2250 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2252 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2253 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2254 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2255 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2256 
	#R_PPC64_ADDR30
 37

	)

2257 
	#R_PPC64_ADDR64
 38

	)

2258 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2259 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2260 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2261 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2262 
	#R_PPC64_UADDR64
 43

	)

2263 
	#R_PPC64_REL64
 44

	)

2264 
	#R_PPC64_PLT64
 45

	)

2265 
	#R_PPC64_PLTREL64
 46

	)

2266 
	#R_PPC64_TOC16
 47

	)

2267 
	#R_PPC64_TOC16_LO
 48

	)

2268 
	#R_PPC64_TOC16_HI
 49

	)

2269 
	#R_PPC64_TOC16_HA
 50

	)

2270 
	#R_PPC64_TOC
 51

	)

2271 
	#R_PPC64_PLTGOT16
 52

	)

2272 
	#R_PPC64_PLTGOT16_LO
 53

	)

2273 
	#R_PPC64_PLTGOT16_HI
 54

	)

2274 
	#R_PPC64_PLTGOT16_HA
 55

	)

2276 
	#R_PPC64_ADDR16_DS
 56

	)

2277 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2278 
	#R_PPC64_GOT16_DS
 58

	)

2279 
	#R_PPC64_GOT16_LO_DS
 59

	)

2280 
	#R_PPC64_PLT16_LO_DS
 60

	)

2281 
	#R_PPC64_SECTOFF_DS
 61

	)

2282 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2283 
	#R_PPC64_TOC16_DS
 63

	)

2284 
	#R_PPC64_TOC16_LO_DS
 64

	)

2285 
	#R_PPC64_PLTGOT16_DS
 65

	)

2286 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2289 
	#R_PPC64_TLS
 67

	)

2290 
	#R_PPC64_DTPMOD64
 68

	)

2291 
	#R_PPC64_TPREL16
 69

	)

2292 
	#R_PPC64_TPREL16_LO
 70

	)

2293 
	#R_PPC64_TPREL16_HI
 71

	)

2294 
	#R_PPC64_TPREL16_HA
 72

	)

2295 
	#R_PPC64_TPREL64
 73

	)

2296 
	#R_PPC64_DTPREL16
 74

	)

2297 
	#R_PPC64_DTPREL16_LO
 75

	)

2298 
	#R_PPC64_DTPREL16_HI
 76

	)

2299 
	#R_PPC64_DTPREL16_HA
 77

	)

2300 
	#R_PPC64_DTPREL64
 78

	)

2301 
	#R_PPC64_GOT_TLSGD16
 79

	)

2302 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2303 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2304 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2305 
	#R_PPC64_GOT_TLSLD16
 83

	)

2306 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2307 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2308 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2309 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2310 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2311 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2312 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2313 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2314 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2315 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2316 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2317 
	#R_PPC64_TPREL16_DS
 95

	)

2318 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2319 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2320 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2321 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2322 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2323 
	#R_PPC64_DTPREL16_DS
 101

	)

2324 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2325 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2326 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2327 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2328 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2329 
	#R_PPC64_TLSGD
 107

	)

2330 
	#R_PPC64_TLSLD
 108

	)

2331 
	#R_PPC64_TOCSAVE
 109

	)

2334 
	#R_PPC64_ADDR16_HIGH
 110

	)

2335 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2336 
	#R_PPC64_TPREL16_HIGH
 112

	)

2337 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2338 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2339 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2342 
	#R_PPC64_JMP_IREL
 247

	)

2343 
	#R_PPC64_IRELATIVE
 248

	)

2344 
	#R_PPC64_REL16
 249

	)

2345 
	#R_PPC64_REL16_LO
 250

	)

2346 
	#R_PPC64_REL16_HI
 251

	)

2347 
	#R_PPC64_REL16_HA
 252

	)

2353 
	#EF_PPC64_ABI
 3

	)

2356 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2357 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2358 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2359 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2360 
	#DT_PPC64_NUM
 4

	)

2363 
	#PPC64_OPT_TLS
 1

	)

2364 
	#PPC64_OPT_MULTI_TOC
 2

	)

2367 
	#STO_PPC64_LOCAL_BIT
 5

	)

2368 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2369 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2370 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2376 
	#EF_ARM_RELEXEC
 0x01

	)

2377 
	#EF_ARM_HASENTRY
 0x02

	)

2378 
	#EF_ARM_INTERWORK
 0x04

	)

2379 
	#EF_ARM_APCS_26
 0x08

	)

2380 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2381 
	#EF_ARM_PIC
 0x20

	)

2382 
	#EF_ARM_ALIGN8
 0x40

	)

2383 
	#EF_ARM_NEW_ABI
 0x80

	)

2384 
	#EF_ARM_OLD_ABI
 0x100

	)

2385 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2386 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2387 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2389 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2390 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2395 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2396 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2397 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2398 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2401 
	#EF_ARM_BE8
 0x00800000

	)

2402 
	#EF_ARM_LE8
 0x00400000

	)

2404 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2405 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2406 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2407 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2408 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2409 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2410 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2413 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2414 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2417 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2418 
	#SHF_ARM_COMDEF
 0x80000000

	)

2422 
	#PF_ARM_SB
 0x10000000

	)

2424 
	#PF_ARM_PI
 0x20000000

	)

2425 
	#PF_ARM_ABS
 0x40000000

	)

2428 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2431 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2432 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2433 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2438 
	#R_AARCH64_NONE
 0

	)

2441 
	#R_AARCH64_P32_ABS32
 1

	)

2442 
	#R_AARCH64_P32_COPY
 180

	)

2443 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2444 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2445 
	#R_AARCH64_P32_RELATIVE
 183

	)

2446 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2447 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2448 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2449 
	#R_AARCH64_P32_TLSDESC
 187

	)

2450 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2453 
	#R_AARCH64_ABS64
 257

	)

2454 
	#R_AARCH64_ABS32
 258

	)

2455 
	#R_AARCH64_ABS16
 259

	)

2456 
	#R_AARCH64_PREL64
 260

	)

2457 
	#R_AARCH64_PREL32
 261

	)

2458 
	#R_AARCH64_PREL16
 262

	)

2459 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2460 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2461 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2462 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2463 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2464 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2465 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2466 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2467 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2468 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2469 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2470 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2471 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2472 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2473 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2474 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2475 
	#R_AARCH64_TSTBR14
 279

	)

2476 
	#R_AARCH64_CONDBR19
 280

	)

2477 
	#R_AARCH64_JUMP26
 282

	)

2478 
	#R_AARCH64_CALL26
 283

	)

2479 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2480 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2481 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2482 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2483 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2484 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2485 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2486 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2487 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2488 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2489 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2490 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2491 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2492 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2493 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2494 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2495 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2496 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2497 
	#R_AARCH64_GOTREL64
 307

	)

2498 
	#R_AARCH64_GOTREL32
 308

	)

2499 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2500 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2501 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2502 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2503 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2504 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2505 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2506 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2507 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2508 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2509 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2510 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2511 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2512 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2513 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2514 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2515 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2516 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2517 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2518 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2519 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2520 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2521 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2522 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2523 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2524 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2525 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2526 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2527 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2528 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2529 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2530 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2531 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2532 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2533 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2534 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2535 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2536 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2537 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2538 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2539 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2540 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2541 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2542 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2543 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2544 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2545 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2546 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2547 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2548 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2549 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2550 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2551 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2552 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2553 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2554 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2555 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2556 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2557 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2558 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2559 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2560 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2561 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2562 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2563 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2564 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2565 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2566 
	#R_AARCH64_COPY
 1024

	)

2567 
	#R_AARCH64_GLOB_DAT
 1025

	)

2568 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2569 
	#R_AARCH64_RELATIVE
 1027

	)

2570 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2571 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2572 
	#R_AARCH64_TLS_TPREL
 1030

	)

2573 
	#R_AARCH64_TLSDESC
 1031

	)

2574 
	#R_AARCH64_IRELATIVE
 1032

	)

2578 
	#R_ARM_NONE
 0

	)

2579 
	#R_ARM_PC24
 1

	)

2581 
	#R_ARM_ABS32
 2

	)

2582 
	#R_ARM_REL32
 3

	)

2583 
	#R_ARM_PC13
 4

	)

2584 
	#R_ARM_ABS16
 5

	)

2585 
	#R_ARM_ABS12
 6

	)

2586 
	#R_ARM_THM_ABS5
 7

	)

2587 
	#R_ARM_ABS8
 8

	)

2588 
	#R_ARM_SBREL32
 9

	)

2589 
	#R_ARM_THM_PC22
 10

	)

2590 
	#R_ARM_THM_PC8
 11

	)

2592 
	#R_ARM_AMP_VCALL9
 12

	)

2593 
	#R_ARM_SWI24
 13

	)

2594 
	#R_ARM_TLS_DESC
 13

	)

2595 
	#R_ARM_THM_SWI8
 14

	)

2596 
	#R_ARM_XPC25
 15

	)

2597 
	#R_ARM_THM_XPC22
 16

	)

2598 
	#R_ARM_TLS_DTPMOD32
 17

	)

2599 
	#R_ARM_TLS_DTPOFF32
 18

	)

2600 
	#R_ARM_TLS_TPOFF32
 19

	)

2601 
	#R_ARM_COPY
 20

	)

2602 
	#R_ARM_GLOB_DAT
 21

	)

2603 
	#R_ARM_JUMP_SLOT
 22

	)

2604 
	#R_ARM_RELATIVE
 23

	)

2605 
	#R_ARM_GOTOFF
 24

	)

2606 
	#R_ARM_GOTPC
 25

	)

2607 
	#R_ARM_GOT32
 26

	)

2608 
	#R_ARM_PLT32
 27

	)

2609 
	#R_ARM_CALL
 28

	)

2610 
	#R_ARM_JUMP24
 29

	)

2612 
	#R_ARM_THM_JUMP24
 30

	)

2613 
	#R_ARM_BASE_ABS
 31

	)

2614 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2615 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2616 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2617 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2618 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2619 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2620 
	#R_ARM_TARGET1
 38

	)

2621 
	#R_ARM_SBREL31
 39

	)

2622 
	#R_ARM_V4BX
 40

	)

2623 
	#R_ARM_TARGET2
 41

	)

2624 
	#R_ARM_PREL31
 42

	)

2625 
	#R_ARM_MOVW_ABS_NC
 43

	)

2626 
	#R_ARM_MOVT_ABS
 44

	)

2627 
	#R_ARM_MOVW_PREL_NC
 45

	)

2628 
	#R_ARM_MOVT_PREL
 46

	)

2629 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2630 
	#R_ARM_THM_MOVT_ABS
 48

	)

2632 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2634 
	#R_ARM_THM_MOVT_PREL
 50

	)

2636 
	#R_ARM_THM_JUMP19
 51

	)

2638 
	#R_ARM_THM_JUMP6
 52

	)

2640 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2642 
	#R_ARM_THM_PC12
 54

	)

2644 
	#R_ARM_ABS32_NOI
 55

	)

2645 
	#R_ARM_REL32_NOI
 56

	)

2646 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2647 
	#R_ARM_ALU_PC_G0
 58

	)

2648 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2649 
	#R_ARM_ALU_PC_G1
 60

	)

2650 
	#R_ARM_ALU_PC_G2
 61

	)

2651 
	#R_ARM_LDR_PC_G1
 62

	)

2652 
	#R_ARM_LDR_PC_G2
 63

	)

2653 
	#R_ARM_LDRS_PC_G0
 64

	)

2655 
	#R_ARM_LDRS_PC_G1
 65

	)

2657 
	#R_ARM_LDRS_PC_G2
 66

	)

2659 
	#R_ARM_LDC_PC_G0
 67

	)

2660 
	#R_ARM_LDC_PC_G1
 68

	)

2661 
	#R_ARM_LDC_PC_G2
 69

	)

2662 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2663 
	#R_ARM_ALU_SB_G0
 71

	)

2664 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2665 
	#R_ARM_ALU_SB_G1
 73

	)

2666 
	#R_ARM_ALU_SB_G2
 74

	)

2667 
	#R_ARM_LDR_SB_G0
 75

	)

2669 
	#R_ARM_LDR_SB_G1
 76

	)

2671 
	#R_ARM_LDR_SB_G2
 77

	)

2673 
	#R_ARM_LDRS_SB_G0
 78

	)

2675 
	#R_ARM_LDRS_SB_G1
 79

	)

2677 
	#R_ARM_LDRS_SB_G2
 80

	)

2679 
	#R_ARM_LDC_SB_G0
 81

	)

2680 
	#R_ARM_LDC_SB_G1
 82

	)

2681 
	#R_ARM_LDC_SB_G2
 83

	)

2682 
	#R_ARM_MOVW_BREL_NC
 84

	)

2684 
	#R_ARM_MOVT_BREL
 85

	)

2686 
	#R_ARM_MOVW_BREL
 86

	)

2688 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2690 
	#R_ARM_THM_MOVT_BREL
 88

	)

2692 
	#R_ARM_THM_MOVW_BREL
 89

	)

2694 
	#R_ARM_TLS_GOTDESC
 90

	)

2695 
	#R_ARM_TLS_CALL
 91

	)

2696 
	#R_ARM_TLS_DESCSEQ
 92

	)

2697 
	#R_ARM_THM_TLS_CALL
 93

	)

2698 
	#R_ARM_PLT32_ABS
 94

	)

2699 
	#R_ARM_GOT_ABS
 95

	)

2700 
	#R_ARM_GOT_PREL
 96

	)

2701 
	#R_ARM_GOT_BREL12
 97

	)

2703 
	#R_ARM_GOTOFF12
 98

	)

2705 
	#R_ARM_GOTRELAX
 99

	)

2706 
	#R_ARM_GNU_VTENTRY
 100

	)

2707 
	#R_ARM_GNU_VTINHERIT
 101

	)

2708 
	#R_ARM_THM_PC11
 102

	)

2709 
	#R_ARM_THM_PC9
 103

	)

2711 
	#R_ARM_TLS_GD32
 104

	)

2713 
	#R_ARM_TLS_LDM32
 105

	)

2715 
	#R_ARM_TLS_LDO32
 106

	)

2717 
	#R_ARM_TLS_IE32
 107

	)

2719 
	#R_ARM_TLS_LE32
 108

	)

2721 
	#R_ARM_TLS_LDO12
 109

	)

2723 
	#R_ARM_TLS_LE12
 110

	)

2725 
	#R_ARM_TLS_IE12GP
 111

	)

2727 
	#R_ARM_ME_TOO
 128

	)

2728 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2729 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2730 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2731 
	#R_ARM_THM_GOT_BREL12
 131

	)

2733 
	#R_ARM_IRELATIVE
 160

	)

2734 
	#R_ARM_RXPC25
 249

	)

2735 
	#R_ARM_RSBREL32
 250

	)

2736 
	#R_ARM_THM_RPC22
 251

	)

2737 
	#R_ARM_RREL32
 252

	)

2738 
	#R_ARM_RABS22
 253

	)

2739 
	#R_ARM_RPC24
 254

	)

2740 
	#R_ARM_RBASE
 255

	)

2742 
	#R_ARM_NUM
 256

	)

2747 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2748 
	#EF_IA_64_ABI64
 0x00000010

	)

2749 
	#EF_IA_64_ARCH
 0xff000000

	)

2752 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2753 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2754 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2755 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2756 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2759 
	#PF_IA_64_NORECOV
 0x80000000

	)

2762 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2763 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2766 
	#SHF_IA_64_SHORT
 0x10000000

	)

2767 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2770 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2771 
	#DT_IA_64_NUM
 1

	)

2774 
	#R_IA64_NONE
 0x00

	)

2775 
	#R_IA64_IMM14
 0x21

	)

2776 
	#R_IA64_IMM22
 0x22

	)

2777 
	#R_IA64_IMM64
 0x23

	)

2778 
	#R_IA64_DIR32MSB
 0x24

	)

2779 
	#R_IA64_DIR32LSB
 0x25

	)

2780 
	#R_IA64_DIR64MSB
 0x26

	)

2781 
	#R_IA64_DIR64LSB
 0x27

	)

2782 
	#R_IA64_GPREL22
 0x2®

	)

2783 
	#R_IA64_GPREL64I
 0x2b

	)

2784 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2785 
	#R_IA64_GPREL32LSB
 0x2d

	)

2786 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2787 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2788 
	#R_IA64_LTOFF22
 0x32

	)

2789 
	#R_IA64_LTOFF64I
 0x33

	)

2790 
	#R_IA64_PLTOFF22
 0x3®

	)

2791 
	#R_IA64_PLTOFF64I
 0x3b

	)

2792 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2793 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2794 
	#R_IA64_FPTR64I
 0x43

	)

2795 
	#R_IA64_FPTR32MSB
 0x44

	)

2796 
	#R_IA64_FPTR32LSB
 0x45

	)

2797 
	#R_IA64_FPTR64MSB
 0x46

	)

2798 
	#R_IA64_FPTR64LSB
 0x47

	)

2799 
	#R_IA64_PCREL60B
 0x48

	)

2800 
	#R_IA64_PCREL21B
 0x49

	)

2801 
	#R_IA64_PCREL21M
 0x4®

	)

2802 
	#R_IA64_PCREL21F
 0x4b

	)

2803 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2804 
	#R_IA64_PCREL32LSB
 0x4d

	)

2805 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2806 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2807 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2808 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2809 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2810 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2811 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2812 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2813 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2814 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2815 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2816 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2817 
	#R_IA64_SECREL32MSB
 0x64

	)

2818 
	#R_IA64_SECREL32LSB
 0x65

	)

2819 
	#R_IA64_SECREL64MSB
 0x66

	)

2820 
	#R_IA64_SECREL64LSB
 0x67

	)

2821 
	#R_IA64_REL32MSB
 0x6¯

	)

2822 
	#R_IA64_REL32LSB
 0x6d

	)

2823 
	#R_IA64_REL64MSB
 0x6ê

	)

2824 
	#R_IA64_REL64LSB
 0x6‡

	)

2825 
	#R_IA64_LTV32MSB
 0x74

	)

2826 
	#R_IA64_LTV32LSB
 0x75

	)

2827 
	#R_IA64_LTV64MSB
 0x76

	)

2828 
	#R_IA64_LTV64LSB
 0x77

	)

2829 
	#R_IA64_PCREL21BI
 0x79

	)

2830 
	#R_IA64_PCREL22
 0x7®

	)

2831 
	#R_IA64_PCREL64I
 0x7b

	)

2832 
	#R_IA64_IPLTMSB
 0x80

	)

2833 
	#R_IA64_IPLTLSB
 0x81

	)

2834 
	#R_IA64_COPY
 0x84

	)

2835 
	#R_IA64_SUB
 0x85

	)

2836 
	#R_IA64_LTOFF22X
 0x86

	)

2837 
	#R_IA64_LDXMOV
 0x87

	)

2838 
	#R_IA64_TPREL14
 0x91

	)

2839 
	#R_IA64_TPREL22
 0x92

	)

2840 
	#R_IA64_TPREL64I
 0x93

	)

2841 
	#R_IA64_TPREL64MSB
 0x96

	)

2842 
	#R_IA64_TPREL64LSB
 0x97

	)

2843 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2844 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2845 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2846 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2847 
	#R_IA64_DTPREL14
 0xb1

	)

2848 
	#R_IA64_DTPREL22
 0xb2

	)

2849 
	#R_IA64_DTPREL64I
 0xb3

	)

2850 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2851 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2852 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2853 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2854 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2859 
	#EF_SH_MACH_MASK
 0x1f

	)

2860 
	#EF_SH_UNKNOWN
 0x0

	)

2861 
	#EF_SH1
 0x1

	)

2862 
	#EF_SH2
 0x2

	)

2863 
	#EF_SH3
 0x3

	)

2864 
	#EF_SH_DSP
 0x4

	)

2865 
	#EF_SH3_DSP
 0x5

	)

2866 
	#EF_SH4AL_DSP
 0x6

	)

2867 
	#EF_SH3E
 0x8

	)

2868 
	#EF_SH4
 0x9

	)

2869 
	#EF_SH2E
 0xb

	)

2870 
	#EF_SH4A
 0xc

	)

2871 
	#EF_SH2A
 0xd

	)

2872 
	#EF_SH4_NOFPU
 0x10

	)

2873 
	#EF_SH4A_NOFPU
 0x11

	)

2874 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2875 
	#EF_SH2A_NOFPU
 0x13

	)

2876 
	#EF_SH3_NOMMU
 0x14

	)

2877 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2878 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2879 
	#EF_SH2A_SH4
 0x17

	)

2880 
	#EF_SH2A_SH3E
 0x18

	)

2883 
	#R_SH_NONE
 0

	)

2884 
	#R_SH_DIR32
 1

	)

2885 
	#R_SH_REL32
 2

	)

2886 
	#R_SH_DIR8WPN
 3

	)

2887 
	#R_SH_IND12W
 4

	)

2888 
	#R_SH_DIR8WPL
 5

	)

2889 
	#R_SH_DIR8WPZ
 6

	)

2890 
	#R_SH_DIR8BP
 7

	)

2891 
	#R_SH_DIR8W
 8

	)

2892 
	#R_SH_DIR8L
 9

	)

2893 
	#R_SH_SWITCH16
 25

	)

2894 
	#R_SH_SWITCH32
 26

	)

2895 
	#R_SH_USES
 27

	)

2896 
	#R_SH_COUNT
 28

	)

2897 
	#R_SH_ALIGN
 29

	)

2898 
	#R_SH_CODE
 30

	)

2899 
	#R_SH_DATA
 31

	)

2900 
	#R_SH_LABEL
 32

	)

2901 
	#R_SH_SWITCH8
 33

	)

2902 
	#R_SH_GNU_VTINHERIT
 34

	)

2903 
	#R_SH_GNU_VTENTRY
 35

	)

2904 
	#R_SH_TLS_GD_32
 144

	)

2905 
	#R_SH_TLS_LD_32
 145

	)

2906 
	#R_SH_TLS_LDO_32
 146

	)

2907 
	#R_SH_TLS_IE_32
 147

	)

2908 
	#R_SH_TLS_LE_32
 148

	)

2909 
	#R_SH_TLS_DTPMOD32
 149

	)

2910 
	#R_SH_TLS_DTPOFF32
 150

	)

2911 
	#R_SH_TLS_TPOFF32
 151

	)

2912 
	#R_SH_GOT32
 160

	)

2913 
	#R_SH_PLT32
 161

	)

2914 
	#R_SH_COPY
 162

	)

2915 
	#R_SH_GLOB_DAT
 163

	)

2916 
	#R_SH_JMP_SLOT
 164

	)

2917 
	#R_SH_RELATIVE
 165

	)

2918 
	#R_SH_GOTOFF
 166

	)

2919 
	#R_SH_GOTPC
 167

	)

2921 
	#R_SH_NUM
 256

	)

2927 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2931 
	#R_390_NONE
 0

	)

2932 
	#R_390_8
 1

	)

2933 
	#R_390_12
 2

	)

2934 
	#R_390_16
 3

	)

2935 
	#R_390_32
 4

	)

2936 
	#R_390_PC32
 5

	)

2937 
	#R_390_GOT12
 6

	)

2938 
	#R_390_GOT32
 7

	)

2939 
	#R_390_PLT32
 8

	)

2940 
	#R_390_COPY
 9

	)

2941 
	#R_390_GLOB_DAT
 10

	)

2942 
	#R_390_JMP_SLOT
 11

	)

2943 
	#R_390_RELATIVE
 12

	)

2944 
	#R_390_GOTOFF32
 13

	)

2945 
	#R_390_GOTPC
 14

	)

2946 
	#R_390_GOT16
 15

	)

2947 
	#R_390_PC16
 16

	)

2948 
	#R_390_PC16DBL
 17

	)

2949 
	#R_390_PLT16DBL
 18

	)

2950 
	#R_390_PC32DBL
 19

	)

2951 
	#R_390_PLT32DBL
 20

	)

2952 
	#R_390_GOTPCDBL
 21

	)

2953 
	#R_390_64
 22

	)

2954 
	#R_390_PC64
 23

	)

2955 
	#R_390_GOT64
 24

	)

2956 
	#R_390_PLT64
 25

	)

2957 
	#R_390_GOTENT
 26

	)

2958 
	#R_390_GOTOFF16
 27

	)

2959 
	#R_390_GOTOFF64
 28

	)

2960 
	#R_390_GOTPLT12
 29

	)

2961 
	#R_390_GOTPLT16
 30

	)

2962 
	#R_390_GOTPLT32
 31

	)

2963 
	#R_390_GOTPLT64
 32

	)

2964 
	#R_390_GOTPLTENT
 33

	)

2965 
	#R_390_PLTOFF16
 34

	)

2966 
	#R_390_PLTOFF32
 35

	)

2967 
	#R_390_PLTOFF64
 36

	)

2968 
	#R_390_TLS_LOAD
 37

	)

2969 
	#R_390_TLS_GDCALL
 38

	)

2971 
	#R_390_TLS_LDCALL
 39

	)

2973 
	#R_390_TLS_GD32
 40

	)

2975 
	#R_390_TLS_GD64
 41

	)

2977 
	#R_390_TLS_GOTIE12
 42

	)

2979 
	#R_390_TLS_GOTIE32
 43

	)

2981 
	#R_390_TLS_GOTIE64
 44

	)

2983 
	#R_390_TLS_LDM32
 45

	)

2985 
	#R_390_TLS_LDM64
 46

	)

2987 
	#R_390_TLS_IE32
 47

	)

2989 
	#R_390_TLS_IE64
 48

	)

2991 
	#R_390_TLS_IEENT
 49

	)

2993 
	#R_390_TLS_LE32
 50

	)

2995 
	#R_390_TLS_LE64
 51

	)

2997 
	#R_390_TLS_LDO32
 52

	)

2999 
	#R_390_TLS_LDO64
 53

	)

3001 
	#R_390_TLS_DTPMOD
 54

	)

3002 
	#R_390_TLS_DTPOFF
 55

	)

3003 
	#R_390_TLS_TPOFF
 56

	)

3005 
	#R_390_20
 57

	)

3006 
	#R_390_GOT20
 58

	)

3007 
	#R_390_GOTPLT20
 59

	)

3008 
	#R_390_TLS_GOTIE20
 60

	)

3010 
	#R_390_IRELATIVE
 61

	)

3012 
	#R_390_NUM
 62

	)

3016 
	#R_CRIS_NONE
 0

	)

3017 
	#R_CRIS_8
 1

	)

3018 
	#R_CRIS_16
 2

	)

3019 
	#R_CRIS_32
 3

	)

3020 
	#R_CRIS_8_PCREL
 4

	)

3021 
	#R_CRIS_16_PCREL
 5

	)

3022 
	#R_CRIS_32_PCREL
 6

	)

3023 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3024 
	#R_CRIS_GNU_VTENTRY
 8

	)

3025 
	#R_CRIS_COPY
 9

	)

3026 
	#R_CRIS_GLOB_DAT
 10

	)

3027 
	#R_CRIS_JUMP_SLOT
 11

	)

3028 
	#R_CRIS_RELATIVE
 12

	)

3029 
	#R_CRIS_16_GOT
 13

	)

3030 
	#R_CRIS_32_GOT
 14

	)

3031 
	#R_CRIS_16_GOTPLT
 15

	)

3032 
	#R_CRIS_32_GOTPLT
 16

	)

3033 
	#R_CRIS_32_GOTREL
 17

	)

3034 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3035 
	#R_CRIS_32_PLT_PCREL
 19

	)

3037 
	#R_CRIS_NUM
 20

	)

3041 
	#R_X86_64_NONE
 0

	)

3042 
	#R_X86_64_64
 1

	)

3043 
	#R_X86_64_PC32
 2

	)

3044 
	#R_X86_64_GOT32
 3

	)

3045 
	#R_X86_64_PLT32
 4

	)

3046 
	#R_X86_64_COPY
 5

	)

3047 
	#R_X86_64_GLOB_DAT
 6

	)

3048 
	#R_X86_64_JUMP_SLOT
 7

	)

3049 
	#R_X86_64_RELATIVE
 8

	)

3050 
	#R_X86_64_GOTPCREL
 9

	)

3052 
	#R_X86_64_32
 10

	)

3053 
	#R_X86_64_32S
 11

	)

3054 
	#R_X86_64_16
 12

	)

3055 
	#R_X86_64_PC16
 13

	)

3056 
	#R_X86_64_8
 14

	)

3057 
	#R_X86_64_PC8
 15

	)

3058 
	#R_X86_64_DTPMOD64
 16

	)

3059 
	#R_X86_64_DTPOFF64
 17

	)

3060 
	#R_X86_64_TPOFF64
 18

	)

3061 
	#R_X86_64_TLSGD
 19

	)

3063 
	#R_X86_64_TLSLD
 20

	)

3065 
	#R_X86_64_DTPOFF32
 21

	)

3066 
	#R_X86_64_GOTTPOFF
 22

	)

3068 
	#R_X86_64_TPOFF32
 23

	)

3069 
	#R_X86_64_PC64
 24

	)

3070 
	#R_X86_64_GOTOFF64
 25

	)

3071 
	#R_X86_64_GOTPC32
 26

	)

3073 
	#R_X86_64_GOT64
 27

	)

3074 
	#R_X86_64_GOTPCREL64
 28

	)

3076 
	#R_X86_64_GOTPC64
 29

	)

3077 
	#R_X86_64_GOTPLT64
 30

	)

3078 
	#R_X86_64_PLTOFF64
 31

	)

3080 
	#R_X86_64_SIZE32
 32

	)

3081 
	#R_X86_64_SIZE64
 33

	)

3082 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3083 
	#R_X86_64_TLSDESC_CALL
 35

	)

3085 
	#R_X86_64_TLSDESC
 36

	)

3086 
	#R_X86_64_IRELATIVE
 37

	)

3087 
	#R_X86_64_RELATIVE64
 38

	)

3089 
	#R_X86_64_NUM
 39

	)

3093 
	#R_MN10300_NONE
 0

	)

3094 
	#R_MN10300_32
 1

	)

3095 
	#R_MN10300_16
 2

	)

3096 
	#R_MN10300_8
 3

	)

3097 
	#R_MN10300_PCREL32
 4

	)

3098 
	#R_MN10300_PCREL16
 5

	)

3099 
	#R_MN10300_PCREL8
 6

	)

3100 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3101 
	#R_MN10300_GNU_VTENTRY
 8

	)

3102 
	#R_MN10300_24
 9

	)

3103 
	#R_MN10300_GOTPC32
 10

	)

3104 
	#R_MN10300_GOTPC16
 11

	)

3105 
	#R_MN10300_GOTOFF32
 12

	)

3106 
	#R_MN10300_GOTOFF24
 13

	)

3107 
	#R_MN10300_GOTOFF16
 14

	)

3108 
	#R_MN10300_PLT32
 15

	)

3109 
	#R_MN10300_PLT16
 16

	)

3110 
	#R_MN10300_GOT32
 17

	)

3111 
	#R_MN10300_GOT24
 18

	)

3112 
	#R_MN10300_GOT16
 19

	)

3113 
	#R_MN10300_COPY
 20

	)

3114 
	#R_MN10300_GLOB_DAT
 21

	)

3115 
	#R_MN10300_JMP_SLOT
 22

	)

3116 
	#R_MN10300_RELATIVE
 23

	)

3117 
	#R_MN10300_TLS_GD
 24

	)

3118 
	#R_MN10300_TLS_LD
 25

	)

3119 
	#R_MN10300_TLS_LDO
 26

	)

3120 
	#R_MN10300_TLS_GOTIE
 27

	)

3122 
	#R_MN10300_TLS_IE
 28

	)

3124 
	#R_MN10300_TLS_LE
 29

	)

3126 
	#R_MN10300_TLS_DTPMOD
 30

	)

3127 
	#R_MN10300_TLS_DTPOFF
 31

	)

3128 
	#R_MN10300_TLS_TPOFF
 32

	)

3129 
	#R_MN10300_SYM_DIFF
 33

	)

3131 
	#R_MN10300_ALIGN
 34

	)

3133 
	#R_MN10300_NUM
 35

	)

3137 
	#R_M32R_NONE
 0

	)

3138 
	#R_M32R_16
 1

	)

3139 
	#R_M32R_32
 2

	)

3140 
	#R_M32R_24
 3

	)

3141 
	#R_M32R_10_PCREL
 4

	)

3142 
	#R_M32R_18_PCREL
 5

	)

3143 
	#R_M32R_26_PCREL
 6

	)

3144 
	#R_M32R_HI16_ULO
 7

	)

3145 
	#R_M32R_HI16_SLO
 8

	)

3146 
	#R_M32R_LO16
 9

	)

3147 
	#R_M32R_SDA16
 10

	)

3148 
	#R_M32R_GNU_VTINHERIT
 11

	)

3149 
	#R_M32R_GNU_VTENTRY
 12

	)

3151 
	#R_M32R_16_RELA
 33

	)

3152 
	#R_M32R_32_RELA
 34

	)

3153 
	#R_M32R_24_RELA
 35

	)

3154 
	#R_M32R_10_PCREL_RELA
 36

	)

3155 
	#R_M32R_18_PCREL_RELA
 37

	)

3156 
	#R_M32R_26_PCREL_RELA
 38

	)

3157 
	#R_M32R_HI16_ULO_RELA
 39

	)

3158 
	#R_M32R_HI16_SLO_RELA
 40

	)

3159 
	#R_M32R_LO16_RELA
 41

	)

3160 
	#R_M32R_SDA16_RELA
 42

	)

3161 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3162 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3163 
	#R_M32R_REL32
 45

	)

3165 
	#R_M32R_GOT24
 48

	)

3166 
	#R_M32R_26_PLTREL
 49

	)

3167 
	#R_M32R_COPY
 50

	)

3168 
	#R_M32R_GLOB_DAT
 51

	)

3169 
	#R_M32R_JMP_SLOT
 52

	)

3170 
	#R_M32R_RELATIVE
 53

	)

3171 
	#R_M32R_GOTOFF
 54

	)

3172 
	#R_M32R_GOTPC24
 55

	)

3173 
	#R_M32R_GOT16_HI_ULO
 56

	)

3175 
	#R_M32R_GOT16_HI_SLO
 57

	)

3177 
	#R_M32R_GOT16_LO
 58

	)

3178 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3180 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3182 
	#R_M32R_GOTPC_LO
 61

	)

3184 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3186 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3188 
	#R_M32R_GOTOFF_LO
 64

	)

3189 
	#R_M32R_NUM
 256

	)

3192 
	#R_MICROBLAZE_NONE
 0

	)

3193 
	#R_MICROBLAZE_32
 1

	)

3194 
	#R_MICROBLAZE_32_PCREL
 2

	)

3195 
	#R_MICROBLAZE_64_PCREL
 3

	)

3196 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3197 
	#R_MICROBLAZE_64
 5

	)

3198 
	#R_MICROBLAZE_32_LO
 6

	)

3199 
	#R_MICROBLAZE_SRO32
 7

	)

3200 
	#R_MICROBLAZE_SRW32
 8

	)

3201 
	#R_MICROBLAZE_64_NONE
 9

	)

3202 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3203 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3204 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3205 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3206 
	#R_MICROBLAZE_GOT_64
 14

	)

3207 
	#R_MICROBLAZE_PLT_64
 15

	)

3208 
	#R_MICROBLAZE_REL
 16

	)

3209 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3210 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3211 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3212 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3213 
	#R_MICROBLAZE_COPY
 21

	)

3214 
	#R_MICROBLAZE_TLS
 22

	)

3215 
	#R_MICROBLAZE_TLSGD
 23

	)

3216 
	#R_MICROBLAZE_TLSLD
 24

	)

3217 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3218 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3219 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3220 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3221 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3224 
	#DT_NIOS2_GP
 0x70000002

	)

3227 
	#R_NIOS2_NONE
 0

	)

3228 
	#R_NIOS2_S16
 1

	)

3229 
	#R_NIOS2_U16
 2

	)

3230 
	#R_NIOS2_PCREL16
 3

	)

3231 
	#R_NIOS2_CALL26
 4

	)

3232 
	#R_NIOS2_IMM5
 5

	)

3233 
	#R_NIOS2_CACHE_OPX
 6

	)

3234 
	#R_NIOS2_IMM6
 7

	)

3235 
	#R_NIOS2_IMM8
 8

	)

3236 
	#R_NIOS2_HI16
 9

	)

3237 
	#R_NIOS2_LO16
 10

	)

3238 
	#R_NIOS2_HIADJ16
 11

	)

3239 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3240 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3241 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3242 
	#R_NIOS2_GPREL
 15

	)

3243 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3244 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3245 
	#R_NIOS2_UJMP
 18

	)

3246 
	#R_NIOS2_CJMP
 19

	)

3247 
	#R_NIOS2_CALLR
 20

	)

3248 
	#R_NIOS2_ALIGN
 21

	)

3250 
	#R_NIOS2_GOT16
 22

	)

3251 
	#R_NIOS2_CALL16
 23

	)

3252 
	#R_NIOS2_GOTOFF_LO
 24

	)

3253 
	#R_NIOS2_GOTOFF_HA
 25

	)

3254 
	#R_NIOS2_PCREL_LO
 26

	)

3255 
	#R_NIOS2_PCREL_HA
 27

	)

3256 
	#R_NIOS2_TLS_GD16
 28

	)

3257 
	#R_NIOS2_TLS_LDM16
 29

	)

3258 
	#R_NIOS2_TLS_LDO16
 30

	)

3259 
	#R_NIOS2_TLS_IE16
 31

	)

3260 
	#R_NIOS2_TLS_LE16
 32

	)

3261 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3262 
	#R_NIOS2_TLS_DTPREL
 34

	)

3263 
	#R_NIOS2_TLS_TPREL
 35

	)

3264 
	#R_NIOS2_COPY
 36

	)

3265 
	#R_NIOS2_GLOB_DAT
 37

	)

3266 
	#R_NIOS2_JUMP_SLOT
 38

	)

3267 
	#R_NIOS2_RELATIVE
 39

	)

3268 
	#R_NIOS2_GOTOFF
 40

	)

3269 
	#R_NIOS2_CALL26_NOAT
 41

	)

3270 
	#R_NIOS2_GOT_LO
 42

	)

3271 
	#R_NIOS2_GOT_HA
 43

	)

3272 
	#R_NIOS2_CALL_LO
 44

	)

3273 
	#R_NIOS2_CALL_HA
 45

	)

3276 
	#R_TILEPRO_NONE
 0

	)

3277 
	#R_TILEPRO_32
 1

	)

3278 
	#R_TILEPRO_16
 2

	)

3279 
	#R_TILEPRO_8
 3

	)

3280 
	#R_TILEPRO_32_PCREL
 4

	)

3281 
	#R_TILEPRO_16_PCREL
 5

	)

3282 
	#R_TILEPRO_8_PCREL
 6

	)

3283 
	#R_TILEPRO_LO16
 7

	)

3284 
	#R_TILEPRO_HI16
 8

	)

3285 
	#R_TILEPRO_HA16
 9

	)

3286 
	#R_TILEPRO_COPY
 10

	)

3287 
	#R_TILEPRO_GLOB_DAT
 11

	)

3288 
	#R_TILEPRO_JMP_SLOT
 12

	)

3289 
	#R_TILEPRO_RELATIVE
 13

	)

3290 
	#R_TILEPRO_BROFF_X1
 14

	)

3291 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3292 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3293 
	#R_TILEPRO_IMM8_X0
 17

	)

3294 
	#R_TILEPRO_IMM8_Y0
 18

	)

3295 
	#R_TILEPRO_IMM8_X1
 19

	)

3296 
	#R_TILEPRO_IMM8_Y1
 20

	)

3297 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3298 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3299 
	#R_TILEPRO_IMM16_X0
 23

	)

3300 
	#R_TILEPRO_IMM16_X1
 24

	)

3301 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3302 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3303 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3304 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3305 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3306 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3307 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3308 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3309 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3310 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3311 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3312 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3313 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3314 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3315 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3316 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3317 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3318 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3319 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3320 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3321 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3322 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3323 
	#R_TILEPRO_MMSTART_X0
 47

	)

3324 
	#R_TILEPRO_MMEND_X0
 48

	)

3325 
	#R_TILEPRO_MMSTART_X1
 49

	)

3326 
	#R_TILEPRO_MMEND_X1
 50

	)

3327 
	#R_TILEPRO_SHAMT_X0
 51

	)

3328 
	#R_TILEPRO_SHAMT_X1
 52

	)

3329 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3330 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3331 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3333 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3334 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3335 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3336 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3337 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3338 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3339 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3340 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3341 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3342 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3343 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3344 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3345 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3346 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3347 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3348 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3349 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3350 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3351 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3352 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3353 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3354 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3355 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3356 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3357 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3358 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3359 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3360 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3361 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3362 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3363 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3364 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3365 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3367 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3368 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3370 
	#R_TILEPRO_NUM
 130

	)

3374 
	#R_TILEGX_NONE
 0

	)

3375 
	#R_TILEGX_64
 1

	)

3376 
	#R_TILEGX_32
 2

	)

3377 
	#R_TILEGX_16
 3

	)

3378 
	#R_TILEGX_8
 4

	)

3379 
	#R_TILEGX_64_PCREL
 5

	)

3380 
	#R_TILEGX_32_PCREL
 6

	)

3381 
	#R_TILEGX_16_PCREL
 7

	)

3382 
	#R_TILEGX_8_PCREL
 8

	)

3383 
	#R_TILEGX_HW0
 9

	)

3384 
	#R_TILEGX_HW1
 10

	)

3385 
	#R_TILEGX_HW2
 11

	)

3386 
	#R_TILEGX_HW3
 12

	)

3387 
	#R_TILEGX_HW0_LAST
 13

	)

3388 
	#R_TILEGX_HW1_LAST
 14

	)

3389 
	#R_TILEGX_HW2_LAST
 15

	)

3390 
	#R_TILEGX_COPY
 16

	)

3391 
	#R_TILEGX_GLOB_DAT
 17

	)

3392 
	#R_TILEGX_JMP_SLOT
 18

	)

3393 
	#R_TILEGX_RELATIVE
 19

	)

3394 
	#R_TILEGX_BROFF_X1
 20

	)

3395 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3396 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3397 
	#R_TILEGX_IMM8_X0
 23

	)

3398 
	#R_TILEGX_IMM8_Y0
 24

	)

3399 
	#R_TILEGX_IMM8_X1
 25

	)

3400 
	#R_TILEGX_IMM8_Y1
 26

	)

3401 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3402 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3403 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3404 
	#R_TILEGX_MMSTART_X0
 30

	)

3405 
	#R_TILEGX_MMEND_X0
 31

	)

3406 
	#R_TILEGX_SHAMT_X0
 32

	)

3407 
	#R_TILEGX_SHAMT_X1
 33

	)

3408 
	#R_TILEGX_SHAMT_Y0
 34

	)

3409 
	#R_TILEGX_SHAMT_Y1
 35

	)

3410 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3411 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3412 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3413 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3414 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3415 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3416 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3417 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3418 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3419 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3420 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3421 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3422 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3423 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3424 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3425 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3426 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3427 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3428 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3429 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3430 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3431 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3432 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3433 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3434 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3435 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3436 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3437 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3438 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3439 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3440 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3441 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3442 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3443 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3444 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3445 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3446 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3447 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3448 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3449 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3450 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3451 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3452 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3453 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3454 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3455 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3456 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3457 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3458 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3459 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3460 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3461 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3462 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3463 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3465 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3466 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3467 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3468 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3469 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3470 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3471 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3472 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3473 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3474 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3475 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3476 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3478 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3479 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3480 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3481 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3482 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3483 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3484 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3485 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3486 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3487 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3488 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3489 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3490 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3491 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3492 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3493 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3495 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3496 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3498 
	#R_TILEGX_NUM
 130

	)

3501 
	g__END_DECLS


	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 
__±r_t


	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/auxv.h

20 
	#AT_NULL
 0

	)

21 
	#AT_IGNORE
 1

	)

22 
	#AT_EXECFD
 2

	)

23 
	#AT_PHDR
 3

	)

24 
	#AT_PHENT
 4

	)

25 
	#AT_PHNUM
 5

	)

26 
	#AT_PAGESZ
 6

	)

27 
	#AT_BASE
 7

	)

28 
	#AT_FLAGS
 8

	)

29 
	#AT_ENTRY
 9

	)

30 
	#AT_NOTELF
 10

	)

31 
	#AT_UID
 11

	)

32 
	#AT_EUID
 12

	)

33 
	#AT_GID
 13

	)

34 
	#AT_EGID
 14

	)

35 
	#AT_CLKTCK
 17

	)

38 
	#AT_PLATFORM
 15

	)

39 
	#AT_HWCAP
 16

	)

44 
	#AT_FPUCW
 18

	)

47 
	#AT_DCACHEBSIZE
 19

	)

48 
	#AT_ICACHEBSIZE
 20

	)

49 
	#AT_UCACHEBSIZE
 21

	)

53 
	#AT_IGNOREPPC
 22

	)

55 
	#AT_SECURE
 23

	)

57 
	#AT_BASE_PLATFORM
 24

	)

59 
	#AT_RANDOM
 25

	)

61 
	#AT_HWCAP2
 26

	)

64 
	#AT_EXECFN
 31

	)

68 
	#AT_SYSINFO
 32

	)

69 
	#AT_SYSINFO_EHDR
 33

	)

73 
	#AT_L1I_CACHESHAPE
 34

	)

74 
	#AT_L1D_CACHESHAPE
 35

	)

75 
	#AT_L2_CACHESHAPE
 36

	)

76 
	#AT_L3_CACHESHAPE
 37

	)

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_REMOVE
 9

	)

85 
	#MADV_DONTFORK
 10

	)

86 
	#MADV_DOFORK
 11

	)

87 
	#MADV_MERGEABLE
 12

	)

88 
	#MADV_UNMERGEABLE
 13

	)

89 
	#MADV_HUGEPAGE
 14

	)

90 
	#MADV_NOHUGEPAGE
 15

	)

91 
	#MADV_DONTDUMP
 16

	)

93 
	#MADV_DODUMP
 17

	)

94 
	#MADV_HWPOISON
 100

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

107 #i‚de‡
MCL_CURRENT


108 
	#MCL_CURRENT
 1

	)

109 
	#MCL_FUTURE
 2

	)

111 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
184
4770
apps/sosh/src/benchmark.c
apps/sosh/src/benchmark.h
apps/sosh/src/sosh.c
apps/tty_test/src/tty_test.c
apps/tty_test/src/ttyout.c
libaos/include/aos/debug.h
libaos/include/aos/registers.h
libaos/include/aos/sel4_zf_logif.h
libaos/include/aos/strerror.h
libaos/include/aos/vsyscall.h
libaos/src/debug.c
libaos/src/strerror.c
libaos/src/vsyscall.c
libclock/include/clock/clock.h
libclock/include/clock/device.h
libclock/include/clock/timestamp.h
libclock/src/clock.c
libethernet/include/ethernet/ethernet.h
libethernet/src/ethernet.c
libethernet/src/io.h
libethernet/src/uboot/bitops.h
libethernet/src/uboot/common.h
libethernet/src/uboot/config.h
libethernet/src/uboot/designware.c
libethernet/src/uboot/designware.h
libethernet/src/uboot/err.h
libethernet/src/uboot/ethtool.h
libethernet/src/uboot/list.h
libethernet/src/uboot/mdio.h
libethernet/src/uboot/mii.h
libethernet/src/uboot/miiphy.h
libethernet/src/uboot/miiphyutil.c
libethernet/src/uboot/net.h
libethernet/src/uboot/netdev.h
libethernet/src/uboot/phy.c
libethernet/src/uboot/phy.h
libethernet/src/uboot/realtek.c
libethernet/src/uboot/system.h
libethernet/src/unimplemented.c
libethernet/src/unimplemented.h
libsel4cspace/include/cspace/bitfield.h
libsel4cspace/include/cspace/cspace.h
libsel4cspace/src/cspace.c
libserial/include/serial/serial.h
libserial/src/serial.c
libsosapi/include/sos.h
libsosapi/include/syscalls.h
libsosapi/include/ttyout.h
libsosapi/src/sos.c
libsosapi/src/sys_exit.c
libsosapi/src/sys_morecore.c
libsosapi/src/sys_stdio.c
libsosapi/src/sys_thread.c
libsosapi/src/sys_time.c
libsosapi/src/vsyscall.c
sos/src/backtrace.h
sos/src/bootstrap.c
sos/src/bootstrap.h
sos/src/dma.c
sos/src/dma.h
sos/src/drivers/uart.c
sos/src/drivers/uart.h
sos/src/elf.c
sos/src/elfload.h
sos/src/main.c
sos/src/mapping.c
sos/src/mapping.h
sos/src/network.c
sos/src/network.h
sos/src/sys/backtrace.c
sos/src/sys/execinfo.h
sos/src/sys/exit.c
sos/src/sys/morecore.c
sos/src/sys/stdio.c
sos/src/sys/thread.c
sos/src/sys/time.c
sos/src/sys/unwind.h
sos/src/syscalls.h
sos/src/tests.c
sos/src/tests.h
sos/src/ut.c
sos/src/ut.h
sos/src/vmem_layout.h
/usr/include/assert.h
/usr/include/bits/errno.h
/usr/include/bits/syscall.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/poll.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/resource.h
/usr/include/sys/socket.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/auxv.h
/usr/include/bits/confname.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/mman.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sigset.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/errno.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/byteswap-16.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
